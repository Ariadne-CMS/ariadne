<?php
if ($this->CheckLogin("read")) {
global $AR;
	if (!function_exists('display')) {
		function display($str) {
			global $ARCurrent;
			if ($ARCurrent->options["verbose"]) {
				echo $str;
			}
		}
	}

		/* create a dummy object for later use */
		$dummy = new pobject;
		$dummy->nls = new object;
		$dummy->dummy = true;
		$dummy->type = "pobject";
		reset($AR->nls->list);
		while (list($key, $val)=each($AR->nls->list)) {
			$dummy->$key=new object;
			$dummy->$key->name="Dummy node";
			$dummy->nls->list[$key]=$val;
		}


		if (!$srcpath) {
			$srcpath="/";
		}
		display("export($srcpath) to ($destpath)\n");


		if (!$destpath) {
			if ($srcpath!="/") {
				if (!$ARCurrent->importStore->exists("/")) {
					$checkpaths[]="/";
				}
				$path_str="/";
				$calc_path=substr($srcpath, 0, strrpos(substr($srcpath,0,-1),'/'));
				$path_elements=explode("/", $calc_path);
				while (list(,$element)=each($path_elements)) {
					if ($element) {
						$path_str.=$element."/";
						if (!$ARCurrent->importStore->exists($path_str)) {
							$checkpaths[]=$path_str;
						}
					}
				}
				
			}
			$destpath="/";
			$rootpath="/";
		} else {
			if ($destpath!="/") {
				$parent=$this->store->make_path($destpath, "..");
				if (!$ARCurrent->importStore->exists($parent)) {
					if ($parent=="/") {
						display("ax file does not have a root node, we will create one\n");

						$ARCurrent->importStore->save(
								"/", 
								"pobject",
								$dummy,
								0,
								0,
								0,
								1);
					} else {
						$ARCurrent->importStore->error="No parent defined for $destpath";
					}
				}
			}
			$rootpath=$srcpath;
		}

		$offset=0;
		if (!$ARCurrent->importStore->error) {
			while (($result=$this->store->call("system.export.object.phtml","",$this->store->find($srcpath,$criteria,100,$offset)))) {
				if (is_array($checkpaths)) {
					unset($newresult);
					@reset($checkpaths);
					while (list(,$path)=@each($checkpaths)) {
						if (!$ARCurrent->importStore->exists($path)) {
							$temp_obj=current($this->store->call("system.export.object.phtml",
													Array("setDummyObject" => true),
													$this->store->get($path)));

							$newresult[]=$temp_obj;
							echo "CREATING ($path) ($temp_obj->type)\n";
						}
					}
					while (list($key,)=each($result)) {
						$newresult[]=$result[$key];
					}
					$result=$newresult;
					reset($result);
					unset($checkpaths);
				}

				while (is_array($result) && (list($key,$object)=each($result))) {
					$newpath=$destpath.substr($object->path, strlen($rootpath));

					$save_obj = true;

					display("processing($newpath)	");
					if ($ARCurrent->options["without_data"]) {
						display("no data for (".$object->path.")\n");
						$temp_templates = $object->data->templates;
						$temp_pinp = $object->data->pinp;
						unset($object->data);
						$object->data=$dummy->data;
						$object->data->templates=$temp_templates;
						$object->data->pinp=$temp_pinp;
						$object->dummy_save=1;
					}

					if ($ARCurrent->options["without_templates"]) {
						unset($object->data->templates);
						unset($object->data->pinp);
					}

					if (!$saved_object[$object->id]) {
						if ((!$ARCurrent->options["force"] || $object->dummy) && $ARCurrent->importStore->exists($newpath)) {
							$saved_object[$object->id]=$newpath;

							// we may never overwrite an existing object with a
							// dummy object
							if (!$object->dummy) {
								$oldObject=current($ARCurrent->importStore->call("system.get.phtml", "",
												$ARCurrent->importStore->get($newpath)));

								if (($object->lastchanged > $oldObject->lastchanged)) {
									display("(updating)\n");
									$update_obj = true;
								} else {
									display("(ok)\n");
									unset($oldObject);	// no update needed
									$save_obj = false;
								}
							} else {
								$save_obj = false;
							}
						}


						if ($save_obj) {
							// next one has to be linked
							$saved_object[$object->id]=$newpath;

								display("(saving)\n");
								$ARCurrent->importStore->save(
											$newpath, 
											$object->type,
											$object->data,
											$object->properties,
											$object->vtype,
											$object->priority,
											$object->dummy_save);
						}

						// (update or set templates and files)
						$object->newObject=current(
							$ARCurrent->importStore->call("system.get.phtml","",
								$ARCurrent->importStore->get($newpath)));

						$object->call("system.export.templates.phtml", "");
						$object->call("system.export.files.phtml", "");


					} else {
						if (!$ARCurrent->importStore->exists($newpath)) {
							display("(linking)\n");
							$ARCurrent->importStore->link($saved_object[$object->id], $newpath);
						}
					}
				}
				$offset+=sizeof($result);
			}
			if (!$ARCurrent->options["without_grants"]) {
				display("updating grants (groups)\n");
				@reset($ARCurrent->grants_list);
				while (list($type, $type_logins)=@each($ARCurrent->grants_list)) {
					while (list($login, )=each($type_logins)) {
						if ($type=="pgroup") {
							unset($criteria);
							$criteria["login"]["value"]["="]="'$login'";
							$criteria["object"]["type"]["="]="'pgroup'";
							$ARCurrent->importStore->call("system.import.groupgrants.phtml", 
															array(
																	"importDestPath" => $destpath,
																	"importRootPath" => $rootpath
															) ,
															$result=$ARCurrent->importStore->find("/system/groups/", $criteria));
						} 
					}
				}

				display("updating grants (users)\n");
				@reset($ARCurrent->grants_list);
				while (list($type, $type_logins)=@each($ARCurrent->grants_list)) {
					while (list($login, )=each($type_logins)) {
						if ($type=="puser") {
							unset($criteria);
							$criteria["login"]["value"]["="]="'$login'";
							$criteria["object"]["type"]["="]="'puser'";
							$ARCurrent->importStore->call("system.import.usergrants.phtml", "",
								$result=$ARCurrent->importStore->find("/system/users/", $criteria));
						} 
					}
				}
			}
		}
}
?>