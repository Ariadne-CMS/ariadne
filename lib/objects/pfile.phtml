<?php

debug("pfile: Load","object");
include_once($this->code."objects/pobject.phtml");

class pfile extends pobject { // definitie class

	function GetFile() {
		$files=$this->store->get_filestore("files");
		return $files->read($this->id, "file");
	}

	function ParseFile($file) {
		return str_replace("{arRoot}",$this->store->root, $file);
	}

	function ShowFile() {
		global $AR;
		$files=$this->store->get_filestore("files");
		if (!ereg("^text/",$this->data->mimetype)) {
			$size=$files->size($this->id, "file");
		}
		if (ldSetContent($this->data->mimetype, $size)) {
			$cacheseconds=1800; // 1/2 hour
			$expires=time()+$cacheseconds;
			if ($AR->user->data->login=="public" || $this->CheckPublic("read")) {
				// always set the client side cache headers, independant of
				// server side cache configuration. Except for private content
				// (needed to prevent proxies from caching it too). If server 
				// side caching is on, the loader will override this header.
				ldSetClientCache(true, $expires);
			}
		} else if(!ereg("^text/",$this->data->mimetype)) {
			error( sprintf( $ARnls["err:headerssentnottext"], $this->path ) );
			// FROP error("headers already sent and this is not a text file (".$this->path.")");
			$stop=true;
		}
		if( !$stop ) {
			if ($this->data->mimetype=="text/html") { // parse {arRoot}
				// assume html files to use charset UTF-8; this will always work correctly
				// with the MSIE html editor, and won't corrupt 'normal' html.
				ldHeader("Content-Type: text/html; charset=UTF-8");
				echo $this->ParseFile($this->GetFile());
			} else {
				$files->show($this->id, "file");
			}
		}
		$files->close();
	}

	function DownloadFile() {
		$files=$this->store->get_filestore("files");
		if (!ereg("^text/",$this->data->mimetype)) {
			$size=$files->size($this->id, "file");
		}
		$filename=substr($this->path, strlen($this->parent), -1);
		ldHeader('Cache-Control: no-cache, must-revalidate');
		ldHeader('Pragma: no-cache');
		if (!ldHeader("Content-type: application/x-ariadne-download\nContent-Disposition: inline; filename=\"".$filename."\"\nContent-length:".(string)$size)) {
			error( sprintf( $ARnls["err:headerssentnottext"], $this->path ) );
			// FROP error("headers already sent and this is not a text file (".$this->path.")");
		} else {
			$files->show($this->id, "file");
		}
		$files->close();
	}

	function _ParseFile($file) {
		return $this->ParseFile($file);
	}
  
	function _GetFile() {
		return $this->GetFile();
	}
  
	function _ShowFile() {
		return $this->ShowFile();
	}

	function _DownloadFile() {
		return $this->DownloadFile();
	}
  
} // end class pfile
?>