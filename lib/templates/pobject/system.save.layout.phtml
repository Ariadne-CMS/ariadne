<?php
	/******************************************************************
	 system.save.layout.phtml                              Muze Ariadne
	 ------------------------------------------------------------------
	 Arguments: $type, $function, $language, $template
	 Grant needed: layout
	 Global variables: none

	 This template saves a new or changes object template.

	 $type is the type of the object to which the template is 
	   to be assigned 
	 $function is the name assigned to this template. The name may 
	   consist of the characters [a-zA-Z], [0-9], '.', '-' and '_'.
	   The name must not contain '..' and must not end with '.phtml'.
	 $language is the language associated with the template. It can be
	   any of the keys defined in $AR->nls->list[] or 'any'.
	 $template contains the PINP template to compile and save

	 no result

	******************************************************************/
	if ($this->CheckSilent("layout") && $this->CheckConfig()) {
		// check arguments, remove ".."
		$type=str_replace("..",".",$type);
		$function=str_replace("..",".",$function);
		$language=str_replace("..",".",$language);

		include_once($this->store->code."modules/mod_pinp.phtml");
		if (!$function) {
			$this->error=$ARnls["err:notemplatename"];
		} else if (ereg("\.phtml$",$function)) {
			$this->error=$ARnls["err:endswith.phtml"];
		} else if (!eregi("^[a-z0-9\._-]*$",$function)) {
			$this->error=$ARnls["err:illegalchars"];
		} else {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
			$this->data=@current($this->get(".","system.get.data.phtml"));

			$templates=$this->store->get_filestore("templates");
			$file=$type.".".$function.".".$language;
			$pinp=new pinp("header","this->", "\$this->_");
			$compiled=$pinp->compile(strtr($template,"\r",""));
			if ($pinp->error) {
				$this->error = $pinp->error;
			} else {
				$this->data->pinp[$type][$function][$language]=$this->id;

				$file=$type.".".$function.".".$language;
				$templates->write($template, $this->id, $file.".pinp");
				$templates->write($compiled, $this->id, $file);
				if ($default) { // add pinp template from default templates list
					$this->data->templates[$type][$function][$language]=$this->id;
				} else { // remove pinp template from default templates list
					if (isset($this->data->templates[$type][$function][$language])) {
						unset($this->data->templates[$type][$function][$language]);
						if (count($this->data->templates[$type][$function])==0) {
							unset($this->data->templates[$type][$function]);
							if (count($this->data->templates[$type])==0) {
								unset($this->data->templates[$type]);
							}
						}
					}
				}
				$this->save();
				$this->ClearCache($this->path, false, true);
			}
		}
	}
?>