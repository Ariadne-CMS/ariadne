<?php
  if ($this->CheckLogin("layout")) {
   
    switch($next) {
      case $ARnls["save"] :
        debug("save");
        include($this->store->code."modules/mod_pinp.phtml");
        if (!$newfunction) {
          $error=$ARnls["err:notemplatename"];
        } else if (ereg("\.phtml$",$newfunction)) {
          $error=$ARnls["err:endswith.phtml"];
        } else if (ereg("\.\.",$newfunction)) {
          $error=$ARnls["err:nodirchanges"];
        } else if (!eregi("^[a-z0-9\._-]*$",$newfunction)) {
          $error=$ARnls["err:illegalchars"];
        } else {
          $writedir="templates".$this->path.$newtype."/";
          if (!file_exists($this->store->files.$writedir)) {
            $this->MkDir($writedir);
          }
          $pinp=new pinp("header","this->", "\$this->_");
          $compiled=$pinp->compile(strtr($template,"\r",""));
          $data->pinp[$newtype][$newfunction][$newlanguage]=$this->path.$newtype."/".$newfunction.".".$newlanguage;

          $fp=fopen($this->store->files."templates".$this->path.$newtype."/".$newfunction.".".$newlanguage.".pinp","w");
          fwrite($fp, $template);
          fclose($fp);
          $fp=fopen($this->store->files."templates".$this->path.$newtype."/".$newfunction.".".$newlanguage,"w");
          fwrite($fp, $compiled);
          fclose($fp);
          if ($default) { // add pinp template from default templates list
            $data->templates[$newtype][$newfunction][$newlanguage]=$this->path.$newtype."/".$newfunction.".".$newlanguage;
          } else { // remove pinp template from default templates list
            if ($data->templates[$newtype][$newfunction][$newlanguage]) {
              while (list($oldtype, $functions)=each($data->templates)) {
                while(list($oldfunction, $oldtemplatelist)=each($functions)) {
                  while(list($oldlanguage, $value)=each($oldtemplatelist)) {
                    if (($oldfunction!=$newfunction) ||
                        ($oldtype!=$newtype) ||
                        ($oldlanguage!=$newlanguage)) {
                      $templates[$oldtype][$oldfunction][$oldlanguage]=$value;
                    }
                  }
                }
              }
  	        $data->templates=$templates;
            }
          }
          $this->save($this->path, $this->type, $data);
        }
        if (!$error) {
          Header("Location: ".$this->store->root.$this->path."templates.phtml");
        } else {
          include($this->store->code."includes/error.phtml");
        } 
        break;

      case $ARnls["delete"] :
        debug("Delete");
        $this->get("","RemoveTemplate.phtml",
                   "type=".RawUrlEncode($newtype).
                   "&function=".RawUrlEncode($function));
	break;

      default :
        debug("default");
        Header("Location: ".$this->store->root.$this->path."templates.phtml");
         

    }

  }
?>