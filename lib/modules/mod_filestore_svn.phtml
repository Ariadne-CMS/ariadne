<?PHP
	/**************************************************************************
	File Store Module - SVN extension
	---------------------------------------------------------------------------

	This module is used to add SVN support to the filestore. Since the
	filestore handles all the nodes and the directory structure, directory
	support is disabled. If needed, recursion into directories should be
	done from within Ariadne, not using default SVN functionality.

	All SVN commands are prepended with "svn_" to prevent collisions with
	mod_filestore and php.

	svn commands:
	connect($id, $repository, $username, $password); -> returns $svn.

	svn_add($svn, $name)
	svn_blame($svn, $name)
	svn_cat($svn, $name)
	svn_checkout($svn, $repository, $revision)
	svn_cleanup($svn)
	svn_commit($svn, $comment, $fileinfo)
	svn_delete($svn, $name, $comment)
	svn_diff($svn, $name)
	svn_export($svn, $repository, $revision)
	svn_import($svn, $repository, $comment)
	svn_info($svn, $name)
	svn_list($svn, $revision)
	svn_log($svn, $name)
	svn_propdel($svn, $propkey, $name)
	svn_propget($svn, $propkey, $name)
	svn_proplist($svn, $name)
	svn_propset($svn, $propkey, $propvalue, $name)
	svn_resolved($svn, $name)
	svn_revert($svn, $name)
	svn_status($svn, $name)
	svn_update($svn, $name, $revision)

	Custom commands:
	svn_accept_cert($svn, $repository)
	svn_checkunder($svn, $repository, $revision)
	svn_mkdirs($svn, $repository)
	svn_rinfo($svn, $repository, $name)
	svn_rpropget($svn, $repository, $propkey, $name, $revision)
	
	The following functions have not yet been implemented:
	svn_copy
	svn_merge
	svn_mkdir
	svn_move
	svn_switch

	Copyright Muze 2007;
	Written by Yvo Brevoort

	**************************************************************************/

	global $ariadne;
	require_once 'VersionControl/SVN.php';
	require_once $ariadne.'/modules/mod_filestore.phtml';

	class filestore_svn extends filestore {

		/* public */

		function __construct($name, $root, $store = null) {
			global $AR;
			parent::__construct($name, $root, $store);

			// Setup error handling -- always a good idea!
			$this->svnstack = &PEAR_ErrorStack::singleton('VersionControl_SVN');

			if (!isset($AR->SVN->path)) {
				$AR->SVN->path = '/usr/bin/svn';
			}

			// Set up runtime options. 
			$this->svn_options = array(
				'fetchmode'		=> VERSIONCONTROL_SVN_FETCHMODE_ARRAY, 
				'svn_path'		=> $AR->SVN->path
			);

		}

		function connect($id, $username='', $password='') {
			/* Makes the connection between a filestore ID and a
			   SVN repository. Other SVN commands will run using
			   the result of this function.
			*/
			
			global $AR;
			
			if( !$AR->SVN->instance ) {

				$AR->SVN->instance = VersionControl_SVN::factory(array(
					"add",
					"blame",
					"checkout", 
					"cleanup",
					"commit", 
					"delete", 
					"diff",
					"export",
					"import",
					"info", 
					"list", 
					"log",
					"propdel",
					"propget",
					"proplist",
					"propset",
					"resolved",
					"revert",
					"status", 
					"update"
				), $this->svn_options);
			}

			$svn_instance = $AR->SVN->instance;
			$svn_switches = array();
			if ($username) {
				$svn_switches['username'] = $username;
			}
			if ($password) {
				$svn_switches['password'] = $password;
			}
			if (file_exists($AR->dir->install . "/lib/configs/svn/")) {
				$svn_switches['config-dir'] = $AR->dir->install . "/lib/configs/svn";
			}

			$svn_switches['non-recursive'] = true;

			$svn = array(
				'instance' 		=> $svn_instance,
				'switches' 		=> $svn_switches,
				'object_id'		=> $id,
				'info'			=> null
			);
			return $svn;
		}

		function get_path(&$svn, $name, $write = false) {
			if ($write) {
				$svn['object_id'] = $this->addObjectToLayer( $svn['object_id'] );
			} else {
				$svn['object_id'] = $this->getObjectId( $svn['object_id'] );
			}
			
			$path = $this->make_path($svn['object_id'], $name);
			return $path;
		}

		function rmdir_rf($path) {
			$dirhandle = opendir($path);
			while ($file = readdir($dirhandle)) {
				if ($file == "." || $file == "..") {
					continue;
				}

 				if (is_dir($path . $file)) {
					// echo "Dir: $file<br>";
					$this->rmdir_rf($path .  $file . "/");	
				} else {
					// echo "Unlink $file<br>";
					unlink($path . $file);
				} 		
			}
			// echo "rmdir $path<br>";
			rmdir($path);
			closedir($dirhandle);
		}

		/* Start of the SVN functions. */
		function svn_add($svn, $name) {
			/*	SVN add wrapper
				This function also creates the meta file by touching it. The
				contents of the file will be added when commited, but this
				allows the meta file to be added to the SVN at the same time
				as the file.
			*/

			$args = array(
				$this->get_path($svn, $name, true),
			);
			$svn['instance']->add->_prepared = false;
			$result = $svn['instance']->add->run($args, $svn['switches']);
			return $result;
		}

		function svn_blame($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name)
			);
			$svn['instance']->blame->_prepared = false;
			$result = $svn['instance']->blame->run($args, $svn['switches']);
			return $result;
		}

		function svn_cat($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name)
			);
			$svn['instance']->cat->_prepared = false;
			$result = $svn['instance']->cat->run($args, $svn['switches']);
		}

		function svn_checkout($svn, $repository, $revision='HEAD') {
			/* Checkout given SVN. 
			   Since we only handle flat SVN, the checkout is
			   done only for files, and does not recurse into
			   directories.
			*/

			$args = array(
				$repository,
				$this->get_path($svn, '', true)
			);
			
			$switches = $svn['switches'];

			if ($revision != '') {
				$switches['revision'] = $revision;
			}
			$svn['instance']->checkout->_prepared = false;
			$result = $svn['instance']->checkout->run($args, $switches);
			return $result;
		}

		function svn_cleanup($svn) {
			$args = array(
				$this->get_path($svn, '')
			);
			$result = $svn['instance']->cleanup->run($args, $svn['switches']);
			return $result;
		}

		function svn_commit($svn, $comment='', $fileinfo='') {
			/* 
				File information is used to record the meta
				information needed in Ariadne. The
				properties are saved in SVN properties. This
				part is needed because Ariadne does not
				store the meta information in the filenames
				(correctly).

				SVN properties that are used for Ariadne
				should be prepended with "ar:" to prevent
				collision with properties that someone else
				is using.


				Information structure is as follows
				[name]
						[ar:function]	 (usually the same as name)
						[ar:type]
						[ar:language]
						[ar:default]
						[ar:private]
			*/

			$args = array();
			
			if ($fileinfo) {
				foreach ($fileinfo as $filename => $file) {
					foreach ($file as $key => $value) {
						$this->svn_propset($svn, $key, $value, $filename);
					}
					$args[] = $this->get_path($svn, $filename, true);
				}
			} else {
				$args[] = $this->get_path($svn, '', true);
			}

			$switches = $svn['switches'];
			$switches['message'] = $comment;
			$result = $svn['instance']->commit->run($args, $switches);
			return $result;
		}

		function svn_delete($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name, true)
			);
			$switches = $svn['switches'];
			$result = $svn['instance']->delete->run($args, $switches);
			return $result;
		}

		function svn_diff($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name)
			);
			$result = $svn['instance']->diff->run($args, $svn['switches']);
			return $result;
		}

		function svn_export($svn, $repository, $revision='HEAD') {
			$args = array(
				$repository,
				$this->get_path($svn, '', true)
			);
			
			$switches = $svn['switches'];
			if ($revision != '') {
				$switches['revision'] = $revision;
			}
	
			$result = $svn['instance']->export->run($args, $switches);
			return $result;
		}

		function svn_import($svn, $repository, $comment='') {
			$args = array(
				$this->get_path($svn, '', true),
				$repository
			);
			$switches = $svn['switches'];
			$switches['message'] = $comment;
			$result = $svn['instance']->import->run($args, $switches);
			return $result;
		}

		function svn_info($svn, $name='') {
			$path = $this->get_path($svn, $name);
			if( file_exists($path.'.svn/') ) {
				$args = array(
					$path
				);
				$result = $svn['instance']->info->run($args, $svn['switches']);
			} else {
				$result = array();
			}
			return $result;
		}

		function svn_list($svn, $revision='HEAD') {
			$args = array(
				$this->get_path($svn, '')
			);

			$switches = $svn['switches'];
			if ($revision != '') {
				$switches['revision'] = $revision;
			}
	
			$svn['instance']->list->_prepared = false;
			$result = $svn['instance']->list->run($args, $switches);
			return $result;
		}

		function svn_log($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name)
			);
			$svn['instance']->log->_prepared = false;
			$result = $svn['instance']->log->run($args, $svn['switches']);
			return $result;
		}

		function svn_propdel($svn, $propkey, $name='') {
			$args = array(
				$propkey,
				$this->get_path($svn, $name, true)
			);
			$svn['instance']->propdel->_prepared = false;
			$result = $svn['instance']->propdel->run($args, $svn['switches']);
			return $result;
		}

		function svn_propget($svn, $propkey, $name='') {
			$args = array(
				$propkey,
				$this->get_path($svn, $name)
			);
			$svn['instance']->propget->_prepared = false;
			$result = $svn['instance']->propget->run($args, $svn['switches']);
			return $result;
		}

		function svn_proplist($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name)
			);
			$svn['instance']->proplist->_prepared = false;
			$result = $svn['instance']->proplist->run($args, $svn['switches']);
			return $result;
		}

		function svn_propset($svn, $propkey, $propvalue, $name='') {
			$args = array(
				$propkey,
				$propvalue,
				$this->get_path($svn, $name, true)
			);
			$svn['instance']->propset->_prepared = false;
			$result = $svn['instance']->propset->run($args, $svn['switches']);
			return $result;
		}

		function svn_resolved($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name, true)
			);
			$svn['instance']->resolved->_prepared = false;
			$result = $svn['instance']->resolved->run($args, $svn['switches']);
			return $result;
		}

		function svn_revert($svn, $name='') {
			$args = array(
				$this->get_path($svn, $name, true)
			);
			$svn['instance']->revert->_prepared = false;
			$result = $svn['instance']->revert->run($args, $svn['switches']);
			return $result;
		}

		function svn_status($svn, $name='') {
			$path = $this->get_path($svn, $name);

			// Performance improvement to make svn_status
			// faster. If there is not .svn dir, there is no SVN
			// status.
			if (file_exists($path . ".svn")) {
				$args = array(
					$path
				);
				$svn['instance']->status->_prepared = false;
				$tempresult = $svn['instance']->status->run($args, $svn['switches']);

				// Since we have a flat structure, remove the path and use only the names.
				if ($tempresult) {
					//if (isset($tempresult[$args[0]])) {
					//	echo "1";
					//}

					if ((sizeof($tempresult) == 1) && (isset($tempresult[$args[0]]))) {
						return false;
					} else {
						$result = array();
						foreach ($tempresult as $key=>$value) {
							$filename = basename($key);
							$filename = substr($filename, 1);
				
							$result[$filename] = $value;
						}
						return $result;
					}
				} else {
					return false;
				}
			} else {
				return false;
			}
		}

		function svn_update($svn, $name='', $revision='HEAD') {
			$args = array(
				$this->get_path($svn, $name, true)
			);
			$switches = $svn['switches'];

			if ($revision != '') {
				$switches['revision'] = $revision;
			}
			$svn['instance']->update->_prepared = false;
			$result = $svn['instance']->update->run($args, $switches);
			return $result;
		}

		// Start of customized SVN functions, these are not actually SVN commands but are very handy.
		function svn_accept_cert($svn, $repository) {
			$listargs = array(
				$repository
			);

			$switches = $svn['switches'];
			$switches['non-interactive'] = false;

			$svn['instance']->list->_prepared = false;

			$result = $svn['instance']->list->run_interactive($listargs, $switches);
			return $result;
		}

		function svn_get_ariadne_props($svn, $name='', $revision='HEAD') {
			if( substr($name, 0, 1) != "/" ) {
				$name = $this->get_path($svn, $name);
			}

			$switches = $svn['switches'];

			if ($revision != '') {
				$switches['revision'] = $revision;
			}

			// accepts a filename within the svn store and returns an array containing the ar: properties of the file
			$svn['instance']->proplist->_prepared = false;
			$proplist = explode("\n", $svn['instance']->proplist->run(array($name), $switches));
			$result = array();
			foreach( $proplist as $value ) {
				$value = ltrim($value);
				if( substr($value, 0, 3) == "ar:" ) {
					$svn['instance']->propget->_prepared = false;
					$result[$value] = $svn['instance']->propget->run(array($value, $name), $switches);
				}
			}
			return $result;			
		}

		function svn_checkunder($svn, $repository, $revision='HEAD') {
			// This function is designed mainly to be able to
			// sync up SVN versions and non-SVN versions,
			// without messing up existing files. It does this
			// by moving the templates to a safe location,
			// checkout the SVN, then move the original
			// templates back over the SVN version.

			$dir = $this->get_path($svn, '', true);
			$tempdir = tempnam($AR->dir->install . "/files/temp/", "svntemp");
			unlink($tempdir);

			if (file_exists($dir)) {
				// $dir only exists if templates are defined on this object.
				// Move the templates to a safe location.
				mkdir($tempdir);

				$tempdir .= "/";

				// echo "Tempdir: $tempdir\n";
				// echo "Dir: $dir\n";

				$dirhandle = opendir($dir);
				while (false !== ($file = readdir($dirhandle))) {
					if(is_file($dir . $file)) {
						rename($dir . $file, $tempdir . $file);
						// echo "Moved $file\n";
					}
				}
				closedir($dirhandle);
			}
			
			// echo "Checkout revision $revision<br>";
			$checkout_result = $this->svn_checkout($svn, $repository, $revision);

			if (file_exists($tempdir)) {
				// Tempdir only exists if we moved any templtes.
				// Move the templates back to the original location
		
				$dirhandle = opendir($tempdir);
				while (false !== ($file = readdir($dirhandle))) {
					if (is_file($tempdir . $file)) {
						rename($tempdir . $file, $dir . $file);
						touch($dir.$file);
						// echo "Replaced $file\n";
					}
				}
				closedir($dirhandle);

				// echo "Removed $tempdir\n";
				rmdir($tempdir);
			}
			return $checkout_result;
		}
			
		function svn_mkdirs($svn, $repository) {
			/* Create all subdirectories needed where needed, including all
			   the need parent directories. This works by creating an empty
			   directory and importing it into the SVN.

			   The reason import is used instead of mkdir is because import
			   creates the parent directories as well.
			*/
			global $AR;
			$listargs = array(
				$repository
			);
			// echo "Testing repository directory - error is normal\n";
			$svn['instance']->list->_prepared = false;
			$svnlist = @$svn['instance']->list->run($listargs, $svn['switches']);
			if ($svnlist) {
				return false;
			} else {
				// echo "\nRepository dir does not exist - creating...\n";
				$tempdir = tempnam($AR->dir->install . "/files/temp/", "svntemp");
				unlink($tempdir);
				mkdir($tempdir);
				$args = array(
					$tempdir,
					$repository
				);
				$switches = $svn['switches'];
				$switches['message'] = "Repository creation";
				$svn['instance']->import->_prepared = false;
				$result = $svn['instance']->import->run($args, $switches);
				rmdir($tempdir);
			}
			return true;
		}

		function svn_rinfo($svn, $repository, $name='') {
			$args = array(
				$repository . $name
			);
			$svn['instance']->info->_prepared = false;
			$result = $svn['instance']->info->run($args, $svn['switches']);
			return $result;
		}

		function svn_rpropget($svn, $repository, $propkey, $name='', $revision='HEAD') {
			$args = array(
				$propkey,
				$repository . $name
			);

			$switches = $svn['switches'];

			if ($revision != '' && $revision != 'HEAD') {
				$switches['revision'] = $revision;
			}

			$svn['instance']->propget->_prepared = false;
			$result = $svn['instance']->propget->run($args, $switches);
			return $result;
		}

		function svn_unsvn($svn) {
			$path = $this->get_path($svn, '', true) . ".svn/";
			$this->rmdir_rf($path);
		}

		public function copySvn($id, $newid) {
			$source = $this->make_path($id, '') . ".svn";
			$target = $this->make_path($newid, '', WRITE) . ".svn";

			return $this->copyRecursive($source, $target);
		}

		public function copyNode($id, $newid, $calledByStore = false) {
			parent::copyNode($id, $newid, $calledByStore);
			$this->copySvn($id, $newid);
		}

		private function copyRecursive($source, $target) {
			if (is_dir($source)) {
				@mkdir($target);
				$objects = scandir($source);

				if( sizeof($objects) > 0 ) {
					foreach( $objects as $file ) {
						if( $file == "." || $file == ".." )
							continue;
							// go on

						if( is_dir( $source."/".$file ) ) {
							$this->copyRecursive( $source."/".$file, $target."/".$file );
						} else {
							copy( $source."/".$file, $target."/".$file );
						}
					}
				}
				return true;
			} elseif( is_file($source) ) {
				return copy($source, $target);
			} else {
				return false;
			}
		}
	}

?>