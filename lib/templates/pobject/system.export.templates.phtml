<?php
global $ARBeenHere, $AR;
$templates=$this->data->config->pinp ?? null;
if (! ( $templates && is_array($templates) && !empty($templates) ) && !($ARCurrent->options["force"] ?? null)) {
	// object doesn't have templates, taking a shortcut by shuffeling the checks
} else {
	if (!($ARCurrent->options["without_templates"] ?? null) && $this->CheckLogin("read")) {
		if (($this->newObject->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->newObject->arIsNewObject && $this->CheckLogin("edit"))) {

			$orig_filestore=$this->store->get_filestore("templates");

			$new_filestore=$this->newObject->store->get_filestore("templates");
			/* 
				if we have to do a forced update, we have to remove all 
				files in the new_filestore first
			 */
			if ($ARCurrent->options["force"] ?? null) {
				$new_filestore->purge($this->newObject->id);
				unset($this->newObject->data->config->templates);
				unset($this->newObject->data->config->pinp);
				$save=1;
			}

			if ($this->data->config->pinp ?? null) {
				$templates=$this->data->config->pinp;
				reset($templates);
				display("\n	exporting/importing templates\n");
				while (is_array($templates) && (list($type, $functions)=each($templates))) {
					while (is_array($functions) && (list($function, $languages)=each($functions))) {
						while (is_array($languages) && (list($language, $file)=each($languages))) {
							display("	template [$type][$function][$language]\n");
							$tmtime = $orig_filestore->mtime($this->id, "$type.$function.$language.pinp");
							$tdata = $orig_filestore->read($this->id, "$type.$function.$language.pinp");

							if ($this->data->config->templates[$type][$function][$language] ?? null) {
								$default = true;
							} else {
								$default = false;
							}
							$save = 1;
							$this->newObject->data->config->pinp[$type][$function][$language] = $this->newObject->id;
							if ($default) {
								$this->newObject->data->config->templates[$type][$function][$language] = $this->newObject->id;
							}
							$file =  "$type.$function.$language";


							$new_filestore->write($tdata, $this->newObject->id, $file . ".pinp");
							$new_filestore->touch($this->newObject->id, $file . ".pinp", $tmtime);

							if ($ARCurrent->AXAction == "import") {
								unset($ARBeenHere[$this->newObject->path]);

								// cleanup old file format
								$new_filestore->remove($this->id, $file);

								include_once($this->store->get_config("code")."modules/mod_pinp.phtml");

								$pinp=new pinp($AR->PINP_Functions, "local->", "\$AR_this->_");
								$compiled = $pinp->compile(strtr($tdata,"\r",""));
								if ($pinp->error) {

echo "[[system.export.templates]] Not writing compiled template\n";
var_dump($pinp->error);
									$this->newObject->error = $pinp->error;
								} else {

									$optimized = sprintf($AR->PINPtemplate, $compiled);

									$new_filestore->write($optimized, $this->newObject->id, $file .".inc");
									$new_filestore->touch($this->newObject->id, $file .".inc", $tmtime);
								}
							}


							if ($this->newObject->error ?? null) {
								display("	error: ".$this->newObject->error."(".$this->newObject->id.")\n");
								$this->newObject->error = "";
							}
						}
					}
				}
				if ($save ?? null) {
					$this->newObject->store->save(
							$this->newObject->path ?? null,
							$this->newObject->type ?? null,
							$this->newObject->data ?? null,
							$this->newObject->properties ?? null,
							$this->newObject->vtype ?? null,
							$this->newObject->priority ?? null,
							$this->newObject->axflags ?? null);
				}
			}
		}
	}
}

?>
