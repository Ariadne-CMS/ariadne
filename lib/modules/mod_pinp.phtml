<?php

class pinp {

  function pinp($allowed_functions, $var_prefix, $function_prefix="") {
    if (!$function_prefix) {
      $function_prefix=$var_prefix;
    }
    $this->starttag="<pinp>";
    $this->endtag="</pinp>";
    $this->var_prefix=$var_prefix;
    $this->function_prefix=$function_prefix;

    if (is_array($allowed_functions)) {
      $allowed_functions=implode("|",$allowed_functions);
    }

    $array_funcs="array|array_change_key_case|array_chunk|array_count_values|".
	  "array_diff|array_flip|array_fill|array_intersect|array_key_exists|array_keys|".
	  "array_merge|array_merge_recursive|array_multisort|array_pad|array_pop|".
	  "array_push|array_rand|array_reverse|array_shift|array_slice|array_splice|".
	  "array_sum|array_unique|array_unshift|array_values|arsort|asort|count|current|".
	  "each|end|in_array|array_search|key|krsort|ksort|list|natsort|natcasesort|".
	  "next|pos|prev|range|reset|rsort|shuffle|sizeof|sort";
    $control_funcs="if|elseif|do|while|for|switch|foreach";
    $datetime_funcs="checkdate|date|getdate|gettimeofday|gmdate|gmmktime|".
      "gmstrftime|localtime|microtime|mktime|strftime|time|strtotime|".
	  "easter_days|easter_date";
    $math_funcs="abs|acos|acosh|asin|asinh|atan|atanh|atan2|base_convert|bindec|ceil|cos|".
      "cosh|decbin|dechex|decoct|deg2rad|exp|expm1|floor|getrandmax|hexdec|hypot|lcg_value|log|log10|log1p|max|min|".
      "mt_rand|mt_srand|mt_getrandmax|number_format|octdec|pi|pow|rad2deg|rand|round|".
      "sin|sinh|sqrt|srand|tan|tanh|bcadd|bccomp|bcdiv|bcmod|bcmul|bcpow|bcscale|bcsqrt|".
	  "bcsub|gmp_[a-z_]+";
	$misc_funcs="mail|highligh_string|pack|get_browser";
	$net_funcs="checkdnsrr|gethostbyaddr|gethostbyname|gethostbynamel|getmxrr|".
	  "getservbyport|getservbyname|ip2long|long2ip";
    $regex_funcs="ereg|ereg_replace|eregi|eregi_replace|split|spliti|preg_match|".
	  "preg_match_all|preg_replace|preg_split|preg_quote|preg_grep";
    $string_funcs="addslashes|addcslashes|bin2hex|chop|chr|chunk_split|".
	  "convert_cyr_string|count_chars|crc32|crypt|echo|explode|flush|".
	  "get_html_translation_table|htmlentities|htmlspecialchars|implode|join|".
	  "levenshtein|localeconv|ltrim|md5|metaphone|nl2br|ord|print|printf|".
	  "quoted_printable_decode|quotemeta|rawurldecode|rawurlencode|rtrim|str_rot13|".
      "sscanf|setlocale|similar_text|soundex|sprintf|strncasecmp|strcasecmp|strchr|".
	  "strcmp|strcoll|strcspn|strip_tags|stripcslashes|stripslashes|stristr|strlen|".
	  "strnatcmp|strnatcasecmp|strncmp|str_pad|strpos|strrchr|str_repeat|strrev|".
	  "strrpos|strspn|strstr|strtok|strtolower|strtoupper|str_replace|strtr|substr|".
	  "substr_count|substr_replace|trim|ucfirst|ucwords|vprintf|vsprintf|wordwrap|".
	  "base64_decode|base64_encode|urldecode|urlencode|parse_url";
    $var_funcs="doubleval|empty|floatval|gettype|intval|is_array|is_bool|is_double|".
	  "is_float|is_int|is_integer|is_long|is_null|is_numeric|is_object|is_real|".
	  "is_resource|is_scalar|is_string|isset|settype|serialize|strval|unserialize|".
	  "unset|print_r|var_dump|var_export";
	$xml_funcs="xmldoc|xmltree|domxml_[a-z_]+|xpath_[a-z_]+|xptr_[a-z_]+|".
	  "xml_parser_create|xml_parse_into_struct|xml_parser_free|".
	  "xml_parser_get_option|xml_parser_set_option";
    $debug_funcs="debug|debugon|debugoff";
    $loader_funcs="ldHeader|ldRedirect|ldSetContent|ldSetClientCache"; 
	$this->re_allowed="|$array_funcs|$control_funcs|$datetime_funcs|$math_funcs|".
	  "$misc_funcs|$net_funcs|$regex_funcs|$string_funcs|$var_funcs|$xml_funcs|".
	  "$allowed_functions|$debug_funcs|$loader_funcs|";

    // dont touch this unless you know what you are doing
    $slash="\\\\";
    $delimiter="'"; 
    $this->re_string1="([^'\"]*)($delimiter([^$slash]|$slash.)*?$delimiter)";  
    $delimiter='"';
    $this->re_string2="([^'\"]*)($delimiter([^$slash]|$slash.)*?$delimiter)";  
    $this->re_pinp=$this->starttag."([^'\"]*?|($this->re_string1|$this->re_string2)*?[^'\"]*?)".$this->endtag; 
    $this->pre_comments='|/\*.*\*/|U';
  }

  function compile($template) {

	while (eregi('^(.*)(<\?|<%|<script[^>]*php[^>]*>)(.*)', $template, $start_regs) &&
		$start_regs[2]) {
		$template=$start_regs[1].$start_regs[3];
		unset($start_regs);	
		if (eregi('^(.*)(\?>|%>|</script>)(.*)', $template, $start_regs) &&
					$start_regs[2]) {
			$template=$start_regs[1].$start_regs[3];
			unset($start_regs);	

		}
	}

    // then remove /* .. */ comments, even in html code... for security
    // since php supports comment tags including ? > and < ?php the comments check must be made first. 
    $template=preg_replace($this->pre_comments,"",$template); // this does :)
    $template=str_replace("\r\n", "\n", $template);

    // now find next <pinp> </pinp> block
    if (preg_match("!^(.*?)".$this->re_pinp."!m",$template,$matches)) {

      // pinp code block found, move 'head' to result
      $result=substr($template, 0, strpos($template, $matches[0]));

      // cut matched part from the template
      $template=substr($template, strpos($template, $matches[0])+strlen($matches[0]));

      // fix code, call compile on rest recursively
      $result.=$matches[1].$this->fixcode("<"."?php ".$matches[2]." ?".">").$this->compile($template);      

    } else { // no pinp code found
      $result=$template;
    } 
    return $result;
  }

  function fixcode($code) {
    // find first occurance of a string
    if (preg_match("!^(".$this->re_string1."|".$this->re_string2.")!m", $code, $matches)) {
      if (($matchpos=strpos($code, $mathes[0]))!==0) { 
        // a single ' or " found, but isn't matched in any of the $matches
        $pre=substr($code, 0, $matchpos);
      }
      // string found, cut matched part from $code
      $code=substr($code, strpos($code, $matches[0])+strlen($matches[0]));
      // check which kind of string was found '' or "".
      if ($matches[2]) { //single quoted string found
        // $matches[2] is the part before the string, 
        // $matches[3] is the string ('')
        $pre.=$matches[2];
        $string=$matches[3];
      } else { // double quoted string found
        // $matches[5] is the part before the string
        // $matches[6] is the string ("")
        $pre.=$matches[5];
        $string=$matches[6];
      }
      if (preg_match("|//[^\n]*\$|",$pre)) {
        if (preg_match("|([^\n]*)\n|",$string.$code, $matches)) {
          $pre.=$matches[1]."\n";
          $code=substr($string.$code, strlen($matches[1])+1);
          $string="";          
        }
      } 
      $result=$this->fixother($pre).$this->fixstring($string).$this->fixcode($code);
    } else {
      $result=$this->fixother($code);
    }
    return $result;
  }

  function fixstring($string) {
    // in a string only the variables need to be fixed
    
    $slash="\\\\";
    return ereg_replace("([^$slash]($slash$slash)*\\\$)","\\1".$this->var_prefix,$string);
  }

  function fixother($other) {
    // fix variables and functions  

    // remove backticks
    $other=ereg_replace("`","",$other);

    $result=ereg_replace("\\\$","\$".$this->var_prefix,$other); // fixes variables
    return $this->fixfunctions($result);
  }

  function fixfunctions($varfixed) {
    // functions that are not in the allowed list must be prefixed

    // prevent any attempt of creating a new object.
    $varfixed=eregi_replace("([^a-z0-9_-])new([^a-z0-9_-])","\\1nonew\\2",$varfixed);
    // find function names
    while (eregi("([^a-z0-9_-])([a-z][a-z0-9_-]*)[[:space:]]*\(",$varfixed,$matches)) {
      // function name found
      $function=$matches[2];

      // add 'head' to the result
      $result.=substr($varfixed, 0, strpos($varfixed, $matches[0]));
      $result.=$matches[1];

      // cut matched part from $varfixed
      $varfixed=substr($varfixed, strpos($varfixed, $matches[0])+strlen($matches[0])-1);

      // check if function is allowed
      if (!eregi("\|".$function."\|", $this->re_allowed)) {

        // function not allowed, add prefix
        $result.=$this->function_prefix.$function;

      } else {

        // function allowed, copy unchanged 
        $result.=$function;
      }
    }

    // add remainder to $result
    $result.=$varfixed;

    return $result;
  }

}

?>