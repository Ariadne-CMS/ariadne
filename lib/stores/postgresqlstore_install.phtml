<?php

include_once($ariadne."/stores/postgresqlstore.phtml");

class postgresqlstore_install extends postgresqlstore {

	function initialize() {
		$this->error = false;
		$return = false;
		$this->start_transaction();
		echo "initializing PostgreSQL store.\n";
		$queries[0]["msg"]="creating nodes table.";
		$queries[0]["query_string"]="
CREATE TABLE ".$this->tbl_prefix."nodes (
	path varchar(127) DEFAULT '' NOT NULL PRIMARY KEY,
	parent varchar(127) DEFAULT '' NOT NULL,
	object bigint DEFAULT '0' NOT NULL,
	priority integer DEFAULT '0' NOT NULL
);
CREATE INDEX ".$this->tbl_prefix."nodes_object ON ".$this->tbl_prefix."nodes (object);
CREATE INDEX ".$this->tbl_prefix."nodes_parent ON ".$this->tbl_prefix."nodes (parent);
CREATE INDEX ".$this->tbl_prefix."nodes_priority ON ".$this->tbl_prefix."nodes (priority);
CREATE UNIQUE INDEX ".$this->tbl_prefix."nodes_path_lower ON ".$this->tbl_prefix."nodes (lower(path));
CREATE INDEX ".$this->tbl_prefix."nodes_parent_lower ON ".$this->tbl_prefix."nodes (lower(parent));

";

		$queries[1]["msg"]="creating objects table.";
		$queries[1]["query_string"]="
CREATE SEQUENCE ".$this->tbl_prefix."objects_id_seq START 1;
CREATE TABLE ".$this->tbl_prefix."objects (
	id bigint DEFAULT nextval('".$this->tbl_prefix."objects_id_seq') PRIMARY KEY,
	type varchar(32) DEFAULT '' NOT NULL,
	object text,
	vtype varchar(32) DEFAULT '' NOT NULL,
	lastchanged TIMESTAMP DEFAULT current_timestamp NOT NULL
);
CREATE INDEX ".$this->tbl_prefix."objects_lastchanged ON ".$this->tbl_prefix."objects (lastchanged);
";
		$queries[2]["msg"]="creating properties table.";
		$queries[2]["query_string"]="
CREATE TABLE ".$this->tbl_prefix."properties (
	name varchar(21) DEFAULT '' NOT NULL PRIMARY KEY
)";

		$queries[4]["msg"]="creating types table.";
		$queries[4]["query_string"]="
CREATE TABLE ".$this->tbl_prefix."types (
	type varchar(32) DEFAULT '' NOT NULL,
	implements varchar(32) DEFAULT '' NOT NULL
);
CREATE INDEX ".$this->tbl_prefix."types_type ON ".$this->tbl_prefix."types (type);
CREATE INDEX ".$this->tbl_prefix."types_implements ON ".$this->tbl_prefix."TYPES (implements);
";

		while ((list($key, $query)=each($queries)) && (!$this->error)) {
			if ($query["msg"]) {
				echo $query["msg"]."\n";
			}
			$exec = $this->store_run_query($query["query_string"]);
			if($exec === false){
				error($this->error);
				break;
			}
		}

		if ($this->error === false) {
			$return=true;
			// initialize locking tables
			$this->mod_lock->init($this->tbl_prefix);
			echo "PostgreSQL store initialized.\n\n";
		}
		$this->stop_transaction($return);
		return $return;
	}


	function _generate_column_def($type, $size, $default = null) {
		switch($type) {
			case "string": 
				if ($size>0 && $size<256) {
					if (!isset($default)) {
						$default = "";
					}
					$result="varchar($size) DEFAULT '$default' not null\n";
				} else {
					$result=0;
					$this->error="Wrong format for typedefinition $name: incorrect size."; 
				}
				break;
			case "number":
				if (!isset($default)) {
					$default = 0;
				}
				$result="bigint default $default not null\n";
				break;
			case "boolean":
				if (!isset($default)) {
					$default = false;
				}
				$result="bool DEFAULT $default not null\n";
				break;
		}
		return $result;
	}


	function create_property($property, $definition, $indexes="") {
	/**********************************************************************

		This function creates a new property type. This property can then be
	used by objects to set special information on which to quickly search
	using find.

	$name must be a string of at most 16 characters from the set [a-zA-Z0-9_] 
	or '-', starting with a letter (a-zA-Z).

	$definition describes which name value pairs this property contains and
	which type (and size) each value is.
	$definition is defined as: $definition[{name}][{type}]={size}
		{name} is defined like $name above
		(type} can be 'number', 'string', 'text' or 'boolean'
		{size} is only used for the string type and can not be more than 255. 
	$indexes describes which indexes the storage layer should consider
		for the property. Default behaviour is to create one index for the
		complete set of name-value pairs. If you want you can create a smaller
		index, or more than one index.
	$indexes is defined as: $indexes[][]={name} || $indexes="none"
		e.g. $indexes[0][0]="name1";
	 $indexes[1][0]="name2"
				 $indexes[1][1]="name3";
		this would create two indexes, one on "name1" and one on "name2" and
		"name3".
		{name} is defined like $name above. 
	if $indexes is set to "none", no user indexes will be created on this 
	property. This is usually not a good thing to do. 
	 
	**********************************************************************/
		$result=1;
		$this->error=false;
		if (eregi("^[a-z][a-z0-9_-]*$",$property) && strlen($property)<=16) {
			$tablename=$this->tbl_prefix."prop_".AddSlashes($property);
			$create_string="create table ".AddSlashes($tablename)." (\n";

			foreach ($definition['fields'] as $name => $typedef) {
				if (!eregi("^[a-z][a-z0-9_-]*$",$name) || strlen($name)>16) {
					$result=0;
					$this->error="Wrong format for type: $name";
					break;
				}	 
				$create_string .= " AR_".$name." ";
				$create_string .= $this->_generate_column_def($typedef['type'], $typedef['size'], $typedef['default']);
				$create_string .= ",";

				$indexstring.="AR_$name,";
			}
			if ($result) {
				// now add the 'object' field.
				$create_string.="object bigint not null);\n";
				// now add the correct indexes.
				if ($indexes=="none") {
					$indexstring="";
				} else {
					if ($definition['indexes'] && is_array($definition['indexes'])) {
						$indexstring="";
						foreach ($definition['indexes'] as $key => $values) {
							$indexstring.="CREATE INDEX ".$tablename."_id".$key." ON ".$tablename." (";
							$comma="";
							while (list($key2, $name)=each($values)) {
								if (eregi("^[a-z][a-z0-9_-]*$",$name) && strlen($name)<=16) {
									$indexstring.=$comma."AR_".$name;
								} else {
									$result=0;
									$this->error="Wrong format for index ".$key." in: ".$name;
									break;
								}
								$comma=",";
							}
							$indexstring.=");\n";
						}
					} else {
						$indexstring="CREATE INDEX ".$tablename."_id0 ON $tablename(".substr($indexstring,0,-1).");\n";
					}
				}
				if ($result) {
					// add the indexes to the create_string
					$create_string.=$indexstring;
					// finally add the index on the object field and close the query.
					$create_string.="CREATE INDEX ".$tablename."_object ON $tablename (object);\n";
					$exec=$this->store_run_query($create_string);
					if($exec == false){
						error($this->error);
					} else {
						$query_string="insert into ".$this->tbl_prefix."properties values ( '".AddSlashes($property)."' )";
						$exec=$this->store_run_query($query_string);
						if($exec == false){
							error($this->error);
						}
					}
					//FIXME: check for succes first, how?
				}
			}
		} else {
			$result=0;
			$this->error="Wrong format for property name: $property";
		}
		debug("create_property: $create_string","store");
		return $result;
	}

	function remove_property($property) {
	/**********************************************************************

		This function removes the property with the given name. It does not
	check whether there are types left which use this property. It returns
	true when the named property is succesfully removed. This means it also
	returns true if the property didn't exist in the first place.
	Otherwise it will return false.

	**********************************************************************/

		$this->error=false;
		$eproperty=AddSlashes($property);
		$remove_string="drop ".$this->tbl_prefix."table prop_$eproperty";
		debug($remove_string,"store");
		$this->store_run_query($remove_string);
		$query_string="delete from ".$this->tbl_prefix."properties where name='$eproperty'";
		$exec=$this->store_run_query($query_string);
		if (!$exec) {
			error("ERROR: PostgreSQL: ".$this->error);
		}
		//FIXME: check for succes first, check whether table no longer exists.
		return 1;
	}
	
	function add_type($type, $implements) {
	/**********************************************************************
	
		This function does not actually create a type, it only serves to
	notify to the system that $type exists and that it implements the
	type or interface given in $implements.
	$type and $implements must be strings of at most 16 characters.

	**********************************************************************/

		$this->error=false;
		if ($type && $implements && (strlen($type)<33) && (strlen($implements)<33)) {
			$etype=AddSlashes($type);
			$eimplements=AddSlashes($implements);
			$query_string="insert into ".$this->tbl_prefix."types values ('$etype','$eimplements')";
			debug($query_string,"store");
			$exec = $this->store_run_query($query_string);
			if (!exec) {
				$result=0;
				error("ERROR: PostgreSQL: ".$this->error);
			} else {
				$result=1;
			}	
		} else {
			$this->error="Wrong format for type or implements";
		}
		return $result;
	}

	function del_type($type, $implements="") {
	/**********************************************************************

		This function notifies the system that either:
	1) A type no longer implements a certain type or interface, or
	2) a type no longer exists.

	**********************************************************************/

		$this->error=false;
		$etype=AddSlashes($type);
		if (!$implements) {
			$query_string="delete from ".$this->tbl_prefix."types where type='$etype' or implements='$etype'";
		} else {
			$eimplements=AddSlashes($implements);
			$query_string="delete from ".$this->tbl_prefix."types where type='$etype' and implements='$etype'";
		}
		debug($query_string,"store");
		$exec = $this->store_run_query($query_string);
		if (!$exec) {
			error("ERROR: PostgreSQL: ".$this->error);
			$result=0;
		} else {
			$result=1;
		}
		return $result;
	}

}

?>