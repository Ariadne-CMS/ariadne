<?php
	/******************************************************************
	 system.get.config.phtml							Muze Ariadne v2.0
	 ------------------------------------------------------------------
	 Called by 'pobject->CheckConfig()' (from file 'ariadne/pobject.phtml')
	 Arguments: $req_function
	 Grant needed: none
	 Interface/Widget: none
	 Global variables: $newtemplate, $cacheconfig

	 This template is called from pobject itself, via CheckConfig().
	 It will set the global variables $ARConfig->template and 
	 $ARConfig->cache according to the values filled in via the 
	 config.phtml template.

	 It has one argument, $req_function, which stands for 'requested 
	 function'. It will check in it's list with template pointers 
	 ($data->templates) if the requested function has a new template
	 assigned to it and if so set the path to this template as the 
	 global variable $ARConfig->template.

	 It will furthermore set the global variable $ARConfig->cache to 
	 it's own cache setting ($data->config->cacheconfig, also entered via 
	 config.phtml) if that cache setting is not 'inherit cache config'
	 (meaning: $data->config->cacheconfig is set and not 0).

	 $req_function must be a valid string.

	 No return value.	

	******************************************************************/
	debug($this->type."/system.get.config.phtml ".$this->path,"class");
	$context = $this->getContext(ARCALLINGCONTEXT);
	if (!$ARConfig->cache[$this->path] && $context["scope"] != "pinp") {
		// first check whether parent config info is in cache
		if (!$ARConfig->cache[$this->parent] && $this->parent!="..") {
			$this->get($this->parent, "system.get.config.phtml");
		}
		// first inherit parent configuration data
		$configcache=$ARConfig->cache[$this->parent];

		// cache default templates
		$configcache->templates=$data->config->templates;

		if ($data->config->cacheconfig) {
			$configcache->cache=$data->config->cacheconfig;
		}

		// store the current object type
		$configcache->type = $this->type;

		if ($data->config->typetree && ($data->config->typetree!="inherit")) {
			$configcache->typetree=$data->config->typetree;
		}
		if ($data->config->nlsconfig->list) {
			$configcache->nls=$data->config->nlsconfig;
			debug("nls found");
		}

		if ($data->config->grants["pgroup"]["owner"]) {
			$configcache->ownergrants = $data->config->grants["pgroup"]["owner"];
		}
		if (is_array($configcache->ownergrants)) {
			if ($AR->user && $AR->user->data->login != 'public' && $AR->user->data->login === $this->data->config->owner) {
				$ownergrants = $configcache->ownergrants;
				if (is_array($ownergrants)) {
					reset($ownergrants);
					while (list($grant, $val) = each($ownergrants)) {
						$AR->user->ownergrants[$this->path][$grant] = $val;
					}
				}
			}
		}

		if ($data->config->customconfig) {
			$configcache->custom=array_merge($configcache->custom, $data->config->customconfig);
		}
		$ARConfig->cache[$this->path]=$configcache;

		/* load pinp configuration data via config.ini */
		$nolangcheck = $ARCurrent->nolangcheck;	
		$ARCurrent->nolangcheck = true;
		$ARCurrent->arConfig=$ARConfig->pinpcache[$this->parent];
		if (!$this->CheckConfig('config.ini', $arCallArgs)) {
			/* calling config.ini directly for each system.get.config.phtml call */
			$ARConfig->libraries[$this->path] = $ARCurrent->arConfig['library'];
		}
		$ARConfig->pinpcache[$this->path]=$ARCurrent->arConfig;
		$ARCurrent->nolangcheck = $nolangcheck;

		/* now load the library configuration data into our normal cache */
		if ($ARConfig->pinpcache[$this->path]["library"]) {
			$ARConfig->cache[$this->path]->libraries = $ARConfig->pinpcache[$this->path]["library"];
		}

	}
?>