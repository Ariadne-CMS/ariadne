<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
 
	******************************************************************/
	global $auth_config, $AR;
	
	$parentobj = current($this->get($this->parent, "system.get.phtml"));

	if ((($this->arIsNewObject &&
			$parentobj &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) && 
			$this->CheckConfig()) {
		if (!$this->arIsNewObject) {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
		    $this->data=current($this->get(".","system.get.data.phtml"));
			$arIsNewObject=false;
		} else {
			$this->data=new object;
			$arIsNewObject=true;
		}

		$this->error = null;

		$userConfig = $this->loadUserConfig();
		$authConfig = $userConfig['authentication'];

		// unset the properties array, so no properties can be passed to this template.
		$properties = array();


		$pass1=$this->getdata("newpass1","none");
		$pass2=$this->getdata("newpass2","none");
		if ($pass1 || $pass2 ) {

			$this->data->password = ($pass1 && ($pass1 == $pass2)) ? $this->hashPassword( $pass1 ) : null;
			if (!$this->data->password) {
				$this->error = ar::error( $ARnls["err:validpassword"], 1203);
				return false;
			} else {
				// Password is set; Set expiry time here -
				// if the checkbox for 'never expires' is set,
				// it will be unset before the final save.  if
				if ($authConfig["expiry"]) {
					$this->data->password_expiry = time() + $authConfig['expiry'];
				}
			}
		}

		$login = $this->getdata("login", "none");
		if (!$login) {
			$login = $this->make_path($this->getdata("arNewFilename", "none"));
			$login = substr($login, strlen($this->store->make_path($login, "..")), -1);
			if (preg_match('/\{.*\}/',$login)) {
				$this->error = ar::error( $ARnls["err:donotuseid"], 1204);
				return false;
			}
		}

		$this->data->name=$this->getdata("name","none");
		$properties["name"][0]["value"]=$this->data->name;
		$properties["name"][0]["nls"]="none";
		$properties["text"][0]["value"]=$this->data->name;
		$properties["text"][0]["nls"]="none";
		$this->data->email=$this->getdata("email","none");
		$this->data->telephone=$this->getdata("telephone","none");

		// Password expiry flag can only be changed with config grants.
		if ($authConfig["expiry"] && $this->CheckSilent("config")) {
			$password_never_expires = $this->getdata("neverexpires",0);
			if ($password_never_expires) {
				unset($this->data->password_expiry);
			} else {
				// Set expiry if it was not set before.
				if (!$this->data_password_expiry) {
					$this->data->password_expiry = time() + $authConfig['expiry'];
				}
			}
		}

		$disabled = $this->getvar('disabled');
		if (isset($disabled) && ($login != "public")) {
			debug("Starting checks to disable user.", "all");
			debug("User running the show is " . $AR->user->data->login, "all");
			debug("Victim is $login", "all");
			$allowDisableUser = false;
			if ($login == "admin") {
				debug("Ooooh, victim is the admin user. Interesting...", "all");
				if (
					($AR->user->data->login != $login) &&
					($this->CheckAdmin($AR->user))
				) {
					$allowDisableUser = true;
				}
			} else {
				$allowDisableUser = true;
			}
			
			if ($allowDisableUser) {
				debug("Allowing disable user: $allowDisableUser", "all");
				if (!is_object($this->data->config)) {
					$this->data->config = new object;
				}
				$this->data->config->disabled = $disabled;
			} else {
				debug("Not allowed to disable user", "all");
			}
		}

		if (!$login) {
			$this->error = ar::error( $ARnls["err:mustenterlogin"], 1205);
			return false;
		}

		if ($login != $this->data->login) {
			if (strlen($login)>128) {
				$this->error = ar::error( $ARnls["err:logintoolong"], 1206);
				return false;
			} else {
				$criteria["login"]["value"]["="]=$login;
				$loginexists = false;
				foreach ($authConfig['userdirs'] as $userdirpath) {
					$result=$this->find($userdirpath,$criteria,"system.get.phtml");
					if ($result) {
						$loginexists = true;
						break;
					}
				}

				if ($loginexists) {
					$this->error = ar::error( sprintf($ARnls["err:loginexists"],$login), 1207);
					return false;
				} else {
					$this->data->login=$login;
					$properties["login"][0]["value"]=$login;
					if (!$this->data->password) {
						$this->error = ar::error( $ARnls["err:validpassword"], 1203);
						return false;
					}
				}
			}
		}

		if (!$this->error) {
			/* now for backwards compatibility use the key if $val is not a path, 
			   in that case the key will be a path. */
			$selected = $this->getdata("groups", "none");
			$groups = array();
			if (is_array($selected)) {
				reset($selected);
				while (list($key, $val)=each($selected)) {
					if (substr($val, 0, 1) == "/") {
						$groups[$val] = $val;
					} else {
						$groups[$key] = $val;
					}
				}
			}


			$pdata = "";
			if ($profile=$this->getdata("profile","none")) {
				$this->data->profile=$profile;
				if ($this->arIsNewObject && !$this->getdata("arProfileLoaded")){
					$pdata = current($this->get($profile,'system.get.phtml'));
					if ($pdata && $pdata->CheckSilent("read")) {
						/* 
							now setting default values from the profile, 
							guess it would be better to preload them directly in the templates
							(direct feedback & the possibility to override 
						*/
						$this->data->language=$pdata->data->language;
						$this->data->languagelist=$pdata->data->languagelist;
						$this->data->interface=$pdata->data->interface;
						$this->data->editor=$pdata->data->editor;
						$this->data->template_editor=$pdata->data->template_editor;
						if(!$customgrants) {
							$groups=$pdata->data->groups;
						}
					} else {
						$this->error = ar::error( sprintf($ARnls["err:nopermissionread"], $pdata->path), 1209);
						unset($pdata);
					}
				}    
			} else {
				unset($this->data->profile);
			}
			if ($language=$this->getdata("language","none")) {
				$this->data->language=$language;
			}
			if ($languagelist=$this->getdata("languagelist","none")) {
				unset($languagelist['none']); // dummy entry so you can make the array 'empty'
				$this->data->languagelist=$languagelist;
			}
			if ($interface=$this->getdata("interface","none")) {
				$this->data->interface=$interface;
			}
			if ($editor=$this->getdata("editor","none")) {
				$this->data->editor=$editor;
			}
			if ($template_editor=$this->getdata("template_editor","none")) {
				$this->data->template_editor=$template_editor;
			}
			if($windowprefs=$this->getdata("windowprefs","none")) {
				$this->data->windowprefs=$windowprefs;
			}
		}
		if (!$this->error) {
			$newpath=$this->save($properties);
			$arResult = $newpath;
			if (!$this->error) {
				/* warning: do not save this object again, since system.set.user.phtml updates the object also.. */
				$oldgroups = $this->data->groups;


				if (is_array($oldgroups)) {
					reset($oldgroups);
					while (list($key, $val)=each($oldgroups)) {
						if (!$groups[$key]) {
							$this->get($key, "system.set.user.phtml", array(
										"action" => "remove",
										"path" => $this->path));
						}
					}
				}

				if (is_object($pdata)) {
					// Make sure that permission to add this user to the groups set in the loaded profile
					// will be granted.
					$this->pushContext(array("addProfileSettings" => true));
				}


				if (is_object($pdata)) {
					// Make sure that permission to add this user to the groups set in the loaded profile
					// will be granted.
					$this->pushContext(array("addGroupFromProfile" => true));
				}

				if (is_array($groups)) {
					reset($groups);
					while (list($key, $val)=each($groups)) {
						if (!$oldgroups[$key]) {
							$this->get($key, "system.set.user.phtml", array(
										"action" => "add",
										"path" => $this->path));
						}
					}

				}

				if (is_object($pdata)) {
					$this->popContext();
				}

				if ($arIsNewObject) {
					/* check for static skeleton in the profile, if available copy it */
					$skeletonpath=$this->data->profile.'static/';
					if ($this->data->profile && $this->exists($skeletonpath)) {
						$this->find($skeletonpath,"object.path!='".$skeletonpath."'",'system.copy.multiple.phtml',
							array('source'=>$skeletonpath, 
								'target'=>$newpath));
					}
					/* check whether the owner of the user (and skeleton) should be set to the new user */
					if ($this->getdata('setowner')) {
						/* again the skeleton shouldn't be too big, so this is allowed: */ 
						$this->find($newpath, '', 'system.save.owner.phtml', array('owner' => $this->path));
					}
				}

				if (is_object($pdata)) {
					$this->popContext();
				}
			}
		}
		global $cache_config;
		$cachestore=new cache($cache_config);
		$cachestore->onObjectSaved($this->id);
	}
?>