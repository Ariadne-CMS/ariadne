<?php
	debug("pobject/system.copyto.phtml: start","class");

	if ($this->CheckLogin("read") && $this->CheckConfig()) {
		if ($target && ($target!=".")) {
			debug("pobject/system.copyto.phtml: target:".$target.":","all");
			// first check to see if the target is valid
			$parent=$this->store->make_path($target, "..");
			if ($this->exists($parent)) {
				$pobject = current($this->get($parent, "system.get.phtml"));
				if ($pobject->CheckSilent("add", $this->type)) {
					$oldgrants = $this->data->config->grants;
					unset($this->data->config->grants);
					$target=$this->make_path($target);
					if (preg_match("/^[a-z0-9_\{\}\.\:-]+$/i", basename($target))) {
						if (!$this->exists($target)) {
						
							$eventData = new baseObject();
							$eventData->arTarget = $target;
							$eventData->arSource = $this->path;
							$eventData->arSearch = $search;
							$eventData->arReplace = $replace;
							$eventData = ar_events::fire( 'onbeforecopy', $eventData );
							if (!$eventData || ar_error::isError( $eventData ) ) {
							
								$arResult = $eventData;
								
							} else {
								
								// first make sure that the object is clean (data can only be set via 
								// the defined interface: $arCallArgs)
								$this->data=current($this->get(".","system.get.data.phtml"));

								$this->data->config->owner = $AR->user->data->login;
								$this->data->config->owner_name = $AR->user->data->name;
								$properties['owner'][0]['value'] = $user->data->login;

								// now save the object to get its new id.
								if ($defaultnls && !$this->data->$defaultnls) {
									$this->data->nls->default=$ARConfig->nls->default;
								}
								$properties=$this->load_properties('%'); // copy properties from all scopes
								$ARCurrent->newpath=$this->store->save($target, $this->type, $this->data, $properties, $this->vtype, $this->priority);
								if ($ARCurrent->newid=$this->exists($ARCurrent->newpath)) {

									// now save templates for the new object
									if ($this->data->config->pinp) {
										$templates=$this->store->get_filestore("templates");
										$templates->copyNode( $this->id, $ARCurrent->newid );
										while (list($type, $values)=each($data->config->pinp)) {
											while (list($function, $templatelist)=each($values)) {
												while (list($language, $id)=each($templatelist)) {
													$template=$type.".".$function.".".$language;
													$this->data->config->pinp[$type][$function][$language]=$ARCurrent->newid;

													if ($this->data->config->templates[$type][$function][$language]) {
														$this->data->config->templates[$type][$function][$language]=$ARCurrent->newid;
													}
												}
											}
										}
									}

									/*
									 * FIXME: 
									 *  - This behavour should not be enabled by default
									 *  - This should be done in a layer above system templates for example dialog.copy
									 *  - only do this when the parent of the src and the parent of the target are the same
									 */
									/*
									if ($this->parent == $parent) {
										if (isset($this->data->{$this->reqnls}->name)) {
											$this->data->{$this->reqnls}->name .= $ARnls["ariadne:object:copied_object"];
										} else {
											$this->data->{$this->data->nls->default}->name .= $ARnls["ariadne:object:copied_object"];
										}
									}
									 */
									
									$this->store->save($ARCurrent->newpath, $this->type, $this->data);

									$this->find($ARCurrent->newpath, "", "system.update.user.grants.phtml", array("config"=>$pobject->CheckSilent("config")));

									$this->pushContext( array(
										"arCurrentObject" => current($this->get($ARCurrent->newpath, 'system.get.phtml', '')),
									) );

										ar_events::fire( 'oncopy', $eventData );

									$this->popContext();
								} // else: first save failed.
							}
							
						} else {
							$arResult=sprintf($ARnls["err:alreadyexists"],$target);
						}
					} else {
						$arResult=sprintf($ARnls["err:fileillegalchars"],$target);
					}
				} else {
					$arResult = $ARnls["accessdenied"];
				}
			} else {
				$arResult=sprintf($ARnls["err:wrongpath"],$parent);
			}
		} else {
			$arResult=sprintf($ARnls["err:wrongpath"],$target);
		}
	} else {
		$arResult=$ARnls["accessdenied"];
	}
	if ($arResult) {
		debug("pobject/system.copyto.phtml: arResult: $arResult;","class");
	} else {
		debug("pobject/system.copyto.phtml: end","class");
	}
?>
