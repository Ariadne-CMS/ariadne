<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
 
	******************************************************************/

	if ((($this->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) && 
			$this->CheckConfig()) {
		if (!$this->arIsNewObject) {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
		    $this->data=current($this->get(".","system.get.data.phtml"));
		} else {
			$this->data=new object;
		}

		$this->error = null;

		$userConfig = $this->loadUserConfig();
		$authConfig = $userConfig['authentication'];


		// unset the properties array, so no properties can be passed to this template.
		$properties = array();

		$this->data->name=$this->getdata("name","none");
		$properties["name"][0]["value"]=$this->data->name;
		$properties["name"][0]["nls"]="none";
		$properties["text"][0]["value"]=$this->data->name;
		$properties["text"][0]["nls"]="none";
		$this->data->email=$this->getdata("email","none");
		if ($this->arIsNewObject) {
			$login = $this->getdata("login", "none");
			if (!$login) {
				$login = $this->make_path($this->getdata("arNewFilename", "none"));
				$login = substr($login, strlen($this->store->make_path($login, "..")), -1);
				if (preg_match('/\{.*\}/',$login)) {
					$this->error = ar::error( $ARnls["err:donotuseid"], 1204);
					return false;
				}
			}
			if ($login) {
				$criteria["login"]["value"]["="]=$login;
				$criteria["object"]["implements"]["="]="pgroup";

				$loginexists = false;
				foreach ($authConfig['groupdirs'] as $groupdirpath) {
					$result = $this->find($groupdirpath, $criteria, "system.get.phtml");
					if ($result) {
						$loginexists = true;
						break;
					}
				}
				if ($loginexists) {
					$this->error = ar::error( sprintf($ARnls["err:loginexists"],$login), 1207);
				} else {
					$this->data->login=$login;
					$properties["login"][0]["value"]=$this->data->login;
				}
			} else {
				$this->error = ar::error( $ARnls["err:mustenterlogin"], 1205);
			}
		}
		$arResult = false;
		if (!$this->error) {
			$arResult = $this->save($properties);
		}

		global $cache_config;
		$cachestore=new cache($cache_config);
		$cachestore->onObjectSaved($this->id);
	}
?>