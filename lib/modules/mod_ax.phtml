<?php
/***********************************************************************
	Ariadne Export file manager

************************************************************************/
class mod_ax {

	function open($exportfile,$cmdlist,$mode="unpack",$tempdir="/tmp/") {
		$this->tempdir=$this->mktempdir($tempdir,"export_");
		$this->cmdlist=$cmdlist;
		$this->mode=$mode;

		if (!file_exists($this->tempdir)) {
			mkdir($this->tempdir,0777);
		}

		$this->exportfile=$exportfile;
		if ($mode=="unpack") {
			if (!file_exists($this->exportfile)) {
				$result="Error: Can't find .ax file ($exportfile)";
			} else {
				if (strpos($this->exportfile,"/")===false) {
					$slash="\\";
				} else {
					$slash="/";
				}
				$pos=strrpos($this->exportfile,"$slash");
				if ($pos!==false) {
					$tempexpf=substr($this->exportfile,$pos+1);
				} else {
					$tempexpf=$this->exportfile;
				}

				copy($this->exportfile,$this->tempdir."/$tempexpf");
				$this->exportfile=$exportfile=$tempexpf;
				// tar will (g)unzip and untar the file into tempdir 

				if ($this->cmdlist->error_handler) {
					$errfile=$this->tempdir."/tar.errors";
					$error_handler=sprintf($this->cmdlist->error_handler, $errfile);
				} else {
					$error_handler="";
				}

				$command=sprintf($this->cmdlist->cmd_untar, $this->tempdir, "", $exportfile, $error_handler);

				//echo "$command\n";
				system($command,$retVar);
				if ($retVar!=0) {
					$result="Error: Can't untar $exportfile in ".$this->tempdir."\n";
					if ($errfile && file_exists($errfile)) {
						$result.=implode("",file($errfile));
						unlink($errfile);
						$result.="\n";
					}
				}
			}
		}
		return $result;
	}


	function openObjectsData($mode="r") {
		return $this->ofp=fopen($this->tempdir."/objects.data",$mode);
	}

	function writeObject($object) {
		if (is_object($object)) {
			$str=$object->path."&";
			$str.=$object->id."&";
			$str.=$object->type."&";
			$str.=$object->vtype."&";
			$str.=$object->lastchanged."&";
			$str.=base64_encode(serialize($object->properties))."&";
			$str.=base64_encode(serialize($object->data));
			$str.="\n";
			$result=fputs($this->ofp,$str, strlen($str));
		} else {
			$this->error="error: writeObject called with misformed argument (not an object)";
		}
		return $result;
	}

	function getObject() {
		$buffersize=4096;
		$data="";
		$read_data=fgets($this->ofp, $buffersize);
		while (strlen($read_data)==$buffersize-1 && $read_data[$buffersize-2]!=="\n") {
			$data.=$read_data;
			$read_data=fgets($this->ofp, $buffersize);
		}
		$data.=$read_data;
		$data=substr($data, 0, -1);

		if ($data) {
			$data=explode("&",$data);
			if (sizeof($data)==7) {
				$result=new object;
				$result->path=$data[0];
				$result->id=$data[1];
				$result->type=$data[2];
				$result->vtype=$data[3];
				$result->lastchanged=$data[4];
				$result->properties=unserialize(base64_decode($data[5]));
				$result->data=unserialize(base64_decode($data[6]));
			} else {
				$result=false;
				$this->error="error: line not of expected format at offset ".$this->ofp;
			}
		}
		return $result;
	}

	function closeObjectsdata() {
		if ($this->ofp) {
			return fclose($this->ofp);
		}
	}

	function mktempdir($dir,$prefix="tdir") {
		$nr=0; if ($dir[strlen($dir)-1]!="/") $dir.="/";
		while (file_exists($dir.$prefix.($nr))) {
			$nr++;
		}

		return ($dir.$prefix.($nr));
	}


	function MkDir($path) {
		// silence errors, mkdir complains with warnings instead of return values
		if (!@mkdir($curr,0755,true)) {
			$result="Error: Can't makedir $curr";
		}
		return $result;
	}

	// remove directories with content
	function RmDir($path) {
		$command=sprintf($this->cmdlist->cmd_rmdir,$path);

		system($command,$retVar);
		if ($retVar!=0) {
			$result="Error: Can't remove dir $path";
		}
		return $result;
	}

	function rmvolume($path) {
		if (substr($tmpdir=$path,1,2)==":/") {
			// we have a windows volume name...
			// delete it
			$tmpdir=substr($tmpdir,2);
		}

		return $tmpdir;
	}

	function importfiles($type, $root, $path) {
		if (!($result=$this->MkDir($this->rmvolume($root.$path)))) {
			if (file_exists($this->tempdir."/$type.tgz")) {

				$command=sprintf($this->cmdlist->cmd_list, $this->tempdir."/$type.tgz");
				exec($command, $output, $retVal);
				if ($retVal!=0) {
					$result="Error: can not view archive contents!";
				} else {

					$found=false;
					while (is_array($output) && (list(,$entry)=each($output)) && !$found) {
						if ($path == substr($entry, 0, strlen($path))) {
							$found=true;
						}
					}

					if ($found) {

						$chdir=$this->rmvolume($root);

						$tmpdir=$this->rmvolume($this->tempdir);

						if ($this->cmdlist->error_handler) {
							$errfile=$this->tempdir."/tar.errors";
							$error_handler=sprintf($this->cmdlist->error_handler, $errfile);
						} else {
							$error_handler="";
						}

						$command=sprintf($this->cmdlist->cmd_untar, $chdir, $path, $tmpdir."/$type.tgz", $error_handler);
						//echo "$command\n";
						system($command,$retVar);
						if ($retVar!=0) {
							$result="Error: Can't import $tmpdir/$type.tgz, untar failed in $chdir with errorcode ($retVar)\n";
							if ($errfile && file_exists($errfile)) {
								$result.=implode("",file($errfile));
								unlink($errfile);
								$result.="\n";
							}
						}
					} else {
						$result=1; // path not in archive
						//echo "($path) not in archive!\n";
					}
				}

			} else {
				//$result="Error: Can't chdir to $path";
			}
		}
		return $result;
	}

	function exportfiles($type, $root, $path) {
		$root=$this->rmvolume($root);
		$tmpdir=$this->rmvolume($this->tempdir);
		if (file_exists($root.$path)) {

			if ($this->cmdlist->error_handler) {
				$errfile=$this->tempdir."/tar.errors";
				$error_handler=sprintf($this->cmdlist->error_handler, $errfile);
			} else {
				$error_handler="";
			}

			$command=sprintf($this->cmdlist->cmd_tar,$root, $path, $tmpdir."/$type.tgz", $error_handler);
			//echo "cmd: '$command' \n";
			system($command,$retVar);
			if ($retVar!=0) {
				$result="Error: Can't export, $command failed in $path.\n";
				if ($errfile && file_exists($errfile)) {
					$result.=implode("",file($errfile));
					unlink($errfile);
					$result.="\n";
				}
			}
		}
		return $result;
	}

	function close() {
		if ($this->mode!="unpack") {
			if (!($dh=opendir($this->tempdir))) {
				$result="err:cannotopentempdir";
			} else {
				while ($data=readdir($dh)) {
					if (($data!='.') && ($data!='..')) 
						$exp.=" $data ";
				}
				closedir($dh);


				if ($this->cmdlist->error_handler) {
					$errfile=$this->tempdir."/tar.errors";
					$error_handler=sprintf($this->cmdlist->error_handler, $errfile);
				} else {
					$error_handler="";
				}

				$command=sprintf($this->cmdlist->cmd_tar,$this->tempdir, $exp, $this->tempdir."/export.ax", $error_handler);
				system($command,$retVar);

//				echo "copy: ".$this->tempdir."/export.ax to ".$this->exportfile."\n";
				copy($this->tempdir."/export.ax",$this->exportfile);

				if ($retVar!=0) {
					$result="Error: Can't make .ax export file ".$this->exportfile."\n";
					if (file_exists($errfile)) {
						$result.=implode("",file($errfile));
						unlink($errfile);
						$result.="\n";
					}
				}
			}
		}

		if (!$result) {
			$result=$this->RmDir($this->tempdir);
		}
		return $result;
	}
}
?>