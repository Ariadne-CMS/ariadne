<?php
	if ($this->CheckLogin("read") && $this->CheckConfig()) {
		if ($target) {
			// first check to see if the target is valid
			$parent=$this->store->make_path($target, "..");
			if ($this->exists($parent)) {
				/*	
				//FIXME: for the moment no grants are copied.
				// need to check "add" and "config" grants
				// in the target.
				$searchpath["puser"]="/system/users/";
				$searchpath["pgroup"]="/system/groups/";
				// first check and copy grants to user/group objects
				while (list($type, $idlist)=@each($this->data->grants)) {
					while (list($id, $grants)=@each($idlist)) {
						while (list($grant, $value)=@each($grants)) {
							$this->find($searchpath[$type], 
								Array("login" => Array ( "value" => Array ("=" => "'".AddSlashes($id)."'" ) ) ), 
								"updategrant.phtml", 
								"action=add&path=".RawUrlEncode($this->path)."&grant=".RawUrlEncode($newgrant) 
							);
						}
					}
				}
				*/
				unset($this->data->grants);
				$target=$this->make_path($target);
				if (!$this->exists($target)) {
					// first make sure that the object is clean (data can only be set via 
					// the defined interface: $arCallArgs)
					$this->data=@current($this->get(".","system.get.data.phtml"));

					// first save templates for the new object
					if ($this->data->pinp) {
						$templateroot=$this->store->files."templates";
						while (list($type, $values)=each($data->pinp)) {
							$this->MkDir("templates".$newpath.$type."/");
							while (list($function, $templatelist)=each($values)) {
								while (list($language, $template)=each($templatelist)) {
									$targetfile=$target.$type."/".$function.".".$language;
									// FIXME: check for illegal values of $template
									if (file_exists($templateroot.$template)) {
										copy($templateroot.$template,$templateroot.$targetfile);
									}
									$this->data->pinp[$type][$function][$language]=$targetfile;
									$template.=".pinp";
									$targetfile.=".pinp";
									if (file_exists($templateroot.$template)) {
										copy($templateroot.$template,$templateroot.$targetfile);
									}
								}
							}
						}
					}
					if (!$this->data->$defaultnls) {
						$this->data->nls->default=$ARConfig->nls->default;
					}
					$properties=$this->load_properties();
					$newpath=$this->store->save($target, $this->type, $this->data, $this->properties, $this->vtype);
				} else {
					$arResult=sprintf($ARnls["err:alreadyexists"],$target);
				}
			} else {
				$arResult=sprintf($ARnls["err:wrongpath"],$parent);
			}
		}
	} else {
		$arResult=$ARnls["accessdenied"];
	}
?>