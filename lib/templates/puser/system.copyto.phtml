<?php
  if ($this->CheckLogin("read") && $this->CheckConfig()) {
	$target = $this->make_path($target);
	$userConfig = $this->loadUserConfig();
	$authconfig = $userConfig['authentication'];

	// Check if target is valid according to auth.ini
	$validpath = false;
	foreach ($authconfig['userdirs'] as $userdirpath) {
		if (substr($target, 0, strlen($userdirpath)) == $userdirpath) {
			$validpath = true;
			break;
		}
	}

	if (!$validpath) {
		$arResult = $ARnls["err:invaliduserlocation"];
	} else {
		$newpath = $target;
		$newparent = $this->store->make_path($target, "..");
		$newlogin = substr($newpath, strlen($newparent), -1);
		if (ereg('\{.*\}', $newlogin)) {
			$arResult = $ARnls["err:donotuseid"];
		} else {
			// Check if user exists in any of the paths in auth.ini
			$userexists = false;
			$criteria["login"]["value"]["="]="'".AddSlashes($newlogin)."'";
			foreach ($authconfig['userdirs'] as $userdirpath) {
				$result=$this->find($userdirpath,$criteria,"system.get.phtml");
				if (count($result)) {
					$userexists = true;
					break;
				}
			}

			if ($userexists) {
				$arResult = sprintf($ARnls["err:loginexists"], $newlogin);
			} else {
				unset($this->data->config->usergrants);
				$groups = $this->data->groups;
				unset($this->data->groups);

				$arResult = $this->call("pobject::system.copyto.phtml", $arCallArgs);
				$newpath = $ARCurrent->newpath;
				if (!$this->error && $newpath) {
					$this->path = $newpath;
					$login = substr($this->path, strlen($this->store->make_path($this->path, "..")), -1);
					$this->data->login = $login;
					$properties["login"][0]["value"]="'".AddSlashes($login)."'";
					$this->save($properties);

					if (is_array($groups)) {
						reset($groups);
						while (list($path) = each($groups)) {
							$this->get($path,
									"system.set.user.phtml",
									Array(
										"action" => "add",
										"path" => $this->path
									));
						}
					}
				}
			}
		}
	}
  }
?>