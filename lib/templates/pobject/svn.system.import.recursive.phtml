<?php
	echo "SSIR: " . $this->path . "<br>";

	if ($this->CheckLogin("layout") && $this->CheckConfig()) {
		$this->resetloopcheck();

		if (isset($repository)) {
			$repository = rtrim($repository, "/") . "/";
			$fstore	= $this->store->get_filestore_svn("templates");
			$svnstack = &PEAR_ErrorStack::singleton('VersionControl_SVN');
			$svn	= $fstore->connect($this->id, $username, $password);

			if ($svn['info']['Revision']) {
				echo $this->path . " is already under version control - update instead.<br>";
			}

			echo "<br>";
			echo "Checkout for " . $this->path . "<br>";

			if ($repoPath) {
				$repo_subpath = substr($this->path, strlen($repoPath));
			} else {
				// This is also the first loop!
				$fstore->svn_accept_cert($svn, $repository);
				$repo_subpath = '';
			}

			$repository = rtrim($repository, "/") . "/" . $repo_subpath;
			echo "Using repo: $repository<br>";

			$mkdirs = $fstore->svn_mkdirs($svn, $repository);
			if ($mkdirs) {
				echo "Repository directory created\n";
				flush();
			} else {
				echo "Repository already exists - use checkout and add instead\n";
				flush();
				return;
			}

			$fstore->svn_checkout($svn, $repository);

			$fileinfo = array();
			$fileinfo[''] = array();
			$fileinfo['']['ar:type'] = $this->type;
			$fileinfo['']['ar:name'] = $this->nlsdata->name;

			$pinp = $this->data->config->pinp;
			if ($pinp) {
				while(list($type, $values) = each($pinp)) {
					while(list($function, $templatelist) = each($values)) {
						foreach($templatelist as $language => $node) {
							$compiled_filename = $type . "." . $function . "." . $language;

							$pinp_filename = $type . "." . $function . "." . $language . ".pinp";
							if ($this->data->config->templates[$type][$function]) {
								$default = 1;
							} else {
								$default = 0;
							}

							$fileinfo[$pinp_filename] = array();
							$fileinfo[$pinp_filename]['ar:function'] = $function;
							$fileinfo[$pinp_filename]['ar:type'] = $type;
							$fileinfo[$pinp_filename]['ar:language'] = $language;
							$fileinfo[$pinp_filename]['ar:default'] = $default;
							$fstore->svn_add($svn, $pinp_filename);
						}
					}
				}
			}

			$result = $fstore->svn_commit($svn, $message, $fileinfo);
			print_r($result);

			// Run checkout on the existing subdirs.
			$arCallArgs['repoPath'] = $this->path;
			$this->ls($this->path, "svn.system.import.recursive.phtml", $arCallArgs);
			flush();
		}
	}
?>