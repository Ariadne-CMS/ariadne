<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
	 
	******************************************************************/

	if (($this->arIsNewObject && $this->CheckLogin("add")) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit")) &&
			$this->CheckConfig()) {
		if ($this->arIsNewObject) {
			$filename=$this->getdata("arNewFilename","none");
			if (!$this->data->mimetype=$this->getdata("mimetype","none")) {
				$this->data->mimetype=$this->getdata("file_type","none");
			}
			$this->data->filesize=$this->getdata("file_size","none");
			while (list($key,$value)=each($ARConfig->nls->list)) {
				if (!$this->data->$key->name) {
					$this->data->$key->name=$filename;
				}
			}
        } else {
			// first make sure that the object is clean (data can only be set v
			// the defined interface: $arCallArgs)
			$this->data=@current($this->get(".","system.get.data.phtml"));
		}

		if (!$this->getdata("name", $ARConfig->nls->default)) {
			$this->error=sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]);
		} else {
			if (!$this->data->nls) {
				$this->data->nls=new object;
			}
			$this->data->nls->default=$ARConfig->nls->default;
			reset($AR->nls->list);
			$count=0;
			while (list($key, $value)=each($AR->nls->list)) {

				if ($this->getdata("name",$key)) {
					if (!isset($this->data->$key)) {
						$newnlsdata=new object;
					} else {
						$newnlsdata=$newdata->$key;
					}
					$newnlsdata->name=$this->getdata("name",$key);
					$properties["name"][$count]["value"]="'".AddSlashes($newnlsdata->name)."'";
					$properties["name"][$count]["nls"]="'$key'";
					$properties["text"][$count]["value"]="'".AddSlashes($newnlsdata->name)."'";
					$properties["text"][$count]["nls"]="'$key'";
					$count++;
					$newnlsdata->summary=$this->getdata("summary", $key);
					$properties["text"][$count]["value"]="'".AddSlashes($newnlsdata->summary)."'";
					$properties["text"][$count]["nls"]="'$key'";
					$count++;
					$newnlsdata->keywords=$this->getdata("keywords", $key);
					$properties["text"][$count]["value"]="'".AddSlashes($newnlsdata->keywords)."'";
					$properties["text"][$count]["nls"]="'$key'";
					$count++;
					$this->data->$key=$newnlsdata;
					$this->data->nls->list[$key]=$value;
				} else {
					if ($this->data->$key) {
						unset($this->data->$key->name);
						unset($this->data->nls->list[$key]);
					}
				}
			}
		}

		$this->data->mimetype=$this->getdata("mimetype","none");
		$temp=explode("/",$this->data->mimetype);
		$this->data->mime["type"]=$temp[0];
		$this->data->mime["subtype"]=$temp[1];
		$properties["mimetype"][0]["type"]="'".AddSlashes($this->data->mime["type"])."'";
		$properties["mimetype"][0]["subtype"]="'".AddSlashes($this->data->mime["subtype"])."'";

		$this->save($properties);
		unset($properties);

		$this->arIsNewObject=false;

		$tempfile=$this->getdata("file_temp", "none");
		// now check whether $file_temp is defined, if so, move it
		if (!$this->error) {
			if ($tempfile) {
				$tempfile=ereg_replace("[\\\/]","",$tempfile); // make sure nobody gets /etc/passwd			
				$tempfile=$this->store->files."temp/".$tempfile;
				if (file_exists($tempfile)) {	
					$f_store=$this->store->get_filestore("files");
					$f_store->copy_to_store($tempfile, $this->id, "file");
					$f_store->close();
					@unlink($tempfile);
					if (!$this->data->mimetype=$this->getdata("mimetype","none")) {
						$this->data->mimetype=$this->getdata("file_type","none");
					}
					$this->data->filesize=$this->getdata("file_size","none"); 
				} else {
					$tempfile=false;
				}
			} 
		}


		$tempfile=$this->getdata("thumbfile_temp", "none");
		// now check whether $thumbfile_temp is defined, if so, move it
		if (!$this->error) {
			if ($tempfile) {
				$tempfile=ereg_replace("[\\\/]","",$tempfile); // make sure nobody gets /etc/passwd			
				$tempfile=$this->store->files."temp/".$tempfile;
				if (file_exists($tempfile)) {	
					$f_store=$this->store->get_filestore("files");
					$f_store->copy_to_store($tempfile, $this->id, "file.thumb");
					$f_store->close();
					@unlink($tempfile);
					$this->data->thumb_mimetype=$this->getdata("thumbfile_type","none");
					$this->data->thumb_filesize=$this->getdata("thumbfile_size","none"); 
				} else {
					$tempfile=false;
				}
			} else 
			if (!$this->error && ($this->getdata("thumbwidth","none") || $this->getdata("thumbheight", "none"))) {

				$this->data->thumbwidth=$this->getdata("newthumbwidth", "none");
				$this->data->thumbheight=$this->getdata("newthumbheight", "none");
				$this->data->thumbcolor=$this->getdata("newthumbcolor", "none");
				$this->call("system.save.thumb.phtml");

			}

			$this->save($properties);
		}
	}
?>