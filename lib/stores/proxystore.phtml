<?php
/******************************************************************************
  Abstract Store 1.0						Ariadne 2.0

  Copyright (C) 1998,1999  Muze 

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

*******************************************************************************/

class proxystore {

	var $error;
	var $root;
	var $code;
	var $key;


	function proxystore(&$key,&$config) {
		global $AR;
	/**********************************************************************************
		
	 This is the constructor routine for the store object. It takes some configuration 
	 information as arguments and sets up the database connection.

	 $path is the root path of the running script under the document root of				
		the webserver.
	 $config contains some database configuration values: "host", "user",
		"password", "database" and the location of the class files for all the used
		types.

	 **********************************************************************************/
		// disabled debug("proxystore($key)","store");
		$this->key = &$key;
		$this->root = &$AR->stores[$key]->root;
		$this->rootoptions=&$AR->stores[$key]->rootoptions;
		// otherwise objects included dureing the inisalisation can't find the codebase
		$this->code = $AR->stores[$key]->code;

		/* Instantiate module locking */
		include_once($AR->stores[$key]->code."modules/mod_lock/proxy.phtml");
		$this->mod_lock = new proxylock($this->key);

		// we don't want to leak information
		unset($this->code);
		// disabled debug("proxystore: end","all");
	}

	function createproxy(&$store,&$config){
		global $AR;
		srand((double)microtime()*1000000);
		do {
			// 3 bytes id
			$genid=chr(rand(1,255)).chr(rand(1,255)).chr(rand(1,255));
			// replace all slashes with "0"
			$id=strtr(base64_encode($genid),"/+","01");
		} while (isset($AR->stores[$id]));
		$AR->stores[$id] = &$store;
		new proxystore($id,$config);
		return new proxystore($id,$config);
	}

	function get_config($field) {
	global $AR;
		// disabled debug("proxy::get_config($field)", "store");
		$result = $AR->stores[$this->key]->get_config($field);
		// disabled debug("proxy::get_config: end", "all");
		return $result;
	}

	function call($template, $args, $objects) {
	/**********************************************************************************
	
	 This function takes a list of objects, the function to be called in each of those
	 objects and the arguments of that function as arguments. The list of objects is of
	 unspecified type and may be different in other implementations of the store 
	 interface.

	 The function will retrieve and instantiate each object in the object list and call
	 the objects call with $function and $args.

	 store->call is aware of the possibility of objects being called as a substore, 
	 meaning: If a requested object is not found in this store, it might be in a
	 different store which is linked into this one via a substore. Each object can in
	 principle double as a substore, as long as it declares the object->is_store 
	 variable as TRUE. So if the requested object is not found, the search functions 
	 (get, ls and find) will return the object with the longest matching path. It is up
	 to store->call to check wether this object is the one referenced and if not, 
	 wether it is a substore.
	 **********************************************************************************/ 

		global $AR;
		// disabled debug("proxycall($template, $args, [list])","store");
		$result = &$AR->stores[$this->key]->call($template, $args, $objects);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxycall: end","all");
		return $result;
	}

	function newobject($path, $parent, $type, $data, $id=0, $lastchanged=0, $vtype="", $size=0, $priority=0) {
		global $AR;
		// disabled debug("proxynewobject($path, $parent, $type, [data], $id, $lastchanged, $vtype,$size, $priority)","all");
		$result= &$AR->stores[$this->key]->newobject($path, $parent, $type, $data, $id, $lastchanged, $vtype, $size, $priority);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxynewobject: end","all");
		return $result;
	}

	function is_supported($feature) {
		global $AR;
		// disabled debug("proxy::is_supported($feature)", "all");
		$result= &$AR->stores[$this->key]->is_supported($feature);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy::is_supported: $result: end","all");
		return $result;
	}

	function format_for_fti($text) {
		global $AR;
		// disabled debug("proxy::format_for_fti([text])", "all");
		$result= &$AR->stores[$this->key]->format_for_fti($text);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy::format_for_fti: end","all");
		return $result;
	}


	function get($path) {
	/**********************************************************************************

	 This function takes as argument a path to an object in the store and will retrieve
	 all the necessary data and return this in the objectlist type needed for 
	 store->call(). If the requested path does not exist, it will retrieve the object
	 with the longest matching path.

	 $path should always start and end with a '/'.

	 **********************************************************************************/
		global $AR;
		// disabled debug("proxyget($path)","store");
		$result= &$AR->stores[$this->key]->get($path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyget: end","all");
		return $result;
	}

	function touch($id, $timestamp = -1) {
		global $AR;
		// disabled debug("proxy touch($path)","store");
		$result = &$AR->stores[$this->key]->touch($id, $timestamp);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy touch: end","all");
		return $result;
	}
	

	function ls($path) {
	/**********************************************************************************

	 This function takes as argument a path to an object in the store and will retrieve
	 all the objects and their data which have this object as their parent. It will 
	 then return this in the objectlist type needed for store->call(). If the requested
	 path does not exist, it will retrieve the object with the longest matching path.

	 $path should always start and end with a '/'.

	 **********************************************************************************/
		global $AR;
		// disabled debug("proxy ls($path)","store");
		$result = &$AR->stores[$this->key]->ls($path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy ls: end","all");
		return $result;
	}

	function parents($path, $top="/") {
	/**********************************************************************************

	 This function takes as argument a path to an object in the store. It will return 
	 all objects with a path which is a substring of the given path. The resulsts are 
	 ordered by path (length), shortest paths first.
	 In effect all parents of an object in the tree are called, in order, starting at 
	 the root.

	 $path should always start and end with a '/'.

	 **********************************************************************************/
		global $AR;
		// disabled debug("proxy parents($path)","store");
		$result = &$AR->stores[$this->key]->parents($path,$top);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy parents: end","all");
		return $result;
	}

	function find($path, $criteria, $limit=100, $offset=0) {
	/**********************************************************************************

	 This function takes as arguments a path to an object in the store and some search
	 criteria. It will search for all matching objects under the given path. If the
	 given path is not in this store but in a substore it will not automatically search
	 that substore. 

	 $criteria is of the form 

	 $criteria ::= ({ $property_name => ({ $valuename => ({ $compare_function, $value }) }) }) 

	 e.g.: $criteria["status"]["value"][">"]="'published'";

	 $path should always start and end with a '/'.

	 **********************************************************************************/
		global $AR;
		// disabled debug("proxyfind($path, [array], $limit, $offset)","store");
		$result = &$AR->stores[$this->key]->find($path, $criteria, $limit, $offset);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyfind: end","all");
		return $result;
	}

	function close() {
		// This is the destructor function, nothing much to see :)
		// disabled debug("proxyclose()","store");
		$result = &$AR->stores[$this->key]->close();
		$this->error = $AR->stores[$this->key]->error;
		return $result;
	}


	function save($path, $type, $data, $properties="", $vtype="", $priority=false) {
	/***************************************************************

		This function takes as argument a path, type, objectdata and 
		possibly a properties list and vtype (virtual type).
		If there exists no object with the given path, a new object is 
		saved with the given type, data, properties and vtype, and a
		new path is saved pointing to it.
		If there does exist an object with the given path, it's object
		data is overwritten with the given data and if vtype is set the
		current vtype is overwritten with the new one.
		
		$path must be an absolute path (containing no '..' and starting
			with '/')
		$type must be a valid type
		$data can be any string (usually a serialized object.)
		$properties is a multidimensional hash of the following form:
			$properties[{property_name}][][{value_name}]={value}
			{property_name} must be a valid property name
			{value_name} must be a valid value name for this property
			{value} can be a number, boolean or string. If it is a string
				it must be enclosed in single qoutes. All other single 
				quotes in the string must be escaped. e.g:
				"'\'t is a String'"
		example:
			$properties["name"][0]["value"]="'A name'";
			$properties["name"][1]["value"]="'A second name!'";
		if $properties["name"]=1 then all properties for property name
			will be removed.

		$vtype must be a valid type.
	 
		if $properties or $vtype are not set or empty ("",0 or false)
		they will be ignored. $vtype defaults to $type.
		Only those properties listed in $properties will be updated.
		Any other property set will remain as it was.

	***************************************************************/
		global $AR;
		// disabled debug("proxysave($path, $type, [data], [properties], $vtype)","store");
		$result = $AR->stores[$this->key]->save($path, $type, $data, $properties, $vtype,$priority);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxysave: end, results=".$result."","all");
		return $result;
	}


	function purge($path) {
	/**********************************************************************
	 
		This function will delete the object pointed to by $path and all
	other paths pointing to that object. It will then remove any property
	for this object from all property tables.
		The function returns the number of paths found and removed or 1 if
	there was no path found (meaning that the object doesn't exist and 
	therefor purge succeeded while doing nothing.)

	 $path should always start and end with a '/'.

	**********************************************************************/

		global $AR;
		// disabled debug("proxypurge($path)","store");
		$result = $AR->stores[$this->key]->purge($path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxypurge: end","all");
		return $result;
	}

	function count($objects) {
		global $AR;
		// disabled debug("proxyinfo($objects)","store");
		$result = $AR->stores[$this->key]->count($objects);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyinfo: end","all");
		return $result;
	}
		
	
	function info($objects) {
		global $AR;
		// disabled debug("proxyinfo($objects)","store");
		$result = $AR->stores[$this->key]->info($objects);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyinfo: end","all");
		return $result;
	}

	function delete($path) {
	/**********************************************************************

		This function deletes the path given. If this is the last path pointing
	to an object, the object will be purged instead.

	$path should always start and end with a '/'.

	**********************************************************************/

		global $AR;
		// disabled debug("proxydelete($path)","store");
		$result = $AR->stores[$this->key]->delete($path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxydelete: end","all");
		return $result;
	}

	function exists($path) {
	/**********************************************************************

		This function checks the given path to see if it exists. If it does
	it returns the id of the object to which it points. Otherwise it returns
	0.

	$path should always start and end with a '/'.

	**********************************************************************/

		global $AR;
		// disabled debug("proxyexists($path)","store");
		$this->error="";
		$result = $AR->stores[$this->key]->exists($path);
		$this->error = $AR->stores[$this->key]->error;
		return $result;
	}


	function link($source, $destination) {
	/**********************************************************************

		Link adds an extra path to an already existing object. It has two
	arguments: $source and $destination. $source is an existing path of
	an object, $destination is the new path. $destination must not already
	exist.

	$destination should always start and end with a '/'.

	**********************************************************************/

		global $AR;
		// disabled debug("proxylink($source,$destination)","store");
		$result = $AR->stores[$this->key]->link($source, $destination);
		$this->error = $AR->stores[$this->key]->error;
		return $result;
	}

	function list_paths($path) {
	/**********************************************************************

		This function returns an array of all paths pointing to the same object 
	as $path does.

	**********************************************************************/

		global $AR;
		// disabled debug("proxylist_paths($path)","store");
		$result = $AR->stores[$this->key]->list_paths($path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxylist_paths: end","all");
		return $result;
	}

	function implements($type, $implements) {
	/**********************************************************************

		This function returns 1 if the $type implements the type or
	interface in $implements. Otherwise it returns 0.

	**********************************************************************/


		global $AR;
		// disabled debug("proxyimplements($implements)","store");
		$result = $AR->stores[$this->key]->implements($type, $implements);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyimplements: end ($result)","all");
		return $result;
	}
	
	function make_path($curr_dir, $path) {
	/**********************************************************************
 
		This function creates an absolute path from the given starting path
	($curr_dir) and a relative (or absolute) path ($path). If $path starts
	with a '/' $curr_dir is ignored. 
	$path must be a string of substrings seperated by '/'. each of these 
	substrings may consist of charachters and/or numbers. If a substring
	is "..", it and the previuos substring will be removed. If a substring
	is "." or "", it is removed. All other substrings are then concatenated
	with a '/' between them and at the start and the end. This string is 
	then returned.

	**********************************************************************/

		global $AR;
		// disabled debug("proxymake_path($curr_dir, $path)","all");
		$result = $AR->stores[$this->key]->make_path($curr_dir, $path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxymake_path: end ($result)","all");
		return $result;
	}

	function save_properties($properties, $id) {
	/********************************************************************

		'private' function of mysql.phtml. It updates all property tables
		defined in $properties and sets the values to the values in
		$properties.

	********************************************************************/

		global $AR;
		// disabled debug("proxysave_properties([properties], $id)","all");
		$result = $AR->stores[$this->key]->save_properties($properties, $id);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxysave_properties: end","all");
		return $result;
	}


	function load_properties($object, $values="") {
		global $AR;
		// disabled debug("proxyload_properties($object)","all");
		$result = $AR->stores[$this->key]->load_properties($object,$values);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyload_properties: end","all");
		return $result;
	}

	function load_property($object, $property, $values="") {
		global $AR;
		// disabled debug("proxyload_property($object, $property)","all");
		$result = $AR->stores[$this->key]->load_property($object, $property,$values);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyload_property: end","all");
		return $result;
	}

	function add_property($object, $property, $values) {
		global $AR;
		// disabled debug("proxyadd_property($object, $property, [values])","all");
		$result = $AR->stores[$this->key]->add_property($object, $property, $values);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyadd_property: end","all");
		return $result;
	}

	function del_property($object, $property="", $values="") {
		global $AR;
		// disabled debug("proxydel_property($object, $property, [values])","all");
		$result = $AR->stores[$this->key]->del_property($object, $property, $values);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxydel_property: end","all");
		return $result;
	}

	function get_filestore($name) {
		global $AR;
			$filestore = &$AR->stores[$this->key]->get_filestore($name);
		return $filestore;
	}

	function get_filestore_svn($name) {
		global $AR;
			$filestore = &$AR->stores[$this->key]->get_filestore_svn($name);
		return $filestore;
	}

	function get_nextid($path, $mask="{5:id}") {
		global $AR;
		// disabled debug("proxy::get_nextid($path, $mask)","all");
		$result = $AR->stores[$this->key]->get_nextid($path, $mask);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy::get_nextid: end","all");
		return $result;
	}

	function set_nextid($path, $newid) {
	/**********************************************************************

		'private' function of the store. Used by link and save.
		This function calculates and returns the next unused id (number) for 
	the given path. 

	**********************************************************************/
		global $AR;
		// disabled debug("proxyset_nextid($path, $newid)","all");
		$result = $AR->stores[$this->key]->set_nextid($path,$newid);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxyset_nextid: end","all");
		return $result;
	}

	function nextid($path) {
	/**********************************************************************

		'private' function of mysql store. Used by link and save.
		This function calculates and returns the next unused id (number) for 
	the given path. 

	**********************************************************************/

		
		global $AR;
		// disabled debug("proxynextid($path)","all");
		$result = $AR->stores[$this->key]->nextid($path);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxynextid: end","all");
		return $result;
	}


	function move($source, $destination) {
	/**********************************************************************

	$destination should always start and end with a '/'.

	**********************************************************************/
		global $AR;
		// disabled debug("proxy_move($source, $destination)","all");
		$result = $AR->stores[$this->key]->move($source,$destination);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy_move: end","all");
		return $result;
	}

	function store_run_query($query) {
	/**********************************************************************

	$destination should always start and end with a '/'.

	**********************************************************************/
		global $AR;
		// disabled debug("proxy_store_run_query($query)","all");
		$result = $AR->stores[$this->key]->store_run_query($query);
		$this->error = $AR->stores[$this->key]->error;
		// disabled debug("proxy_store_run_query: end","all");
		return $result;
	}

} // end class store

?>