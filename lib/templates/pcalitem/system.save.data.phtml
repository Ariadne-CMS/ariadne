<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
 
	******************************************************************/

	require_once($this->store->get_config('code')."modules/mod_page.php");

	if ((($this->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) && 
			$this->CheckConfig()) {
		if (!$this->arIsNewObject) {
			debug("pcalitem/system.save.data.phtml: get clean data","all");
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
		    $this->data=current($this->get(".","system.get.data.phtml"));
		} else {
			$this->data=new object;
		}

		$this->error = null;

		// unset the properties array, so no properties can be passed to this template.
		$properties = array();

		//	$repeatn: int
		//	week:  $repeat_on[$option]=0/1 
		//	       $option {0-7)
		//	month: $repeat_by=$option {"Day","Date"}
		//	       $repeatend: date int
		$roptions=array(	$ARnls["none"]	=> "none",
							$ARnls["day"]	=> "day",
							$ARnls["week"]	=> "week",
							$ARnls["month"]	=> "month",
							$ARnls["year"]	=> "year");
		$moptions=array(	$ARnls["day"]	=> "day",
							$ARnls["date"]	=> "date");
		$woptions=array(	$ARnls["sun"]	=> "sun",
							$ARnls["mon"]	=> "mon",
							$ARnls["tue"]	=> "tue",
							$ARnls["wed"]	=> "wed",
							$ARnls["thu"]	=> "thu",
							$ARnls["fri"]	=> "fri",
							$ARnls["sat"]	=> "sat");

		if ($date=$this->getdata("date","none")) {
			$this->data->date = $date;
			$date_arr=getdate($date);
		} else {
			$date = strtotime('today');
		}
		if ($entry=$this->getdata("entry","none")) {
			$entry_arr=getdate($entry);
		}
		if (!$repeat=$this->getdata("repeat","none")) {
			$repeat="none";
		}
		$repeatend=$this->getdata("repeatend","none");
		$repeatn=$this->getdata("repeatn","none");
		$repeat_on=$this->getdata("repeat_on","none");
		$repeat_by=$this->getdata("repeat_by","none");

		if (!$this->getdata("name",$ARConfig->nls->default)) { // default language for this path
			$this->error = ar::error( sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]), 1101);
			return false;
		} else {
			if (!$this->data->nls) {
				$this->data->nls=new object;
			}
			$this->data->nls->default=$ARConfig->nls->default;
			reset($AR->nls->list);
			$count=0;
			while (list($key, $value)=each($AR->nls->list)) {

				if ($name=$this->getdata("name",$key)) { 
					if (!$this->data->$key) {
						$newnlsdata=new object;
					} else {
						$newnlsdata=$this->data->$key;
					}
					$newnlsdata->name=$name;
					$properties["name"][$count]["value"]=$newnlsdata->name;
					$properties["name"][$count]["nls"]=$key;
					$properties["text"][$count]["value"]=$newnlsdata->name;
					$properties["text"][$count]["nls"]=$key;
					$count++;
					$newnlsdata->summary=page::compile($this->getdata("summary",$key), $key);
					$properties["text"][$count]["value"]=$newnlsdata->summary;
					$properties["text"][$count]["nls"]=$key;
					$count++;
					if ($page=$this->getdata("page",$key)) {
						$newnlsdata->page=$page;
					}
					if ($this->store->is_supported("fulltext")) {
						$properties["fulltext"][$count]["value"]=$this->store->format_for_fti(
								$newnlsdata->name." ".
								$this->html_to_text($newnlsdata->summary)." ".
								$this->html_to_text($newnlsdata->page)
								);
						$properties["fulltext"][$count]["nls"]=$key;
					}
					$this->data->$key=$newnlsdata;
					$this->data->nls->list[$key]=$value;
				} else { // clear language values for $key->name if set, keep the rest, just in case.
					if ($this->data->$key) {
						unset($this->data->$key->name);
						unset($this->data->nls->list[$key]);
					}
				}
			}

			// calculate start and endtime, repeats etc.
			if (!isset($date)) {
				$this->error = ar::error( $ARnls["err:validdate"], 1211);
			} else {
				$days=(24*60*60);
				$weeks=(7*$days);
				$date_arr=getdate($date);
				$this->data->starthour=$this->getdata("starthour","none");
				$this->data->startminute=$this->getdata("startminute","none");
				$this->data->starttime=mktime((int)$this->data->starthour, (int)$this->data->startminute, 0, $date_arr["mon"], $date_arr["mday"], $date_arr["year"]);
				// endtime
				if ($this->data->no_time=$this->getdata("no_time")) {
					$this->data->endtime=$this->data->starttime-1;
				} else {
					$this->data->endhour=$this->getdata("endhour","none");
					$this->data->endminute=$this->getdata("endminute","none");
					$this->data->endtime=mktime((int)$this->data->endhour, (int)$this->data->endminute, 0, $date_arr["mon"], $date_arr["mday"], $date_arr["year"]);
				}
				$this->data->priority=$this->getdata("priority","none");
				$properties["priority"][0]["value"]=AddSlashes($priority);
				if (!$repeat || ($repeat=="none")) { // advanced options not selected
					debug("pcalitem/system.save.data.phtml: no advanced: repeat set to none ($repeat)","all");
					$this->data->repeat="none";
					$this->data->repeatn=1;
				} else { // advanced options selected
					$this->data->repeat=$repeat;
					debug("pcalitem/system.save.data.phtml: advanced: repeat set to $repeat","all");
					$this->data->repeatn=abs(intval($repeatn));
					if (!$this->data->repeatn) { // must never be 0!
						$this->data->repeatn=1;
					}
					$this->data->repeatend=intval($repeatend)+$days-1;
					$this->data->repeat_on=$repeat_on;
					$this->data->repeat_by=$moptions[$repeat_by];
				}
			}
			if (!$this->error) {
				if (!$this->arIsNewObject) {
					// see if we need to split the object
					$confirm=$this->getdata("confirm","none");
					if ($confirm==$ARnls["current"]) {
						debug("confirm: current","all");
						// save a new pcalitem with the current values, no repeat
						$newcalitem=$this->store->newobject($this->path."{0:id}/",$this->path,$this->type,$this->data);
						$newcalitem->arIsNewObject=true;
						$newcalitem->data->repeat="none";
						$args=$arCallArgs;
						$args["repeat"]="none";
						$newcalitem->call("system.save.data.phtml", $args);
						// remove current entry from current object
						$this->data->timeframes=$this->DelTimeframe($entry);
						$dontsavetimeframes=true;
					} else { // $confirm=="All" by default
						debug("confirm: all","all");
						// check whether this is the first item in the repeating row
						//	 or the item doesn't repeat
						// else -> split into two, save the newer (starting from now)
						if (($this->data->repeat!="none") && ($this->data->timeframes[0]["start"]<$entry)) {
							debug("save a new pcalitem, repeating from now","all");
							// save a new pcalitem, repeating from now
							$newcalitem=$this->store->newobject($this->path."{0:id}/",$this->path,$this->type,$this->data);
							$newcalitem->arIsNewObject=true;
							$newcalitem->data->date=$entry;
							$args=$arCallArgs;
							$args["date"]=$entry;
							$newcalitem->call("system.save.data.phtml", $args);
							// set endtime for the current object to current entry
							$this->data->timeframes=$this->NewEndtime($entry);
							$dontsavetimeframes=true;
							$entry_arr=getdate($entry);
							$this->data->repeatend=mktime(0,0,0, $entry_arr["mon"], $entry_arr["mday"], $entry_arr["year"]);
						}
					}
				}

				if (!$dontsavetimeframes) {
					// now calculate the timeframes properties.
					$length=$this->data->endtime - $this->data->starttime;
					switch($this->data->repeat) {
						case "none": // add one entry;
							$properties["timeframe"][0]["start"]=$this->data->starttime;
							$properties["timeframe"][0]["end"]=$this->data->endtime;
							break;
						case "day": // repeat ever $repeatn days untile $repeatend
							$i=0;
							$time=$this->data->starttime;
							while (($time<=$this->data->repeatend) && ($i<100)) {
								$properties["timeframe"][$i]["start"]=$time;
								$properties["timeframe"][$i]["end"]=$time+$length;
								$time+=($this->data->repeatn*$days);
								$i++;
							}
							break;
						case "week": // repeat every $repeatn weeks on given weekdays until $repeatend
							$i=0;
							$time=$this->data->starttime;
							while ($time<=$this->data->repeatend) {
								$time_arr=getdate($time);
								$wday=$time_arr["wday"];
								reset($this->data->repeat_on);
								while (list($day,$checked)=each($this->data->repeat_on)) {
									if ($checked) {
										$diff=($day-$wday) * $days;
										if (($time+$diff)>=$this->data->starttime) { // $diff can be negative
											$properties["timeframe"][$i]["start"]=$time+$diff;
											$properties["timeframe"][$i]["end"]=$time+$diff+$length;
											$i++;
										}
									}
								}
								$time+=($this->data->repeatn*$weeks);
							}
							break;
							case "month": // repeat every $repeatn months on ..
								$i=0;
								$time=$this->data->starttime;
								if ($this->data->repeat_by=="day") { // .. the nth weekday of the month or ..
									while ($time <= $this->data->repeatend) {
										$properties["timeframe"][$i]["start"]=$time;
										$properties["timeframe"][$i]["end"]=$time+$length;
										$i++;
										// calculate $time for next loop
										// ( ceil(date("d", $this->data->starttime)/7)-1 )*7+1 = 1 || 8 || 15 || 22 || 29
										$temp_woche = mktime( 0, 0, 0, date("m", $time)+$this->data->repeatn, ( ceil(date("d", $this->data->starttime)/7)-1 )*7+1, date("Y", $time) );
										$temp_diff = date ( "w", $this->data->starttime) - ( date("w", $temp_woche) );
										if ($temp_diff<0) $temp_diff = $temp_diff + 7;
										$temp_time = mktime( date("H", $time), date("i", $time), date("s", $time), date("m", $temp_woche), date("d", $temp_woche)+$temp_diff, date("Y", $temp_woche) );
										// check if $time is in next month
										while ( date("Ym", $temp_time) > date("Ym", mktime( 0, 0, 0, date("m", $time)+$this->data->repeatn, 1, date("Y", $time) ) ) ) {
											$temp_time = mktime( date("H", $temp_time), date("i", $temp_time), date("s", $temp_time), date("m", $temp_time), date("d", $temp_time)-7, date("Y", $temp_time) );
										}
										$time = $temp_time;
									}
								} else { // .. this date until $repeatend
									while ($time<=$this->data->repeatend) {
										$properties["timeframe"][$i]["start"]=$time;
										$properties["timeframe"][$i]["end"]=$time+$length;
										$i++;
										$time = mktime( date("H", $time), date("i", $time), 
														date("s", $time), date("m", $time)+$this->data->repeatn, 
														date("d", $time), date("Y", $time) 
												);
									}
								}
							break;
						case "year": // repeat every $repeatn years on this date until $repeatend
							$i=0;
							$time=$this->data->starttime;
							while ($time<=$this->data->repeatend) {
								$properties["timeframe"][$i]["start"]=$time;
								$properties["timeframe"][$i]["end"]=$time+$length;
								$i++;
								$time = mktime( date("H", $time), date("i", $time), 
												date("s", $time), date("m", $time), 
												date("d", $time), date("Y", $time)+$this->data->repeatn 
										);
							}
							break;
					}
					$this->data->timeframes=$properties["timeframe"];
				}
				$arResult = $this->save($properties);
				global $cache_config;
				$cachestore=new cache($cache_config);
				$cachestore->onObjectSaved($this->id);
			}
		}
	}
?>