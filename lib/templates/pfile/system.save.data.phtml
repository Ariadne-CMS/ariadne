<?php
	/******************************************************************
	 system.save.data.phtml				 Muze Ariadne v2.1
	 ------------------------------------------------------------------
 
	******************************************************************/

	if ((($this->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) &&
			$this->CheckConfig()) {
		if ($this->arIsNewObject) {
			$this->data=new object;
		} else {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
			$this->data=current($this->get(".","system.get.data.phtml"));
		}
		
		// unset the properties array, so no properties can be passed to this template.
		$properties = Array();
		
		if (!$this->getdata("name",$ARConfig->nls->default)) { // default language for this path
			$this->error=sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]);
		} else {
			if (!$this->data->nls) {
				$this->data->nls=new object;
			}
			$this->data->nls->default=$ARConfig->nls->default;
			reset($AR->nls->list);
			$count=0;
			$nlslist = Array("none");
			while (list($key, $value)=each($AR->nls->list)) {
				array_push($nlslist, $key);
				if ($this->getdata("name",$key)) {
					if (!$this->data->$key) {
						$newnlsdata=new object;
					} else {
						$newnlsdata=$this->data->$key;
					}
					$newnlsdata->name=$this->getdata("name",$key);
					$properties["name"][$count]["value"]="'".AddSlashes($newnlsdata->name)."'";
					$properties["name"][$count]["nls"]="'$key'";
					$properties["text"][$count]["value"]="'".AddSlashes($newnlsdata->name)."'";
					$properties["text"][$count]["nls"]="'$key'";
 					$count++;
					$newnlsdata->summary=$this->getdata("summary",$key);
					$properties["text"][$count]["value"]="'".AddSlashes(substr($newnlsdata->summary,0,255))."'";
					$properties["text"][$count]["nls"]="'$key'";
					$count++;
					if ($this->store->is_supported("fulltext")) {
						$properties["fulltext"][$count]["value"]="'".AddSlashes($this->store->format_for_fti(
								$newnlsdata->name." ".
								$this->html_to_text($newnlsdata->summary)." "
								))."'";
						$properties["fulltext"][$count]["nls"]="'$key'";
					}
					$this->data->$key=$newnlsdata;
					$this->data->nls->list[$key]=$value;
				} else { // clear language values for $key->name if set, keep the rest, just in case.
					if ($this->data->$key) {
						unset($this->data->$key->name);
						unset($this->data->nls->list[$key]);
					}
				}
			}
		}
		$this->data->mimetype=$this->getdata("mimetype","none");
		$this->save($properties);

		if (!$this->error) {
			$this->ClearCache();
			unset($properties);

			$this->arIsNewObject = false;
			$isDefaultSet = false;
			foreach ($nlslist as $nlskey) {
				$fulltext = $properties['fulltext'];
				$tempfile = $this->getdata("file_temp", $nlskey);
				$mimetype = $this->getdata("file_type", $nlskey);
				if (!$mimetype) {
					$mimetype = $this->getdata("mimetype", $nlskey);
				}
				// now check whether $file_temp is defined, if so, move it
				if (!$this->error) {
					if ($tempfile) {
						$tempfile=ereg_replace("[\\\/]","",$tempfile); // make sure nobody gets /etc/passwd			
						$tempfile=$this->store->get_config("files")."temp/".$tempfile;

						if (file_exists($tempfile)) {	
							$files = $this->store->get_filestore("files");
							if (!$isDefaultSet) {
								// keep the 'none' key for backwards compatibility
								if ($nlskey == "none" || $nlskey == $ARConfig->nls->default) {
									$files->copy_to_store($tempfile, $this->id, "file");
									$isDefaultSet = true;
								}
							}
							$armime = explode("/", $mimetype);
							if ($nlskey != "none") {
								$files->copy_to_store($tempfile, $this->id, $nlskey."_file");
								$this->data->$nlskey->filesize = $this->getdata("file_size", $nlskey); 
								$this->data->$nlskey->mimetype = $mimetype;
								$this->data->mime["type"] = $armime[0];
								$this->data->mime["subtype"] = $armime[1];
							} else {
								$this->data->filesize = $this->getdata("file_size", "none"); 
								$this->data->mimetype = $mimetype;
								$this->data->mime["type"] = $armime[0];
								$this->data->mime["subtype"] = $armime[1];
							}
							$properties["mimetype"][] = Array(
								"type"		=> "'".AddSlashes($this->data->mime["type"])."'",
								"subtype"	=> "'".AddSlashes($this->data->mime["subtype"])."'"
							);
							unlink($tempfile);

						} else {
							$tempfile=false;
						}
					} 
					if ($this->store->is_supported("fulltext")) {
						$filetext = $this->GetPlainText("file", $nlskey);
						if ($filetext) {
							$count++;
							$properties["fulltext"] = $fulltext;
							$properties["fulltext"][$count][$nlskey]="'".AddSlashes($nlskey)."'";
							$properties["fulltext"][$count]["value"]="'".AddSlashes($this->store->format_for_fti(
									$filetext
									))."'";
						}
					}

				} else {
					debug("err: $this->error");
					break;
				}
			}
			if (!$this->error) {
					$this->save($properties);
			}
		}
	}
?>
