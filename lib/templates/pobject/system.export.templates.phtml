<?php
global $ARBeenHere;

  if ($this->CheckLogin("read") && !$ARCurrent->options["without_templates"]) {

		if (($this->newObject->arIsNewObject &&
				($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
				$parentobj->CheckLogin("add", $this->type)) ||
				(!$this->newObject->arIsNewObject && $this->CheckLogin("edit"))) {

				$orig_filestore=$this->store->get_filestore("templates");

				$new_filestore=$this->newObject->store->get_filestore("templates");
				/* 
					if we have to do a forced update, we have to remove all 
					files in the new_filestore first
				*/
				if ($ARCurrent->options["force"]) {
					$new_filestore->purge($this->newObject->id);
					unset($this->newObject->data->templates);
					unset($this->newObject->data->pinp);
					$save=1;
				}

				if ($this->data->pinp) {
					$templates=$this->data->pinp;
					reset($templates);
					display("\n	exporting/importing templates\n");
					while (is_array($templates) && (list($type, $functions)=each($templates))) {
						while (is_array($functions) && (list($function, $languages)=each($functions))) {
							while (is_array($languages) && (list($language, $file)=each($languages))) {
								display("	template [$type][$function][$language]\n");
								$tdata = $orig_filestore->read($this->id, "$type.$function.$language.pinp");

								if ($this->data->templates[$type][$function][$language]) {
									$default = true;
								} else {
									$default = false;
								}
								if ($ARCurrent->AXAction == "import") {
									unset($ARBeenHere[$this->newObject->path]);
									$this->newObject->call("system.save.layout.phtml",
												Array(
													"type" => $type,
													"function" => $function,
													"language" => $language,
													"template" => $tdata,
													"default" => $default
												));
								}

								if ($ARCurrent->AXAction != "import" ||
										$this->newObject->error) {
									/* we do not need to compile templates which
									are being exported. We just copy them */

									$save = 1;
									$this->newObject->data->pinp[$type][$function][$language] = $this->newObject->id;
									if ($default) {
										$this->newObject->data->templates[$type][$function][$language] = $this->newObject->id;
									}
									$new_filestore->write($tdata, $this->newObject->id, "$type.$function.$language.pinp");
								}

								if ($this->newObject->error) {
									display("	error: ".$this->newObject->error."(".$this->newObject->id.")\n");
									$this->newObject->error = "";
								}
							}
						}
					}
				}

				if ($save) {
					$this->newObject->store->save(
						$this->newObject->path,
						$this->newObject->type,
						$this->newObject->data,
						$this->newObject->properties,
						$this->newObject->vtype,
						$this->newObject->priority,
						$this->newObject->axflags);
				}
		}
 }
  
?>