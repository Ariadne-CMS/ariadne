<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
 
	******************************************************************/
	if ((($this->arIsNewObject && $this->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) && 
			$this->CheckConfig()) {
		if (!$this->arIsNewObject) {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
		    $this->data=@current($this->get(".","system.get.data.phtml"));
		} else {
			$this->data=new object;
		}

		$properties["value"][]["value"]="'".AddSlashes($value)."'";
		$this->data->name=$this->getdata("name","none");
		$properties["name"][]["value"]="'".AddSlashes($this->data->name)."'";
		$properties["text"][]["value"]="'".AddSlashes($this->data->name)."'";
		if ($this->arIsNewObject) {
			if ($login=$this->getdata("arNewFilename","none")) {
				if (strlen($login)>32) {
					$this->error=$ARnls["err:logintoolong"];
				} else {
					$criteria["login"]["value"]["="]="'".AddSlashes($login)."'";
					$result=$this->find("/system/users/",$criteria,"system.get.phtml");
					if ($result) {
						$this->error=sprintf($ARnls["err:loginexists"],$login);
					} else {
						if (ereg('\{.*\}',$login)) {
							$this->error=$ARnls["err:donotuseid"];
						} else {
							$this->data->login=$login;
							$properties["login"][0]["value"]="'".AddSlashes($login)."'";
						}
					}
				}
			} else {
				$this->error=$ARnls["err:mustenterlogin"];
			}
		}
		if ($language=$this->getdata("language","none")) {
			$this->data->language=$language;
		}
		if ($interface=$this->getdata("interface","none")) {
			$this->data->interface=$interface;
		}
		if ($editor=$this->getdata("editor","none")) {
			$this->data->editor=$editor;
		}
		if (!$this->error) {
			$this->save($properties);
			$this->ClearCache();
			if (!$this->error) {
				if (($groups=$this->getdata("groups","none")) && ($groups!=$this->data->groups)) {
					reset($groups);
					while (list($key, $group)=each($groups)) {
						if (!$this->data->groups[$group]) {
							$id = @current($this->get($group, "system.get.login.phtml"));
							$this->call( "system.set.group.phtml", Array(
								"action" => "add",
								"path" => $group,
								"id" => $id));
						}
					}
					@reset($this->data->groups);
					while (list($group, $value)=@each($this->data->groups)) {
						if (!in_array($group, $groups)) {
							$id = @current($this->get($group, "system.get.login.phtml"));
							$this->call("system.set.group.phtml", Array(
								"action" => "delete",
								"path" => $group,
								"id" => $id));
						}
					}
				} 
			}
		}
	}
?>