<?php
    /******************************************************************
     pphoto.phtml                                          Muze Ariadne
     ------------------------------------------------------------------
     Author: Muze (info@muze.nl)
     Date: 31 october 2002

     Copyright 2002 Muze

     This file is part of Ariadne.

     Ariadne is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published 
     by the Free Software Foundation; either version 2 of the License, 
     or (at your option) any later version.
 
     Ariadne is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with Ariadne; if not, write to the Free Software 
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  
     02111-1307  USA

    -------------------------------------------------------------------

     Class inheritance: 	pobject > pfile > pphoto
     Description:

       This is the class definition file of the pphoto class.

    ******************************************************************/

debug("pphoto: Load","object");
global $AR;
require_once($AR->dir->install."/lib/objects/pfile.phtml");

class pphoto extends pfile { // pphoto class definition

	function setFontStyle($name, $font, $pointsize, $color, $gravity="northwest", $rotate=0) {
		$this->arFontStyles[$name]["font"]=$font;
		$this->arFontStyles[$name]["pointsize"]=$pointsize;
		$this->arFontStyles[$name]["color"]=$color;
		$this->arFontStyles[$name]["gravity"]=$gravity;
		$this->arFontStyles[$name]["rotate"]=$rotate;
	}

	function getThumbSettings() {
		global $ARConfig;
		return $ARConfig->cache[$this->path]->thumb;
	}

	function convert($format="jpg", $quality=92, $background="white") {
		global $ARConfig, $ARnls;

		$this->set_context("convert");

		$result=false;
		if (preg_match('/[^a-z0-9+]/i',$format)) {
			$this->error=sprintf($ARnls["err:convillegalformat"],$format);
		} else {
			$ARConfig->photoStack[$this->id][]=" -format $format";
			$this->targetformat=$format;
			$quality=(int)$quality;
			$ARConfig->photoStack[$this->id][]=" -quality $quality";
			$ARConfig->photoStack[$this->id][]=" -orient top-left";
			$ARConfig->photoStack[$this->id][]=" -background $background";
			$ARConfig->photoStack[$this->id][]=" -flatten";
			$ARConfig->photoStack[$this->id][]=" {buildfile}";
			$result=true;
		}
		return $result;
	}

	function colorspace($colorspace="RGB") {
		global $ARConfig, $ARnls;
		$this->set_context("convert");
		$result = false;
		if (preg_match('/[a-z0-9+]/i', $colorspace)) {
			$ARConfig->photoStack[$this->id][]=" -colorspace $colorspace";
			$ARConfig->photoStack[$this->id][]=" {buildfile}";
			$result = true;
		} else {
			$this->error=sprintf($ARnls["err:convillegalformat"], $colorspace);
		}
		return $result;
	}

	function shadow($shadowcolor="black", $background="white", $opacity=80, $size=3, $posx="+5", $posy="+5") {
		global $ARConfig;
		$this->set_context("shadow");

		$ARConfig->photoStack[$this->id][]=" {buildfile} ( +clone -background $shadowcolor -shadow " . $opacity . "x" . $size . $posx . $posy . " ) +swap -background $background -layers merge +repage";
		return true;
	}

	function getExif( $sections = false, $arrays = true, $thumbnail = false, $nls = '') {
		if (!$nls) {
			$nls = $this->reqnls;
		}
		$f_store = $this->store->get_filestore("files");
		$file = "file";
		if ($f_store->exists($this->id, $nls."_$file")) {
			$file = $nls."_$file";
		}
		if (function_exists('exif_read_data')) {
			$tmpsrc = tempnam($this->store->get_config("files")."temp/", "photo");
			$f_store->copy_from_store($tmpsrc, $this->id, $file);
			$result=@exif_read_data($tmpsrc, $sections, $arrays, $thumbnail);
			@unlink($tmpsrc);
			$f_store->close();
		} else {
			$result['ERROR']='EXIF not supported by PHP';
		}
		return $result;
	}

	function identify($nls = '') {
		global $AR;
		if (!$nls) {
			$nls = $this->reqnls;
		}
		$f_store = $this->store->get_filestore("files");
		$file = "file";
		if ($f_store->exists($this->id, $nls."_$file")) {
			$file = $nls."_$file";
		}
		$tmpsrc = tempnam( $this->store->get_config("files")."temp/", "photo");
		$f_store->copy_from_store($tmpsrc, $this->id, $file);
		$execstring = $AR->IM->identify." ".$tmpsrc;
		$myarray = Array();
		$result = exec( $execstring, $myarray );
		@unlink( $tmpsrc );
		$f_store->close();
		return $myarray;
	}
	
	function scale($x, $y, $fillcolor=false, $keepaspect=true) {
		global $ARConfig;

		$this->set_context("mogrify");

		$x=(int)$x;
		$y=(int)$y;
		if( $keepaspect ) {
			$ARConfig->photoStack[$this->id][]=" -size ".$x."x".$y." -geometry ".$x."x".$y;
			$info=$this->getimageinfo();
			$aspectx=$x/$info[0];
			$aspecty=$y/$info[1];
			if ($aspectx>$aspecty) {
				$aspect=$aspecty;
			} else {
				$aspect=$aspectx;
			}
			$newx=$aspect*$info[0];
			$newy=$aspect*$info[1];
		} else {
			$ARConfig->photoStack[$this->id][]=" -size ".$x."x".$y."! -geometry ".$x."x".$y."!";
			$newx=$x;
			$newy=$y;
		}


		return Array("x" => $newx, "y" => $newy);
	}

	function density($density=300) {
		global $ARConfig;

		$this->set_context('convert');
		$density = (int) $density;
		$ARConfig->photoStack[$this->id][] = " -density $density";
		return true;
	}

	function rotate($degrees) {
		global $ARConfig;

		$this->set_context("mogrify");
		$degrees=(int)$degrees;

		$ARConfig->photoStack[$this->id][]=" -rotate ".$degrees;

		return true;
	}

	function border($width, $height, $color=false) {
		global $ARConfig;

		$this->set_context("mogrify");

		$width=(int)$width;
		$height=(int)$height;
		$ARConfig->photoStack[$this->id][]=" -border $width"."x".$height." ";
		if ($color!==false) {
			$ARConfig->photoStack[$this->id][]=" -bordercolor $color ";
		}
		return true;
	}

	function cut($x, $y) {
		global $ARConfig;

		$this->set_context("mogrify");

		$ARConfig->photoStack[$this->id][]=" -chop ".((int)$x)."x".((int)$y);
		return true;
	}

	function crop($width, $height, $x=0, $y=0) {
		global $ARConfig;

		$this->set_context("mogrify");

		$ARConfig->photoStack[$this->id][]=" -crop ".((int)$width)."x".((int)$height)."+".((int)$x)."+".((int)$y)."! +repage";
		return true;
	} 

	function strip() {
		global $ARConfig;

		$ARConfig->photoStack[$this->id][]=" -strip ";
		return true;
	}

	function interlace($interlace = 'plane') {
		global $ARConfig;
		switch( $interlace ) {
			case "none":
			case "line":
			case "plane":
			case "partition":
			case "JPEG":
			case "GIF":
			case "PNG":
			break;
			default:
				$interlace = "none";
			break;
		}
		$ARConfig->photoStack[$this->id][] = " -interlace $interlace ";
		return true;
	}

	function scaledown($x, $y, $fillcolor=false) {
		global $ARConfig;

		$this->set_context("mogrify");

		$x=(int)$x;
		$y=(int)$y;
		$ARConfig->photoStack[$this->id][]=" -size ".$x."x".$y." -geometry ".$x."x".$y.">";

		$info=$this->getimageinfo();
		if ( is_numeric($info[0]) && is_numeric($info[1]) && $info[0] && $info[1] ) {
			$aspectx=$x/$info[0];
			$aspecty=$y/$info[1];
			if ($aspectx>$aspecty) {
				$aspect=$aspecty;
			} else {
				$aspect=$aspectx;
			}
			$newx=$aspect*$info[0];
			$newy=$aspect*$info[1];
		} else {
			$newx = $x;
			$newy = $y;
		}
		return Array("x" => $newx, "y" => $newy);
	}

	function setComposeStyle($name, $method, $width, $height, $xoffset, $yoffset, $percentage, $resize, $gravity=false) {
		$this->arComposeStyles[$name]["method"]=$method;
		$this->arComposeStyles[$name]["width"]=$width;
		$this->arComposeStyles[$name]["height"]=$height;
		$this->arComposeStyles[$name]["xoffset"]=$xoffset;
		$this->arComposeStyles[$name]["yoffset"]=$yoffset;
		$this->arComposeStyles[$name]["percentage"]=$percentage;
		$this->arComposeStyles[$name]["resize"]=$resize;
		$this->arComposeStyles[$name]["gravity"]=$gravity;
	} 

	function compose( $target, $style="default", $blend = 0, $params=false, $nls = '') {
		global $ARConfig, $ARnls;

		$this->set_context("composite");

		$compose = "";

		$def = $this->arComposeStyles[$style];
		if (is_array($params)) {
			if (is_array($def)) {
				$def = array_merge($def, $params);
			} else {
				$def = $params;
			}
		}

		if( is_array($def) ) {
			$method = $def["method"];
			$width = $def["width"];
			$height = $def["height"];
			$xoffset = $def["xoffset"];
			$yoffset = $def["yoffset"];
			$percentage = $def["percentage"];
			$resize = $def["resize"];
			$gravity = $def["gravity"];
		}

		$geo = false;

		if( isset( $width ) && isset( $height ) ) {
			$width=(int)abs($width);
			$height=(int)abs($height);
			$compose .= " -geometry ".$width."x".$height;
			$geo = true;

		}
		if( isset( $xoffset ) && isset( $yoffset ) ) {
			if( !$geo ) {
				$compose .= " -geometry ";
				$geo = true;
			}
			$xoffset=(int)$xoffset;
			$yoffset=(int)$yoffset;
			if( $xoffset < 0 ) {
				$compose .= $xoffset;
			} else {
				$compose .= "+".$xoffset;
			}
			if( $yoffset < 0 ) {
				$compose .= $yoffset;
			} else {
				$compose .= "+".$yoffset;
			}
		}

		if( $percentage ) {
			$compose .= "%";
		}
		if( $resize == ">" || $resize == "<" ) {
			$compose .= $resize;
		}

		if ($method && preg_match('/[^a-z0-9+\-]/i',$method)) {
			$this->error=sprintf($ARnls["err:composeillegalmethod"],$method);
		} else {
			$targetobj = current($this->get($target, "system.get.phtml"));
			if( $targetobj->AR_implements("pphoto") ) {
				if ($method) {
					$compose .= " -compose ".$method;
				}
				if ($gravity) {
					$compose .= " -gravity $gravity ";
				}
				if( $blend ) {
					$compose .= " -blend ".$blend;
				}

				$targetid = $targetobj->id;
				if( $targetid ) {
					if (!$nls) {
						$nls = $targetobj->reqnls;
					}
					$f_store = $this->store->get_filestore("files");
					$file = "file";
					if ($f_store->exists($targetid, $nls."_$file")) {
						$file = $nls."_$file";
					}


					$tmpsrc = tempnam($this->store->get_config("files")."temp/", "photo");
					if(  substr( strtolower($tmpsrc), -4, 4 ) == ".tmp" ) {
						@unlink($tmpsrc);
						$tmpsrc = substr($tmpsrc, 0, -4 );
					}
					$tmpsrc .= ".photo";

					$ARConfig->photoTempFiles[$this->id][] = $tmpsrc;
					$ARConfig->photoTempFilesID[$this->id][] = $this->id;
					$ARConfig->photoTempFilesName[$this->id][] = $file;

					$tmpmysrc = tempnam($this->store->get_config("files")."temp/", "photo");
					if(  substr( strtolower($tmpmysrc), -4, 4 ) == ".tmp" ) {
						@unlink($tmpmysrc);
						$tmpmysrc = substr($tmpmysrc, 0, -4 );
					}
					$tmpmysrc .= ".photo";

					$ARConfig->photoTempFiles[$this->id][] = $tmpmysrc;
					$ARConfig->photoTempFilesID[$this->id][] = $targetid;
					$ARConfig->photoTempFilesName[$this->id][] = $file;

					$execbuf = $compose." ".$tmpmysrc." {buildfile} ";
					$ARConfig->photoStack[$this->id][] = $execbuf;
					//echo "<script> alert('compose ($execbuf)'); </script>\n";
					$this->set_context("build");
				}
			}
		}


		return true;
	}


	function annotate($text, $x, $y, $style="default") {
		global $ARConfig;

		// FIXME: There should be an option in the FontStyle that
		// defines the target character encoding.

		require_once($this->store->get_config("code")."modules/mod_unicode.php");
		$text=unicode::utf8toiso8859($text);
		$this->set_context("mogrify");

		$x=(int)$x;
		$y=(int)$y;

		// Get defaults
		$font = "";
		$pointsize = 12;
		$color = "black";

		if(($style!="") && ($def=$this->arFontStyles[$style])) {
			$font = $def["font"];
			$pointsize = $def["pointsize"];
			$color = $def["color"];
			$gravity = $def["gravity"];
			$rotate = $def["rotate"];
		}
		if($font!="") {
			$font_store=$this->store->get_filestore("files");
			if($fontid=$this->exists($font)) {
				$chkfontgrants = current($this->get($font, "system.get.phtml"));
				if($chkfontgrants->CheckLogin("read")) {
					$tmpfont=$this->store->get_config("files")."temp/".$fontid.".ttf";
					$font_store->copy_from_store($tmpfont, $fontid, "file");
					$ARConfig->photoStack[$this->id][]= " -font ".$tmpfont;
					$this->arClearList[]=$fontid.".ttf";
				}
			}
			$font_store->close();
		}
		$rotcmd = "";
		if($gravity!="") {
		  $gravcmd = "-gravity $gravity ";
		}
		if($rotate!=0) {
		  $rotcmd = "-rotate $rotate";
		}
		$ARConfig->photoStack[$this->id][]=" -pointsize $pointsize -fill $color $gravcmd $rotcmd -draw \"text $x,$y \xb6".addcslashes($text,ARESCAPE)."\xb6\"";
		return true;
	}

	function selectFrames() {
		global $ARConfig;
		$args = func_get_args();
		$readModifier = '';
		foreach( $args as $arg ) {
			$arg = preg_replace('/[^0-9\-,]+/','', (string) $arg );
			if (isset($arg)) {
				$readModifier .= $arg.',';
			}
		}
		if (isset($readModifier)) {
			$readModifier = '['.substr($readModifier, 0, -1).']';
			$ARConfig->photoReadModifier = $readModifier;
		}
	}

	function set_context($context) {
		global $AR, $ARConfig;
		$unknown = false;

		if( !$ARConfig->photoContext[$this->id] ) {
			$ARConfig->photoContext[$this->id] = $context;
		}

		if( $ARConfig->photoContext[$this->id] != $context ) {
			$needOutputFile = false;
			if( $ARConfig->photoContext[$this->id] == "mogrify" ) {
				$contextexecutable = $AR->IM->mogrify;
			} elseif( $ARConfig->photoContext[$this->id] == "composite" ) {
				$contextexecutable = $AR->IM->composite;
				$needOutputFile = true;
			} elseif( $ARConfig->photoContext[$this->id] == "convert" ) {
				$needOutputFile = true;
				$contextexecutable = $AR->IM->convert;
			} elseif( $ARConfig->photoContext[$this->id] == "shadow") {
				$needOutputFile = true;
				$contextexecutable = $AR->IM->convert;
			} else {
				$unknown = true; // This should NOT happen
			}
			if( !$unknown && is_array($ARConfig->photoStack[$this->id])) {
				$image="";
				foreach($ARConfig->photoStack[$this->id] as $value){
					// target file needs to be on the end of the command
					$image.=$value;
				}
				if ($needOutputFile === true) {
					$image .= ' {targetfile}';
				}
				if ( isset($ARConfig->photoReadModifier) ) {
					$image = str_replace('{buildfile}', '{buildfile}'.$ARConfig->photoReadModifier, $image );
					unset( $ARConfig->photoReadModifier );
				}
				$ARConfig->photoCommandStack[$this->id][] = $contextexecutable.$image;
				unset($ARConfig->photoStack[$this->id]);
				if( $context == "build" ) {
					unset($ARConfig->photoContext[$this->id]);
				} else {
					$ARConfig->photoContext[$this->id] = $context;
				}
			}
		}
		return;
	}


	function build($nls = '') {
		global $AR, $ARConfig, $ARCurrent, $ARnls;
		if (!$nls) {
			$nls = $this->reqnls;
		}
		$f_store = $this->store->get_filestore("files");
		$file = "file";
		if ($f_store->exists($this->id, $nls."_$file")) {
			$file = $nls."_$file";
		}
		if (!$this->data->toolarge) {
			if (!$ARCurrent->arDontCache && $ARCurrent->cachetime!=-1 && $this->CheckPublic('read')) {
				$ARCurrent->cachetime=-2; // set cache to onchange
			}
			$this->set_context("build");
			$result=false;
			$failed=false;
			if (!$this->error) {
				$tmpsrc = tempnam($this->store->get_config("files")."temp", "photo");
							if(  substr( strtolower($tmpsrc), -4, 4 ) == ".tmp" ) {
							  @unlink($tmpsrc);
							  $tmpsrc = substr($tmpsrc, 0, -4 );
							}
				$tmpsrc .= ".photo";
				$f_store->copy_from_store($tmpsrc, $this->id, $file);

				if( is_array($ARConfig->photoTempFiles[$this->id]) && is_array($ARConfig->photoTempFilesID[$this->id])) {
					foreach( $ARConfig->photoTempFiles[$this->id] as $key => $tempfile){
						debug("Copying ".$ARConfig->photoTempFilesName[$this->id][$key]." to $tempfile");
						$f_store->copy_from_store($tempfile, $ARConfig->photoTempFilesID[$this->id][$key], $ARConfig->photoTempFilesName[$this->id][$key]);
					}
				}

				$f_store->close();

				if (chdir($this->store->get_config("files").'temp/')) {
				debug("build: 1");
					if (is_array($ARConfig->photoCommandStack[$this->id])) {
					debug("build: 2");
						foreach( $ARConfig->photoCommandStack[$this->id] as $exec_string){
							debug("exec_string: $exec_string");
							$exec_string = str_replace('{buildfile}', $tmpsrc, $exec_string);

							if (strpos($exec_string, "{targetfile}")) {
								$target = str_replace(".photo", '.' . $this->targetformat, $tmpsrc);
								$exec_string = str_replace('{targetfile}', $target, $exec_string);
								$tmpsrc = $target;
							} else {
								$exec_string .= " ".$tmpsrc;
							}

							// Split the total command line to the command and the args so we can escape the args.
							$cmd_array = explode(" ", $exec_string, 2);

							// Backwards compatibility quirk: this is needed to keep things working for users that used escaped colors
							$cmd_array[1] = preg_replace("|\\\#|", "#", $cmd_array[1]);

							preg_match("|\xb6(.*?)\xb6|", $cmd_array[1], $matches);
							$text = $matches[1];
							$cmd_array[1] = preg_replace("|\xb6.*?\xb6|", "\xb6\xb6", $cmd_array[1]);

							// Escaped shell command line here.
							$exec_string = $cmd_array[0] . " " . escapeshellcmd($cmd_array[1]);
//							$exec_string = str_replace("\xb6", "'", $exec_string);
							$exec_string = preg_replace("|\xb6.*?\xb6|", "'" . $text . "'", $exec_string);

							debug("executing ($exec_string)");
							system($exec_string,$failed);
							if($failed){
								debug("exec failed: $failed");
								break;
							}
							// echo( $exec_string."<br>");
						}
					}
					if (!$failed) {
						$destsrc = $tmpsrc;

						debug("pphoto: destination file is $destsrc");
						$result = file_get_contents($destsrc);
						
						@unlink($tmpsrc);
						@unlink($destsrc);
					} else {
						$this->error=sprintf($ARnls["err:noimagemagick"],$exec_string);
					}
				} else {
					$this->error=sprintf($ARnls["err:changetempdirfailed"],$this->store->get_config("files"));
				}
			}
			if( is_array($ARConfig->photoTempFiles[$this->id])) {
				foreach($ARConfig->photoTempFiles[$this->id] as $tempfile){
					@unlink($tempfile);
				}
			}
			unset( $ARConfig->photoTempFiles[$this->id] );
			unset( $ARConfig->photoTempFilesID[$this->id] );
			unset( $ARConfig->photoTempFilesName[$this->id] );
			unset( $ARConfig->photoCommandStack[$this->id] );
		} else {
			$this->error='Picture is too large to handle.';
			$result=false;
		}
		if ($this->error) {
			echo $this->error;
		}
		return $result;
	}

	function cleanup() {
	global $ARConfig;
		if (is_array($this->arClearList)) {
			foreach ( $this->arClearList as $value) {
				if (!preg_match("/[^a-z0-9\._-]/i",$value)) {
					@unlink($value);
				}
			}
		}
		unset($ARConfig->photoStack[$this->id]);
	}

	function getimageinfo(&$extrainfo=false, $nls = '') {
		$tmpsrc = tempnam($this->store->get_config("files")."temp/", "photo");
		if (!$nls) {
			$nls = $this->reqnls;
		}
		$f_store = $this->store->get_filestore("files");
		$file = "file";
		if ($f_store->exists($this->id, $nls."_$file")) {
			$file = $nls."_$file";
		}
		$f_store->copy_from_store($tmpsrc, $this->id, $file);
		if ($extrainfo!==false) {
			$result=getimagesize($tmpsrc, $extrainfo);
		} else {
			$result=getimagesize($tmpsrc);
		}
		@unlink($tmpsrc);
		$f_store->close();
		return $result;
	}

	function _convert($format="", $quality=92, $background="white") {
		return $this->convert($format, $quality, $background);
	}

	function _shadow($shadowcolor="black", $background="white", $opacity=80, $size=3, $posx="+5", $posy="+5") {
		return $this->shadow($shadowcolor, $background, $opacity, $size, $posx, $posy);
	}

	function _colorspace($colorspace="RGB") {
		return $this->colorspace($colorspace);
	}

	function _scale($x, $y, $fillcolor=false, $keepaspect=true) {
		return $this->scale($x, $y, $fillcolor, $keepaspect);
	}

	function _rotate($degrees) {
		return $this->rotate($degrees);
	}

	function _scaledown($x, $y, $fillcolor=false) {
		return $this->scaledown($x, $y, $fillcolor);
	}

	function _getThumbSettings() {
		return $this->getThumbSettings();
	}

	function _setFontStyle($name, $font, $pointsize, $color, $gravity="northwest", $rotate=0) {
		return $this->setFontStyle($name, $font, $pointsize, $color, $gravity, $rotate);
	}

	function _annotate($text, $x, $y, $style="default") {
		return $this->annotate($text, $x, $y, $style);
	}

	function _setComposeStyle($name, $method, $width, $height, $xoffset, $yoffset, $percentage, $resize) {
		return $this->setComposeStyle($name, $method, $width, $height, $xoffset, $yoffset, $percentage, $resize);
	}

	function _compose( $target, $style="default", $blend = 0, $params = false, $nls = '' ) {
		return $this->compose( $target, $style, $blend, $params, $nls );
	}

	function _border($width, $height, $color=false) { 
		return $this->border($width, $height, $color);
	}

	function _cut($x, $y) {
		return $this->cut($x, $y);
	}
	
	function _crop($width, $height, $x=0, $y=0) {
		return $this->crop($width, $height, $x, $y);
	}

	function _strip() {
		return $this->strip();
	}

	function _interlace($interlace="plane") {
		return $this->interlace($interlace);
	}

	function _build($nls = '') {
		return $this->build($nls);
	}

	function _cleanup() {
		return $this->cleanup();
	}

	function _density($density=300) {
		return $this->density($density);
	}

	function _getimageinfo(&$extrainfo=false, $nls='') {
			return $this->getimageinfo($extrainfo, $nls);
	}
	
	function _identify($nls = '') {
		return $this->identify($nls);
	}
	
	function _getExif( $sections = false, $arrays = true, $thumbnail = true, $nls = '') {
		return $this->getExif( $sections, $arrays, $thumbnail, $nls);
	}
	
	function _selectFrames() {
		$args = func_get_args();
		return call_user_func_array( array( $this, 'selectFrames'), $args );
	}
	
} // end of pphoto class definition
?>
