<?php

debug("pphoto: Load","object");
include_once($this->code."objects/pfile.phtml");

class pphoto extends pfile { // definitie class

	function setFontStyle($name, $font, $pointsize, $color) {
		$this->arFontStyles[$name]["font"]=$font;
		$this->arFontStyles[$name]["pointsize"]=$pointsize;
		$this->arFontStyles[$name]["color"]=$color;
	}

	function getThumbSettings() {
		global $ARConfig;
		return $ARConfig->cache[$this->path]->thumb;
	}

	function convert($format="jpg") {
		global $ARConfig;

		$result=false;
		if (eregi('[^a-z0-9+]',$format)) {
			$this->error="Convert called with illegal format ($format)";
		} else {
			$ARConfig->photoStack[$this->id][]=" -format $format";
			$this->targetformat=$format;
			$result=true;
		}
		return $result;		
	}

	function scale($x, $y, $fillcolor=false, $image="") {
		global $ARConfig;

		$x=(int)$x;
		$y=(int)$y;
		$ARConfig->photoStack[$this->id][]=" -geometry ".$x."x".$y;

		return true;
	}

	function annotate($text, $x, $y, $style="default", $image="") {
		global $ARConfig;

		$x=(int)$x;
		$y=(int)$y;

		// Get defaults
		$font = "";
		$pointsize = 12;
		$color = "black";

		if(($style!="") && ($def=$this->arFontStyles[$style])) {
			$font = $def["font"];
			$pointsize = $def["pointsize"];
			$color = $def["color"];
		}
		if($font!="") {
			$font_store=$this->store->get_filestore("files");
			if($fontid=$this->exists($font)) {
				$chkfontgrants = @current($this->get($font, "system.get.phtml"));
				if($chkfontgrants->CheckLogin("read")) {
					$tmpfont=$this->store->files."temp/".$fontid.".ttf";
					$font_store->copy_from_store($tmpfont, $fontid, "file");
					$ARConfig->photoStack[$this->id][]= " -font ".$tmpfont;
					$this->arClearList[]=$fontid.".ttf";
				}
			}
			$font_store->close();
		}
		$ARConfig->photoStack[$this->id][]=" -pointsize $pointsize -fill $color -draw 'text $x,$y \"".addslashes($text)."\"'";
		return true;
	}

	function build() {
		global $AR, $ARConfig;

		$result=false;
		$failed=false;
		if (!$this->error) {
			$tmpsrc=$this->store->files."temp/".$this->id;
			$f_store=$this->store->get_filestore("files");
			$f_store->copy_from_store($tmpsrc, $this->id, "file");
			$f_store->close();
			if (chdir($this->store->files.'temp/')) {
				if (is_array($ARConfig->photoStack[$this->id])) {
					$image="";
					reset($ARConfig->photoStack[$this->id]);
					while (list($key, $value)=each($ARConfig->photoStack[$this->id])) {
						$image.=$value;
					}
					$exec_string=$AR->IM->mogrify.$image." $this->id";
					system($exec_string,$failed);		
				}
				if (!$failed) {
					ob_start();
					if ($this->targetformat && !eregi("[^0-9a-z\._-]",$this->targetformat)) {
						$destsrc=$tmpsrc.".".$this->targetformat;
					} else {
						$destsrc=$tmpsrc;
					}
					readfile($destsrc);
					$result=ob_get_contents();
					ob_end_clean();
					@unlink($tmpsrc);
					@unlink($destsrc);
				} else {
					$this->error="Could not run ImageMagick scale program (mogrify)<br>\n(".$exec_string.")";
				}
			} else {
				$this->error="Could not changedir to ".$this->store->files."temp/ ";
			}
		}
		if ($this->error) {
			echo $this->error;
		}
		return $result;
	}

	function cleanup() {
		if (is_array($this->arClearList)) {
			reset($this->arClearList);
			while (list($key, $value)=each($this->arClearList)) {
				if (!eregi("[^a-z0-9\._-]",$value)) {
					@unlink($value);
				}
			}
		}
	}

	function _convert($format="", $image="") {
		return $this->convert($format, $image);
	}

	function _scale($x, $y, $fillcolor=false, $image="") {
		return $this->scale($x, $y, $fillcolor, $image);
	}

	function _getThumbSettings() {
		return $this->getThumbSettings();
	}

	function _setFontStyle($name, $font, $pointsize, $color) {
		return $this->setFontStyle($name, $font, $pointsize, $color);
	}

	function _annotate($text, $x, $y, $style="default", $image="") {
		return $this->annotate($text, $x, $y, $style, $image);
	}

} // end class pphoto
?>