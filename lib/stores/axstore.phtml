<?php
// general objectstore functions

define("AX_NORMAL", 0);
define("AX_DUMMY", 1);
define("AX_WITHOUT_DATA", 2);
define("AX_WITHOUT_TEMPLATES", 4);
define("AX_WITHOUT_FILES", 8);
define("AX_VERSION", 3);

class axstore {

	var $nodes;
	var $objects;
	var $lastobjectid;
	var $header;

	/****************
		axstore constructor

		config contains:
			- ['database']			=> name of the ax file
			- ['code']				=> ariadne 'code base'
			- ['files']				=> where to find a suitable tempdirectory
			- ['writeable']			=> open database to write to (export)

	*****************/

	function __construct($path, $config) {
		debug("axstore($path, $config)", "store");
		include_once($config["code"]."modules/mod_tar.phtml");

		$this->database=$config["database"];

		$this->writeable=$config["writeable"];
		$this->temp=$config["temp"];
		$this->files=$config["temp"];
		$this->code=$config["code"];

		$this->tar = new mod_tar($config["tar"]);

		// create tempdir (and do some windows compat magic)
		$this->tempdir=tempnam($this->temp, "axtemp");
		@unlink($this->tempdir);

		debug("axstore::creating tempdir (".$this->tempdir.")", "store");
		if (@mkdir($this->tempdir, 0777)) {
			if (file_exists($this->database)) {
				debug("axstore::extracting database (".$this->database.")", "store");
				if ($this->tar->extract($this->database, " ", $this->tempdir)) {
					if (!file_exists($this->tempdir."/header.data")) {
						$this->header["version"] = 1;
					} else {
						$fp = fopen($this->tempdir."/header.data", "rb");
						$header="";
						while (!feof($fp)) {
							$header.=fread($fp, 1000);
						}
						fclose($fp);
						$this->header = unserialize($header);
					}
					if (file_exists($this->tempdir."/objects.data")) {
						// now we have found our objects.data, lets make an index of it
						debug("axstore::loading (".$this->tempdir."/objects.data)", "store");
						$this->ofile=fopen($this->tempdir."/objects.data", "rb");
						if ($this->ofile) {
							$currentoffset=ftell($this->ofile);
							while ($rline=fgets($this->ofile, 3000)) {
								$line=trim($rline);
								while (strlen($rline)==3000-1) {
									$rline=fgets($this->ofile, 3000);
									$line.=trim($rline);
								}
								$data=explode("&", $line);
								if (sizeof($data)>=7) {
									$class = $data[1];
									if ($subcpos = strpos($class, '.')) {
										$class = substr($class, 0, $subcpos);
									}
									include_once($this->code."objects/".$class.".phtml");
									// check if this is a link (does the object already exist?)

									if (!$this->objects[$data[0]]) {

										$object=new $class;
										$object->id=(int)$data[0];
										$object->type=$data[1];
										$object->vtype=$data[2];
										$object->lastchanged=(int)$data[3];
										$object->storage=new object;
										$object->storage->fp=$this->ofile;
										$object->storage->offset=$currentoffset;
										$object->refcount=1;
										$this->objects[$object->id]=$object; // copy object
									}

									if ($this->lastobjectid < $object->id) {
										$this->lastobjectid=$object->id;
									}


								} else {
									print_r($data);
									echo "warning: corrupted data found in objects.data\n";
								}
								$currentoffset=ftell($this->ofile);
							}

							debug("axstore::loading (".$this->tempdir."/nodes.data", "store");
							// read nodes data
							$fp_nodes=fopen($this->tempdir."/nodes.data", "rb");
							if ($fp_nodes) {
								while ($data=fgets($fp_nodes, 3000)) {
									$data=explode("&", $data);
									$node=new object;
									$node->path=$data[0];
									$node->nextid=$data[2];
									$node->priority=$data[3];
									/* axflags */
									$node->axflags=chop($data[4]);
									$this->nodes[$node->path]=$node;
									$this->nodes[$node->path]->object=$this->objects[$data[1]];

									// create references under parents to their
									// children
									$parent=$this->make_path($node->path, "..");

									if (($parent!=$node->path) && is_object($this->nodes[$parent])) {
										// since php kills all local variables when we
										// leave local scope (even when there is an
										// refcount > 1) we have to address our
										// objects and nodes via $this->...
										$this->nodes[$parent]->children[$node->path]=$this->nodes[$node->path];
									}
								}
								fclose($fp_nodes);
								ksort($this->nodes);	// sort nodes list
							} else {
								$this->error="Could not open nodes.data";
							}
						} else {
							$this->error="Could not open objects.data within ax file for reading";
						}
					} else {
						$this->error="Possibly supplied an corrupted ax file: could not find ".$this->tempdir."/objects.data";
					}

					if (!$this->error && file_exists($this->tempdir."/templates.tgz")) {
						if (!$this->tar->extract($this->tempdir."/templates.tgz", "", $this->tempdir)) {
							$this->error="Could not untar templates archive: ".$this->tar->error;
						}
					}

					if (!$this->error && file_exists($this->tempdir."/files.tgz")) {
						if (!$this->tar->extract($this->tempdir."/files.tgz", "", $this->tempdir)) {
							$this->error="Could not untar files archive: ".$this->tar->error;
						}
					}

					if (!$this->error) {
						/* create a temporary 'temp' directory */
						@mkdir($this->files."temp/", 0755);
					}
				} else {
					$this->error="Could not extract database: ".$this->tar->error;
				}
			} else 
			if ($this->writeable) {
				// create new database...

			} else {
				$this->error="Could not find database (".$this->database.")";
			}
		} else {
			$this->error="Could not create tempdir";
		}

		debug("axstore [end]", "store");
		return $result;
	}


	function get($path) {
		$node = $this->nodes[$path];
		if ($node) {
			$result["list"][0]=$node;
		}
		return $result;
	}

	function ls($path) {
		$result["list"]=&$this->nodes[$path]->children;
		return $result;
	}

	/* FIXME: implement this */
	function AR_implements($type, $implements) {
		if ($type == $implements) {
			$result = 1;
		} else {
			$result = 0;
		}
		return $result;
	}

	function get_config($field) {
		debug("axstore::get_config($field)", "store");
		$result = $this->$field;
		debug("axstore::get_config: end", "all");
		return $result;
	}

	function is_supported($feature) {
	/**********************************************************************************
		This function takes as argument a feature description and returns
		true if this feature is supported and false otherwise

		returns true for fulltext to enable the workaround with fulltext bugs
	**********************************************************************************/
		$result = false;
		switch($feature) {
			case 'fulltext':
				$result = true;
			break;
		}
		return $result;
	}

	/*
		$node[path]->children[path]->children[path]
	*/
	function _recurse_find($node, &$result, &$criteria, &$limit, &$offset) {
		if (!$criteria["object"]["type"]["="] || $criteria["object"]["type"]["="]=="'".$node->object->type."'") {
			if (!$criteria["object"]["vtype"]["="] || $criteria["object"]["vtype"]["="]=="'".$node->object->vtype."'") {
				$found=1;
				if (is_array($criteria)) {
					$found=0;
					$this->_load_object_data($node->object);
					@reset($criteria);
					while (list($criteria_table_key, $criteria_table)=each($criteria)) {
						while (list($criteria_table_prop_key, $criteria_table_prop)=each($criteria_table)) {
								while (list($criteria_condition , $criteria_condition_value)=each($criteria_table_prop)) {
									switch ($criteria_condition) {
										case '=':
											@reset($node->object->properties);
											$found=false;
											while (!$found && (list(,$propvalue)=@each($node->object->properties[$criteria_table_key]))) {
												if ($criteria_condition_value==$propvalue[$criteria_table_prop_key]) {
													$found=true;
												}
											}
										break;
									}
								}
						}
					}
					$this->_free_object_data($node->object);
				}
				if ($found && $offset--<=0 && ($limit-->0 || $limit < 0)) {
					$result[$node->path] = $this->nodes[$node->path];
				}
			}
		}
		if (is_array($node->children)) {
			reset($node->children);
			while (($limit>0 || $limit < 0) && (list(,$child)=each($node->children))) {
				$this->_recurse_find($child, $result, $criteria, $limit, $offset);
			}
		}
	}

	function find($path, $criteria, $limit=100, $offset=0) {
		if ($this->nodes[$path]) {
			if ( $limit == 0 ) { $limit = -1; }
			$this->_recurse_find($this->nodes[$path], $result["list"], $criteria, $limit, $offset);
		}
		return $result;
	}


	function list_paths($path) {
		if ($this->nodes[$path]) {
			$id=$this->nodes[$path]->object->id;
			$refcount=$this->objects[$id]->refcount;
			@reset($this->nodes);
			while ($refcount && (list($path, )=each($this->nodes))) {
				if ($this->nodes[$path]->object->id==$id) {
					$refcount--;
					$result[]=$path;
				}
			}
		}
		return $result;
	}

	function purge($path) {
		if ($this->nodes[$path]) {
			$id=$this->nodes[$path]->object->id;
			$refcount=$this->objects[$id]->refcount;
			@reset($this->nodes);
			while ($refcount && (list($path, )=each($this->nodes))) {
				if ($this->nodes[$path]->object->id==$id) {
					$parent=$this->make_path($path,"..");
					// delete parent's reference
					unset($this->nodes[$parent]->children[$path]);
					$refcount=--$this->nodes[$path]->object->refcount;
					unset($this->nodes[$path]);
					if ($refcount<=0) {
						$refcount=0;
						unset($this->objects[$id]);	// eliminate
					}

				}
			}
			$result=1;
		}
		return $result;
	}

	function link($source, $destination) {
	/**********************************************************************

		Link adds an extra path to an already existing object. It has two
	arguments: $source and $destination. $source is an existing path of
	an object, $destination is the new path. $destination must not already
	exist.

	$destination should always start and end with a '/'.

	**********************************************************************/

		debug("axstore::link($source,$destination)","store");
		$this->error="";
		$edestination=AddSlashes($destination);
		$esource=AddSlashes($source); 
		$parent=$this->make_path($destination, "..");
		$eparent=AddSlashes($parent);
		if ($this->exists($destination)) {
			$this->error="$destination already exists, cannot overwrite.";
			debug("axstore::link: ERROR: ".$this->error,"store");
			$result=false;
		} else if (!$this->exists($parent)) {
			$this->error="$parent does not exist, cannot link.";
			debug("axstore::link: ERROR: ".$this->error,"store");
			$result=false;
		} else { 
			if (preg_match("/\{([0-9]):id\}/",$destination,$match)) {
				$subid=$this->nextid($parent);
				if ($match[1]) {
					$subid=substr("000000000".$subid,-(intval($match[1])));
				}
				$destination=preg_replace("/\{[0-9]:id\}/",strval($subid),$destination);
				$edestination=AddSlashes($destination);
				debug("axstore::link: new destination: $destination ($subid)","all");
			}
			$id=$this->exists($source);
			if ($id) {
				$node=new object;
				$node->path=$destination;
				$node->object=$this->objects[$id];
				$this->nodes[$destination]=$node;
				$this->nodes[$parent]->children[$destination]=$this->nodes[$destination];
				debug("axstore::link: end","all");
				$result=$destination;
			} else {
				$result=false;
				debug("axstore::link: end (no $source)","store");
			}
		}
		return $result;
	}


	function delete($path) {
	/**********************************************************************

		This function deletes the path given. If this is the last path pointing
	to an object, the object will be purged instead.

	$path should always start and end with a '/'.

	**********************************************************************/

		$this->error="";
		if ($this->nodes[$path]) {
			if ($this->nodes[$path]->object->refcount<=1) { // only one path for this object
				$result=$this->purge($path); // therefore purge the object.
			} else { // only delete the given path
				if ($this->nodes[$path]->parent) {
					// delete parent's reference
					unset($this->nodes[$this->nodes[$path]->parent]->children[$path]);

					$this->nodes[$path]->object->refcount--;
					unset($this->node[$path]);
					$result=1;
				}
			}
		}
		return $result;
	}


	function call($template, $args, $objects, $options = array() ) {
		$result = Array();
		if (is_array($objects["list"])) {
			reset($objects["list"]);
			while (list(,$node)=each($objects["list"])) {
				$this->_load_object_data($node->object);
				$node->object->init($this, $node->path, $node->object->data);
				$node->object->runtime_ref++;
				$parent=$this->make_path($node->path, "..");
				if ($parent=="/") {
					$parent="..";
				}
				$node->object->parent=$parent;
				$node->object->axflags=$node->axflags;
				$node->object->priority=$node->priority;
				if ( isset($options['usePathAsKey']) && $options['usePathAsKey'] ) {
					$result[$node->path] = $node->object->call($template, $args);
				} else {
					$result[] = $node->object->call($template, $args);
				}
				$node->object->runtime_ref--;
				$this->_free_object_data($node->object);
			}
		}

		return $result;
	}

	function info($objects) {
		if (is_array($objects["list"])) {
			reset($objects["list"]);
			while (list(,$node)=each($objects["list"])) {
				$this->_load_object_data($node->object);
				$parent=$this->make_path($node->path, "..");
				if ($parent=="/") {
					$parent="..";
				}
				$node->object->parent=$parent;
				$row["path"] = $node->path;
				$row["parent"] = $parent;
				$row["priority"] = $node->priority;
				$row["data"] = $node->object->data;
				$row["id"] = $node->object->id;
				$row["type"] = $node->object->type;
				$row["vtype"] = $node->object->vtype;
				$row["lastchanged"] = $node->object->lastchanged;

				$result[] = $row;
				$this->_free_object_data($node->object);
			}
		}

		return $result;
	}

	function newobject($path, $parent, $type, $data, $id=0, $lastchanged=0, $vtype="", $size=0, $priority=0) {
		$class = $type;
		if ($subcpos = strpos($type, '.')) {
			$class = substr($type, 0, $subcpos);
			$vtype = $class;
		}
		if (!class_exists($class)) {
			include_once($this->code."objects/".$class.".phtml");
		}

		$object=new $class;
		$object->init($this, $path, $data);
		$object->type=$type;
		$object->parent=$parent;
		$object->id=(int)$id;
		$object->lastchanged=(int)$lastchanged;
		$object->vtype=$vtype;
		$object->size=(int)$size;
		$object->priority=(int)$priority;
		return $object;
	}

	function nextid($path) {
		$result=++$this->nodes[$path]->nextid;
		return $result;
	}

	function set_nextid($path, $newid) {
		if ($newid > $this->nodes[$path]->nextid) {
			$this->nodes[$path]->nextid = $newid;
		}
		return $this->nodes[$path]->nextid;
	}

	function get_nextid($path) {
		return $this->nodes[$path]->nextid;
	}

	function exists($path) {
		if ($this->nodes[$path]) {
			$result=$this->nodes[$path]->object->id;
		} else {
			debug("axstore::exists($path) false", "store");
		}
		return $result;
	}

	function save($path, $type, $data, $properties="", $vtype="", $priority=false, $axflags=AX_NORMAL) {
		//echo "axstore::save($path, $type, [data], [properties], $vtype, $priority)\n";
		$epriority = (int)$priority;
		$this->error="";
		if ($path!="/") {
			$parent=$this->make_path($path, "..");
		} else {
			$parent="..";
		}
		if (preg_match("/\{([0-9]):id\}/",$path,$match)) { 
			// if the last part of a path matches something like {2:id} this
			// part will automatically create a new number, unique in this directory, and fill it in.
			$subid=$this->nextid($parent);
			if ($match[1]) { 
				$subid=substr("000000000".$subid,-(intval($match[1])));
			}
			$path=preg_replace("/\{[0-9]:id\}/",strval($subid),$path);
		}
/*
		if (is_array($properties)) {
			$edq = AddSlashes('"');
			$esq = AddSlashes("'");
			foreach ($properties as $property => $property_records) {
				foreach ($property_records as $record_id => $record) {
					foreach ($record as $column => $column_data) {
						$column_data = substr($column_data, 1, -1);
						$properties[$property][$record_id][$column] = str_replace($edq, '"', str_replace($esq, "'", $column_data));
					}
				}
			}

		}
*/
		if ($id=$this->exists($path)) { //update
			$this->_load_object_data($this->objects[$id]);
			$object=$this->objects[$id];
			$object->type=$type;
			if ($vtype) { // only change/save vtype if it is explicitly set
				$object->vtype=$vtype;
			}
			$object->data=$data;
			$object->lastchanged=time();
			$this->_set_object_properties($properties, $object);
			$this->nodes[$path]->axflags=$axflags;
			$this->nodes[$path]->priority=$epriority;

			// save object into the database
			$this->_save_object($path, $object);

			$this->_free_object_data($object);

		} else { // insert new
			if ($vtype=="") { // if vtype is not set, it defaults to type for new objects
				if ($subcpos = strpos($type, '.')) {
					$vtype = substr($type, 0, $subcpos);
				} else {
					$vtype=$type; 
				}
			}
			$class = $type;
			if ($subcpos = strpos($type, '.')) {
				$class = substr($type, 0, $subcpos);
			}
			include_once($this->code."objects/".$class.".phtml");
			$object=new $class;	
			$object->id=++$this->lastobjectid;
			$object->refcount=1;

			$object->type=$type;
			$object->vtype=$vtype;
			$object->data=$data;
			$object->lastchanged=time();
			$this->_set_object_properties($properties, $object);

			$this->objects[$object->id]=$object;

			$node=new object;
			$node->path=$path;
			$node->priority=$epriority;
			$node->axflags=$axflags;

			$this->nodes[$path]=$node;
			$this->nodes[$path]->object=$this->objects[$object->id];

			ksort($this->nodes);	// resort nodes array

			if ($this->nodes[$parent]) {
				$this->nodes[$parent]->children[$path]=$this->nodes[$path];
				ksort($this->nodes[$parent]->children); // sort list
			}

			$this->_save_object($path, $this->objects[$object->id]);

			$this->_free_object_data($this->objects[$object->id]);
		}
		return $result;
	}

	// private function which will set $properties to the given $object
	// it assumes that the original properties are already loaded into
	// the object
	function _set_object_properties($properties, $object) {
		if (is_array($properties) && ($object)) {
			while (list($property, $property_set)=each($properties)) {
				unset($object->properties[$property]);
				if (is_array($property_set)) {
					foreach ($property_set as $prop_index => $record) {
						foreach ($record as $field => $value) {
							if ($value[0] === "'") {
								$value = substr($value, 1, -1);
								$value = StripSlashes($value);
								$value = "'$value'";
							}
							$object->properties[$property][$prop_index][$field]=$value;
						}
					}
				}
			}
		}
	}

	function load_properties($object) {
		if ($object) {
			$properties = $this->objects[$object]->properties;
			if (is_array($properties)) {
				foreach ($properties as $name => $values) {
					if ($value=$this->load_property($name, $values)) {
						$result[$name]=$value;
					}
				}
			}
		}
		return $result;
	}

	function load_property($object, $property, $values="") {
		debug("axstore::load_property($object, $property, [values])","all");

		if ($object) {
			$currProp=0;
			foreach ($property as $prop_key => $prop) {
				reset($prop);
				while (is_array($prop) && (list($name,$val)=each($prop)) ) {
					if (($name!="object")&&(!is_int($name))) {
						if (is_string($val)) {
							if ($this->header["version"] < 1.5) {
								$result[$currProp][$name] = $val;
							} else {
								$result[$currProp][$name]="'".AddSlashes(substr($val, 1, -1))."'";
							}
						} else {
							$result[$currProp][$name]=$val;
						}
					}
				}
				$currProp++;
			}
		}
		debug("axstore::load_property: end","all");
		return $result;
	}


	function make_path($curr_dir, $path) {
	/**********************************************************************
 
		This function creates an absolute path from the given starting path
	($curr_dir) and a relative (or absolute) path ($path). If $path starts
	with a '/' $curr_dir is ignored. 
	$path must be a string of substrings seperated by '/'. each of these 
	substrings may consist of charachters and/or numbers. If a substring
	is "..", it and the previuos substring will be removed. If a substring
	is "." or "", it is removed. All other substrings are then concatenated
	with a '/' between them and at the start and the end. This string is 
	then returned.

	**********************************************************************/

		$this->error="";
		if (substr($path,0,1)=="/") {
			$result="/";
			$path=substr($path, 1);
		} else {
			$result=$curr_dir;
		}
		if ($path) {
			$splitpath=explode("/", $path);

			foreach ($splitpath as $pathticle ) {
				switch($pathticle) {
					case ".." : $result=substr($result, 0, strrpos(substr($result,0,-1), "/")+1);
								break;
					case "." : break;
					case ""	 : break;
					default	 : $result=$result.$pathticle."/";
				}
			}
		}
		return $result;
	}

	function get_filestore($name) {
		require_once($this->code."modules/mod_filestore.phtml");
		if (!$this->filestores[$name]) {
			$this->filestores[$name]=new filestore($name, $this->tempdir."/", $this);
		}
		return $this->filestores[$name];
	}


	function _save_object($path, $object) {
		if (!$this->sfp) {
			$this->sfp=fopen($this->tempdir."/objects.save", "wb+");
			if (!$this->sfp) {
				$this->error="could not create tempory file 'objects.save'";
			}
		}
		if (!$this->error) {
			fseek($this->sfp, 0, SEEK_END);
			if (!$object->storage) {
				$object->storage=new object;
			}
			$object->storage->fp=$this->sfp;
			$object->storage->offset=ftell($this->sfp);

			$wstring=
				(int)($object->id)."&".
				$object->type."&".
				$object->vtype."&".
				(int)($object->lastchanged)."&".
				(int)($object->priority)."&".
				base64_encode(serialize($object->data))."&".
				base64_encode(serialize($object->properties)).
				"\n";
			$result=fwrite($this->sfp, $wstring);
		}
		return $result;
	}

	// private function which loads $object->data and $object->properties
	function _load_object_data($object) {
		if ($object && !$object->data) {
			fseek($object->storage->fp, $object->storage->offset);
			$rline=fgets($object->storage->fp, 3000);
			while (strlen($rline)==3000-1) {
				$line.=$rline;
				$rline=fgets($object->storage->fp, 3000);
			}
			$line.=$rline;

			if ($line && sizeof($fdata=explode("&", $line))) {
				$object->properties=unserialize(base64_decode($fdata[6]));
				$object->data=unserialize(base64_decode($fdata[5]));
				$result=1;
			}
		}
		return $result;
	}

	function _free_object_data($object) {
		if ($object && ( $object->runtime_ref <=0 )) {
			unset($object->data);
			unset($object->properties);
			$result=1;
		}
		return $result;
	}

	function rm_dir($path) {
	debug("axstore::rm_dir($path)");
		$path=($path[strlen($path)-1]=="/") ? $path : $path."/";
		if (file_exists($path)) {
			debug("axstore::rm_dir removing ($path)", "store");
			$dir=opendir($path);
			while (false !== ($entry=readdir($dir))) {
				debug("axstore::entry($entry)");
				if ($entry!="." && $entry!="..") {
					if (is_dir($path.$entry)) {
						$this->rm_dir($path.$entry);
					} else {
						debug("axstore::unlinking ($path$entry)\n");
						unlink($path.$entry);
					}
				}
			}
			closedir($dir);
			@rmdir($path);
		} else {
			debug("axstore::rmdir [$path] does not exist");
		}
	debug("axstore::rm_dir [end]");
	}


	function close() {
		// destructor of this store...
		if ($this->writeable) {
			@ksort($this->nodes);
			@reset($this->nodes);
			if ($fp_objects=fopen($this->tempdir."/tempobjects.data", "wb")) {
				if ($fp_nodes=fopen($this->tempdir."/nodes.data", "wb")) {
					while (list($path, $node)=each($this->nodes)) {
						if (!$node->object->written_to_file) {
							fseek($node->object->storage->fp, $node->object->storage->offset);
							$temp_line=fgets($node->object->storage->fp, 3000);
							$object_line=trim($temp_line);
							while (strlen($temp_line)==3000-1) {
								$temp_line=fgets($node->object->storage->fp, 3000);
								$object_line.=trim($temp_line);
							}

							$object_line.="\n";

							$node->object->written_to_file=true;
							fwrite($fp_objects, $object_line);
						}
						$node_line=$path."&".(int)$node->object->id;
						$node_line.="&".(int)$node->nextid;
						$node_line.="&".(int)$node->priority;
						$node_line.="&".(int)$node->axflags;
						$node_line.="\n";
						fwrite($fp_nodes, $node_line);
					}
					fclose($fp_nodes);
					fclose($fp_objects);

					if ($this->ofile) {
						fclose($this->ofile); 
						@unlink($this->tempdir."/objects.data");
					}

					/* write header info back */
					$this->header["version"] = AX_VERSION;
					$header = serialize($this->header);
					$fp = fopen($this->tempdir."/header.data", "wb");
					if ($fp) {
						fwrite($fp, $header);
					}
					fclose($fp);

					if (file_exists($this->tempdir."/tempobjects.data")) {
						rename($this->tempdir."/tempobjects.data", $this->tempdir."/objects.data");
						if ($this->sfp) {
							fclose($this->sfp);
							unlink($this->tempdir."/objects.save");
						}
						if ($this->ofp) {
							fclose($this->ofp);
						}

						// filestores:
						if (file_exists($this->files."/temp")) {
							$this->rm_dir($this->files."/temp");
						}

						if (!$this->tar->create($this->database, " . ", $this->tempdir)) {
							$this->error="Could not save the new export file $this->database\n";
						} else {
							$this->rm_dir($this->tempdir);
						}
					} else {
						$this->error="Something went wrong while writing intermediate objects.data";
					}
				} else {
					$this->error="Can not write nodes.data file: aborting";
				}
			} else {
				$this->error="Can not write intermediate objects.data file: aborting";
			}
		} else {
			@fclose($this->ofile);
			$this->rm_dir($this->tempdir);
		}
	}
}
?>