<?php
if ($this->CheckLogin("read")) {
	global $options;

	if (!function_exists('display')) {
		function display($str) {
			global $options;
			if ($options["verbose"]) {
				echo $str;
			}
		}
	}

		if (!$srcpath) {
			$srcpath="/";
		}
		display("export($srcpath) to ($destpath)\n");
		if (!$destpath) {
			if ($srcpath!="/") {
				if (!$ARCurrent->importStore->exists("/")) {
					$checkpaths[]="/";
				}
				$path_str="/";
				$calc_path=substr($srcpath, 0, strrpos(substr($srcpath,0,-1),'/'));
				$path_elements=explode("/", $calc_path);
				while (list(,$element)=each($path_elements)) {
					if ($element) {
						$path_str.=$element."/";
						if (!$ARCurrent->importStore->exists($path_str)) {
							$checkpaths[]=$path_str;
						}
					}
				}
				
			}
			$destpath="/";
			$rootpath="/";
		} else {
			$rootpath=$srcpath;
		}

		$offset=0;
		while ($result=$this->store->call("system.export.object.phtml","",$this->store->find($srcpath,$criteria,100,$offset))) {
			if (is_array($checkpaths)) {
				unset($newresult);
				@reset($checkpaths);
				while (list(,$path)=@each($checkpaths)) {
					$newresult[]=current($this->store->call("system.export.object.phtml", "",
										$this->store->get($path)));
				}
				while (list($key,)=each($result)) {
					$newresult[]=$result[$key];
				}
				$result=$newresult;
				reset($result);
				unset($checkpaths);
			}

			while (is_array($result) && (list($key,$object)=each($result))) {
				$newpath=$destpath.substr($object->path, strlen($rootpath));
				display("processing($newpath)	");
				if ($options["without_data"]) {
					display("no data for (".$object->path.")\n");
					unset($object->data);
					unset($object->properties);
				}

				if (!$saved_object[$object->id]) {
					if (!$options["force"] || $ARCurrent->importStore->exists($newpath)) {
						$saved_object[$object->id]=$newpath;

						$oldObject=current($ARCurrent->importStore->call("system.get.phtml", "",
										$ARCurrent->importStore->get($newpath)));

						if (($object->lastchanged > $oldObject->lastchanged)) {
							display("(updating)\n");
							$object->oldObject=$oldObject;
							$object->call("system.export.update.phtml");
						} else {
							display("(ok)\n");
							unset($oldObject);	// no update needed
							unset($object);
						}

					}


					if ($object) {
						// next one has to be linked
						$saved_object[$object->id]=$newpath;

						display("(saving)\n");
						$ARCurrent->importStore->save(
									$newpath, 
									$object->type,
									$object->data,
									$object->properties,
									$object->vtype,
									$object->priority);

						// (update or set templates and files)

						$object->newObject=current(
							$ARCurrent->importStore->call("system.get.phtml","",
								$ARCurrent->importStore->get($newpath)));

						$object->call("system.export.templates.phtml", "");
						$object->call("system.export.files.phtml", "");
					}
				} else {
					if (!$ARCurrent->importStore->exists($newpath)) {
						display("(linking)\n");
						$ARCurrent->importStore->link($saved_object[$object->id], $newpath);
					}
				}
			}
			$offset+=sizeof($result);
		}
		if (!$options["without_grants"]) {
			display("updating grants (groups)\n");
			reset($ARCurrent->grants_list);
			while (list($type, $type_logins)=each($ARCurrent->grants_list)) {
				while (list($login, )=each($type_logins)) {
					if ($type=="pgroup") {
						unset($criteria);
						$criteria["login"]["value"]["="]="'$login'";
						$criteria["object"]["type"]["="]="'pgroup'";
						$ARCurrent->importStore->call("system.import.groupgrants.phtml", 
														array(
																"importDestPath" => $destpath,
																"importRootPath" => $rootpath
														) ,
														$result=$ARCurrent->importStore->find("/system/groups/", $criteria));
					} 
				}
			}

			display("updating grants (users)\n");
			reset($ARCurrent->grants_list);
			while (list($type, $type_logins)=each($ARCurrent->grants_list)) {
				while (list($login, )=each($type_logins)) {
					if ($type=="puser") {
						unset($criteria);
						$criteria["login"]["value"]["="]="'$login'";
						$criteria["object"]["type"]["="]="'puser'";
						$ARCurrent->importStore->call("system.import.usergrants.phtml", "",
							$result=$ARCurrent->importStore->find("/system/users/", $criteria));
					} 
				}
			}
		}

}
?>