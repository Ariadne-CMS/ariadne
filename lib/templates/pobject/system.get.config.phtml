<?php
	/******************************************************************
	 system.get.config.phtml							Muze Ariadne v2.0
	 ------------------------------------------------------------------
	 Called by 'pobject->CheckConfig()' (from file 'ariadne/pobject.phtml')
	 Arguments: $req_function
	 Grant needed: none
	 Interface/Widget: none
	 Global variables: $newtemplate, $cacheconfig

	 This template is called from pobject itself, via CheckConfig().
	 It will set the global variables $ARConfig->template and 
	 $ARConfig->cache according to the values filled in via the 
	 config.phtml template.

	 It has one argument, $req_function, which stands for 'requested 
	 function'. It will check in it's list with template pointers 
	 ($data->templates) if the requested function has a new template
	 assigned to it and if so set the path to this template as the 
	 global variable $ARConfig->template.

	 It will furthermore set the global variable $ARConfig->cache to 
	 it's own cache setting ($data->cacheconfig, also entered via 
	 config.phtml) if that cache setting is not 'inherit cache config'
	 (meaning: $data->cacheconfig is set and not 0).

	 $req_function must be a valid string.

	 No return value.	

	******************************************************************/

	debug($this->type."/system.get.config.phtml ".$this->path,"class");
	require_once($this->store->code."includes/array.merge.clobber.phtml");
	// first check whether parent config info is in cache
	if (!$ARConfig->cache[$this->parent] && $this->parent!="..") {
		$this->get($this->parent, "system.get.config.phtml");
	}
	// first inherit parent configuration data
	$configcache=$ARConfig->cache[$this->parent];
	// add/overwrite template information for this object.
	$configcache->templates=array_merge_clobber($configcache->templates, $data->templates);
	if ($data->cacheconfig) {
		$configcache->cache=$data->cacheconfig;
	}
	if ($data->typetree && ($data->typetree!="inherit")) {
		$configcache->typetree=$data->typetree;
	}
	if ($data->nlsconfig->list) {
		$configcache->nls=$data->nlsconfig;
		debug("nls found");
	}
	$ARConfig->cache[$this->path]=$configcache;

?>