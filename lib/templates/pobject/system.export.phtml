<?php
	if ($this->CheckLogin("read")) {
		global $AR;

		$saved_object = array();
		if ( !is_array($exclude_list) ) {
			$exclude_list = array();
		}

		$clearcachePath = false;
		$items_processed = 0;
		$items_to_process = 0;


		$ARCurrent->grants_list = array();

		if (!function_exists('display')) {
			function display($str) {
				global $ARCurrent;
				if ($ARCurrent->options["verbose"]) {
					echo "$str";
					flush();
				}
			}
		}
		if (!function_exists('progress')) {
			function progress($current, $total) {
			//	if ($total > 0) {
					$progress = (int)(100*($current)/$total);
					display("progress: $current / $total ($progress %)\n");
			//	}
			}
		}

		if(!function_exists('getCommonParent')){
			function getCommonParent($base,$match,$store) {

				// if base is false, $match is the best parent
				if ( $base == false ) {
					return $match;
				}

				// check if $base matches $match prefix
				while ( $base != '/' && strpos($match,$base) !== 0 )  {
					$base = $store->make_path($base, "..");
				}
				return $base;
			}	
		}

		if (get_class($ARCurrent->importStore) == "axstore") {
			$ARCurrent->AXAction = "export";
			$ARCurrent->AXHeader = &$ARCurrent->importStore->header;
		} else {
			$ARCurrent->AXAction = "import";
			$ARCurrent->AXHeader = &$this->store->header;
		}

		$exportObject = function ($me) use (&$exportObject, &$saved_object, &$exclude_list, &$clearcachePath, &$items_processed, &$items_to_process) {
			global $ARCurrent;
			$arCallArgs  = $me->getvar('arCallArgs');
			$destpath    = $arCallArgs['destpath'];
			$srcpath     = $arCallArgs['srcpath'];
			$rootpath    = $arCallArgs['rootpath'];


			$object = $me->call('system.export.object.phtml',$arCallArgs);

			$cpath = $object->parent;
			$newcpath=$object->store->make_path($destpath.substr($object->path, strlen($rootpath)), '..');
			if($cpath != '..' && !$ARCurrent->importStore->exists($newcpath)) {
				$arguments = $arCallArgs;
				$arguments["setDummyObject"] = true;
				$temp_obj=current($object->store->call("system.export.object.phtml",
							$arguments,
							$object->store->get($cpath)));
				$temp_obj->axflags |= AX_DUMMY;
				$temp_obj->call($exportObject ,$arCallArgs);

			}

			if ($object->parent != '..' && !$object->exists($object->parent)) {
				display("Found orphaned node '".$object->path."' (skipping)\n");
				return;
			}
			$newpath=$destpath.substr($object->path, strlen($rootpath));
			$oldpath=$object->path;
			$update_obj = false;
			$save_obj = true;

			if(count($exclude_list)){
				$rpath = preg_quote($newpath,'/');
				$keys = preg_grep('/^'.$rpath.'/',$exclude_list);
				if(count($keys)) {
					display("Skipping path because it is in the exclude list\n");
					return;
				}
			}

			if ($save_obj) {
				display("processing($newpath)	");
				if ($ARCurrent->options["without_data"]) {
					display("no data for (".$object->path.")");
					$object->axflags |= AX_WITHOUT_DATA;
				}

				if ($ARCurrent->options["without_templates"]) {
					unset($object->data->config->privatetemplates);
					unset($object->data->config->templates);
					unset($object->data->config->pinp);
					$object->axflags |= AX_WITHOUT_TEMPLATES;
				}

				if ($ARCurrent->options["without_files"]) {
					$object->axflags |= AX_WITHOUT_FILES;
				}

				if (!isset($saved_object[$object->id])) {
					if ((!$ARCurrent->options["force"] || ($object->axflags & (AX_DUMMY | AX_WITHOUT_DATA))) && $ARCurrent->importStore->exists($newpath)) {

						$saved_object[$object->id]=$newpath;

						// we may never overwrite an existing object with a
						// dummy object
						if (!($object->axflags & AX_DUMMY) && 
								!($object->axflags & AX_WITHOUT_DATA)) {

							$oldObject=current($ARCurrent->importStore->call("system.get.clone.phtml", $arCallArgs,
										$ARCurrent->importStore->get($newpath)));

							if (
									($object->lastchanged > $oldObject->lastchanged) || 
									( ( $oldObject->axflags & AX_DUMMY) && !($object->axflags & AX_DUMMY) )) {
								display("(updating)");
								$save_obj = true;
							} else {
								$save_obj = false;
								display("(ok)");
								unset($oldObject);	// no update needed
							}
						} else {
							display("(no overwrite)");
							$save_obj = false;
						}
					}


					if ($save_obj) {
						$clearcachePath = getCommonParent($clearcachePath,$newpath,$object->store);

						// next one has to be linked
						$saved_object[$object->id]=$newpath;

						if ($ARCurrent->importStore->exists($newpath)) {

							$ARCurrent->importStore->call(
									"system.export.update.phtml", 
									array("newObject" => $object),
									$ARCurrent->importStore->get($newpath));


						} else {
							$impObject = clone $object;
							display("(saving ".(($impObject->axflags) ? " (".$object->axflags.") " : "").")");
							$impObject->arIsNewObject = true;
							$impObject->path = $newpath;
							if ($newpath!="/") {
								$impObject->parent = $object->store->make_path($newpath, "..");
							} else {
								$impObject->parent = "..";
							}
							$impObject->store = $ARCurrent->importStore;
							$impObject->call("system.import.phtml", $arCallArgs);
							if ($impObject->error) {
								display("\n	ERROR (".$impObject->error.")\n");
								$exclude_list[] = $impObject->path;
								return;
							}
						}
					}

					if (!($object->axflags & AX_DUMMY)) {
						$clearcachePath = getCommonParent($clearcachePath,$newpath,$object->store);

						$object->newObject=current(
								$ARCurrent->importStore->call("system.get.clone.phtml", $arCallArgs,
									$ARCurrent->importStore->get($newpath)));

						if (!($object->axflags & AX_WITHOUT_TEMPLATES)) {
							// (update or set templates and files)
							$object->call("system.export.templates.phtml", $arCallArgs);
						}
						if (!($object->axflags & AX_WITHOUT_FILES)) {
							$object->call("system.export.files.phtml", $arCallArgs);
						}
					}

				} else {
					if (!$ARCurrent->importStore->exists($newpath)) {
						// FIXME:hardlink support is deprecated
						display("(linking)");
						$ARCurrent->importStore->link($saved_object[$object->id], $newpath);
					}
				}
				display("\n");
			} else {
				display("	skipping ($newpath)\n");
			}

			$items_processed++;
			progress($items_processed, $items_to_process);

		};

		/* create a dummy object for later use */
		$dummy = new pobject;
		$dummy->nls = new baseObject;
		$dummy->axflags = true;
		$dummy->type = "pobject";
		foreach($AR->nls->list as $key => $value){
			$dummy->$key=new baseObject;
			$dummy->$key->name="Dummy node";
			$dummy->nls->list[$key]=$val;
		}


		if (!$srcpath) {
			$srcpath="/";
		}
		display("export($srcpath) to ($destpath)\n");

		$checkedPaths = array();

		if (!$destpath) {
			if ($srcpath!="/") {
				if (!$ARCurrent->importStore->exists("/")) {
					$checkpaths[]="/";
				}
				$path_str="/";
				$calc_path=substr($srcpath, 0, strrpos(substr($srcpath,0,-1),'/'));
				$path_elements=explode("/", $calc_path);
				while (list(,$element)=each($path_elements)) {
					if ($element) {
						$path_str.=$element."/";
						if (!$ARCurrent->importStore->exists($path_str)) {
							$checkpaths[]=$path_str;
						}
					}
				}

			}
			$destpath="/";
			$rootpath="/";
		} else {
			if ($destpath!="/") {
				$parent=$this->store->make_path($destpath, "..");
				if (!$ARCurrent->importStore->exists($parent)) {
					if ($parent=="/") {
						display($ARnls["axnorootnode"]);

						$ARCurrent->importStore->save(
								"/", 
								"pobject",
								$dummy,
								0,
								0,
								0,
								AX_DUMMY);
					} else {
						$ARCurrent->importStore->error=sprintf($ARnls["err:noparentdefined"],$destpath);
					}
				}
			}
			$rootpath=$srcpath;
		}

		$arCallArgs['destpath'] = $destpath;
		$arCallArgs['srcpath'] = $srcpath;
		$arCallArgs['rootpath'] = $rootpath;

		$clearcachePath = false;

		if (!is_array($ARCurrent->options['rewrite_references'])) {
			$ARCurrent->options['rewrite_references'] = array();
		} else if ($ARCurrent->options['rewrite_references']['default']) {
			unset($ARCurrent->options['rewrite_references']['default']);
			$ARCurrent->options['rewrite_references'][ $rootpath ] = $destpath;
		}

		if ( $ARCurrent->options["query"] != '' && $ARCurrent->AXAction == "export") {
			$criteria = " (".$ARCurrent->options["query"].") ";
		}

		$countcriteria = '';
		if (!$ARCurrent->importStore->error) {
			if($ARCurrent->options['without_children'] == true){
				if($criteria){
					$criteria .= ' and ';
				}
				$criteria .=" path = '$srcpath' ";
				$countcriteria =" and path = '$srcpath' ";
			}
			if ($ARCurrent->AXAction == "export") {
				$criteria .= "order by none,path ASC";
			}

			if (get_class($this->store) == "axstore") {
				$items_to_process = count($this->store->nodes); // FIXME: This works for import, but not for export.
			} else {
				$query = "object.path =~ '" . $srcpath . "%' ".$countcriteria ." order by path ASC";
				$items_to_process = $this->count_find($srcpath, $query);
			}
			progress(0, $items_to_process);

			$this->store->call($exportObject ,$arCallArgs,$this->store->find($srcpath,$criteria,0,0));
			if (!$ARCurrent->options["without_grants"]) {
				// reset config
				$destobj = current($ARCurrent->importStore->call("system.get.phtml", $arguments,
						$ARCurrent->importStore->get($destpath)));
				$destobj->resetConfig();

				$userConfig = $destobj->loadUserConfig();
				$authconfig = $userConfig['authentication'];

				display("updating grants (groups)\n");
				@reset($ARCurrent->grants_list);
				while (list($type, $type_logins)=@each($ARCurrent->grants_list)) {
					while (list($login, $paths)=each($type_logins)) {
						if ($type=="pgroup") {
							foreach ( $paths as $path => $grants ) {
								$newpath=$destpath.substr($path, strlen($rootpath));
								$dataobj = current($ARCurrent->importStore->call("system.get.phtml", array(),
										$ARCurrent->importStore->get($newpath)));
								$dataobj->resetConfig();

								$userConfig = $dataobj->loadUserConfig();
								$authconfig = $userConfig['authentication'];
								unset($group);
								unset($criteria);
								$criteria["login"]["value"]["="]=$login;
								$criteria["object"]["type"]["="]="pgroup";
								foreach ($authconfig['groupdirs'] as $groupdirpath) {
									$result=$destobj->find($groupdirpath,$criteria,"system.get.phtml");
									if (count($result)) {
										$group = current($result);
										break;
									}
								}
								if( ! is_null($group) ) {
									display("	$newpath\n");
									$result=current($group->get($newpath, "system.import.grants.phtml", 
															array(
																"importDestPath" => $destpath,
																"importRootPath" => $rootpath,
																"grants" => &$grants,
																"type" 	=> "pgroup" ,
																"id"	=> $group->data->login
															)));
									if ($result) {
										foreach( $grants as $grant => $grantValue) {
											$group->data->config->usergrants[$newpath][$grant]=$grantValue;
										}
									}
									$group->save();
								}
							}
						} 
					}
				}

				display("updating grants (users)\n");
				@reset($ARCurrent->grants_list);
				while (list($type, $type_logins)=@each($ARCurrent->grants_list)) {
					while (list($login, $paths )=each($type_logins)) {
						if ($type=="puser") {
							foreach ( $paths as $path => $grants ) {
								$newpath=$destpath.substr($path, strlen($rootpath));
								$dataobj = current($ARCurrent->importStore->call("system.get.phtml", array(),
										$ARCurrent->importStore->get($newpath)));
								$dataobj->resetConfig();

								$userConfig = $dataobj->loadUserConfig();
								$authconfig = $userConfig['authentication'];
								unset($crit);
								unset($user);
								$crit["login"]["value"]["="]=$login;
								foreach ($authconfig['userdirs'] as $userdirpath) {
									$result=$destobj->find($userdirpath,$crit,"system.get.phtml");
									if (count($result)) {
										$user = current($result);
										break;
									}
								}
								if( ! is_null($user) ) {
									display("	$newpath\n");
									$result=current($user->get($newpath, "system.import.grants.phtml", 
															array(
																"importDestPath" => $destpath,
																"importRootPath" => $rootpath,
																"grants" => &$grants,
																"type" 	=> "puser" ,
																"id"	=> $user->data->login
															)));
									if ($result) {
										foreach( $grants as $grant => $grantValue) {
											$user->data->config->usergrants[$newpath][$grant]=$grantValue;
										}
									}
									$user->save();
								}
							}
						} 
					}
				}

			}
			if ($ARCurrent->AXAction == "import") {
				display("clearing cache on $clearcachePath.\n");
				$ARCurrent->importStore->call("system.cache.clear.phtml", 
						array(
							"private" => true,
							"recurse" => true
						) , $ARCurrent->importStore->get($clearcachePath));
			}
		}
	}
?>
