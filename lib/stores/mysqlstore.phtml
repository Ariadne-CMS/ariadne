<?php
/******************************************************************************
  Mysql Store 1.0						Ariadne 2.0

  Copyright (C) 1998-2000  Muze 

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

  --------------------------------------------------------------------------

  This is an implementation of the store class for MySQL. The store class is
  an interface between Ariadne objects and a storage layer. It is used by all 
  Ariadne objects to call templates in other objects or to manipulate
  the location and contents of objects in the Ariadne system.

*******************************************************************************/

define(MAX_PATH_LENGTH, 128);

// general objectstore functions
require_once('store.php');

class mysqlstore extends store{

	protected $connect_id;
	protected $tbl_prefix;
	protected $database;
	public $total = 0;

	public function __construct($path, $config) {
	/**********************************************************************************

	 This is the constructor routine for the store object. It takes some configuration 
	 information as arguments and sets up the database connection.

	 $path is the root path of the running script under the document root of
		the webserver.
	 $config contains some database configuration values: "host", "user",
		"password", "database" and the location of the class files for all the used
		types.

	 **********************************************************************************/
		if (!function_exists("mysql_pconnect")) {
			dl("mysql.so");
		}
		$this->error="";
		$this->connect_id=mysql_pconnect($config["host"], $config["user"], $config["password"]) or die ("Could not connect to MySQL");
		mysql_select_db($config["database"]) or die ("Could not access database '".$config["database"]."'. Please create this database manually.");
		$this->root=$path;
		$this->code=$config["code"];
		$this->files=$config["files"];
		$this->tbl_prefix=$config["prefix"];

		// necessary to avoid the 'mysql_select_db' bug, it will select
		// a database for all open connect_id's
		// so we have to supply the database name wheenever a query is run
		$this->database=$config["database"];

		$this->config=$config;

		/* Include module mysql_compiler */
		include_once($this->code."stores/modules/mysql_compiler.php");
		/* include proxystore */
		//include_once($this->code."stores/proxystore.phtml");
		include_once($this->code."stores/modules/mysqlstore_iterator.php");
		include_once($this->code."modules/mod_selector.php");
		
		/* Instantiate module locking */
		include_once($this->code."modules/mod_lock/mysql.phtml");
		$this->mod_lock=new mysqllock($config["prefix"]);
		$this->mod_lock->select_db($config["database"], $this->connect_id);
		$this->mod_lock->lock_duration=$config["lock_duration"];
		$config["password"]="";

		//$this->proxystore = proxystore::createproxy($this,$config);
		if ($config['proxystore']) {
			$this->proxystore = $config['proxystore'];
		} else {
			$this->proxystore = $this;
		}
	}

	public function getIterator($selector, $definitions, $objects) {
		return new mysqlstoreIterator($selector, $definitions, $this, $objects);
	}

	public function call($template, $args, $objects, $options = array() ) {
	/**********************************************************************************
	
	 This function takes a list of objects, the function to be called in each of those
	 objects and the arguments of that function as arguments. The list of objects is of
	 unspecified type and may be different in other implementations of the store 
	 interface.

	 The function will retrieve and instantiate each object in the object list and call
	 the objects call with $function and $args.

	 **********************************************************************************/ 

		$result = Array();
		$this->error="";
		$count = @mysql_num_rows($objects["list"]);
		while ( $row = @mysql_fetch_array($objects["list"]) ) {
			$multiCall = false;
			$object = $this->newobject( 
				$row["path"], $row["parent"], $row["type"], 
				unserialize($row["object"]), $row["id"], $row["lastchanged"], 
				$row["vtype"], strlen($row["object"]), $row["priority"]
			);
			if ($template instanceof ar_listExpression) { // optimization, prevents extra item() call
				// insert logic to allow templates and arguments from a list expression.
				$callInfo = $template->current();
				$template->next();
			} else if ( is_array( $template) ) { // array of templates given
				$callInfo = current($template);
				next($template);
			} else {
				$callInfo = array( $template );
			}
			if ( is_array( $callInfo ) ) {
				foreach( $callInfo as $singleCall ) {
					$templateArgs = $args;
					if ( ( is_array( $singleCall ) || $singleCall instanceof ArrayAccess) && $singleCall['template'] ) {
						$templateName = $singleCall['template'];
						if ( is_array( $singleCall['params'] ) ) {
							$templateArgs = array_merge( (array) $templateArgs, $singleCall['params'] );
						}
					} else {
						$templateName = (string) $singleCall;
					}
					if ( isset($options['usePathAsKey']) && $options['usePathAsKey'] ) {
						$result[$row['path']] = $object->call( $templateName, $templateArgs );
					} else {
						$result[] = $object->call( $templateName, $templateArgs );
					}
				}
			}
		}

		$this->total += $count;
		return $result;
	}

	function count($objects) {
		return @mysql_num_rows($objects["list"]);
	}

	function info($objects) {
		while ($row=@mysql_fetch_array($objects["list"])) {
			unset($row["object"]);
			$result[]=$row;
		}
		return $result;
	}

	public function get($path) {
	/**********************************************************************************

	 This function takes as argument a path to an object in the store and will retrieve
	 all the necessary data and return this in the objectlist type needed for 
	 store->call(). If the requested path does not exist, it will retrieve the object
	 with the longest matching path.

	 $path should always start and end with a '/'.

	 **********************************************************************************/

		$this->error="";
		$result["method"]="get";
		$result["path"]=$path;
		$epath=AddSlashes($path);

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$query_string="select $nodes_tbl.path, $nodes_tbl.parent, $nodes_tbl.priority, $objects_tbl.id, $objects_tbl.type, $objects_tbl.object, UNIX_TIMESTAMP($objects_tbl.lastchanged) as lastchanged, $objects_tbl.vtype from $objects_tbl, $nodes_tbl where $objects_tbl.id=$nodes_tbl.object and $nodes_tbl.path='$epath'";
		$result["list"]=mysql_db_query($this->database,$query_string, $this->connect_id);
		return $result;
	}
	
	public function mogrify($id, $type, $vtype = null) {
		$this->error="";

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";
		if ( ( strlen( $type ) > 32 ) || (strlen( $vtype ) > 32 ) ) {
			$this->error = "Type names are too long, maximum is 32 characters ( $type, $vtype )";
		} else if ( !$type ) {
			$this->error = "No type to mogrify to given.";
		}
		if (!$this->error && is_string($id)) {
			$epath = AddSlashes($id);
			$query_string = "select $nodes_tbl.object from $nodes_tbl where $nodes_tbl.path = '$epath'";
			$qresult = mysql_db_query($this->database, $query_string, $this->connect_id);
			if (!$qresult) {
				$this->error = "Could not fetch object id";
			} else {
				$temp = mysql_fetch_array($qresult);
				$id = $temp["object"];
			}
		}
		if (!$this->error && $id) {
			$eid = AddSlashes($id);
			$etype = AddSlashes($type);
			if (!$vtype) {
				$vtype = $type;
			}
			$evtype = AddSlashes($vtype);
			$query_string = "update $objects_tbl set type='$etype', vtype='$evtype' where id = $eid";
			$result = mysql_db_query($this->database, $query_string, $this->connect_id);
			if (!$result) {
				$errno = mysql_errno( $this->connect_id );
				$this->error = "ERROR: Mysql: $errno: ".mysql_error($this->connect_id);
			}
		}
		return $result;
	}

	public function touch($id, $timestamp = -1) {
	/**********************************************************************************

	 This function takes as argument a path to an object (or id of an object)
     in the store and will set the timestamp to $timestamp.

	 $path should always start and end with a '/'.

	 **********************************************************************************/

		$this->error="";

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		if ($timestamp == -1) {
			$timestamp = time();
		}

		if (is_string($id)) {
			$epath = AddSlashes($id);
			$query_string = "select $nodes_tbl.object from $nodes_tbl where $nodes_tbl.path = '$epath'";
			$qresult = mysql_db_query($this->database, $query_string, $this->connect_id);
			if (!$qresult) {
				$this->error = "Could not fetch object id";
			} else {
				$temp = mysql_fetch_array($qresult);
				$id = $temp["object"];
			}
		}


		if ($id && !$this->error) {
			$eid = AddSlashes($id);
			$etimestamp = AddSlashes($timestamp);
			$query_string = "update $objects_tbl set lastchanged=FROM_UNIXTIME($etimestamp) where id = $eid";
			$qresult = mysql_db_query($this->database, $query_string, $this->connect_id);
			$result = mysql_affected_rows($this->connect_id);
		}
		return $result;
	}

	public function ls($path) {
	/**********************************************************************************

	 This function takes as argument a path to an object in the store and will retrieve
	 all the objects and their data which have this object as their parent. It will 
	 then return this in the objectlist type needed for store->call(). If the requested
	 path does not exist, it will retrieve the object with the longest matching path.

	 $path should always start and end with a '/'.

	 **********************************************************************************/

		$this->error="";
		$epath=AddSlashes($path);

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$query_string="select distinct($nodes_tbl.path), $nodes_tbl.parent, $nodes_tbl.priority, $objects_tbl.id, $objects_tbl.type, $objects_tbl.object, UNIX_TIMESTAMP($objects_tbl.lastchanged) as lastchanged, $objects_tbl.vtype from $objects_tbl, $nodes_tbl where $objects_tbl.id=$nodes_tbl.object and $nodes_tbl.parent='$epath' order by $nodes_tbl.priority DESC, $nodes_tbl.path";
		$result["method"]="ls";
		$result["path"]=$path;
		$result["list"]=mysql_db_query($this->database,$query_string, $this->connect_id);
		return $result;
	}

	public function parents($path, $top="/") {
	/**********************************************************************************

	 This function takes as argument a path to an object in the store. It will return 
	 all objects with a path which is a substring of the given path. The resulsts are 
	 ordered by path (length), shortest paths first.
	 In effect all parents of an object in the tree are called, in order, starting at 
	 the root.

	 $path should always start and end with a '/'.

	 **********************************************************************************/

		$this->error="";
		$epath=AddSlashes($path);
		$etop=AddSlashes($top);

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$query_string="select distinct($nodes_tbl.path), $nodes_tbl.parent, $nodes_tbl.priority, $objects_tbl.id, $objects_tbl.type, $objects_tbl.object, UNIX_TIMESTAMP($objects_tbl.lastchanged) as lastchanged, $objects_tbl.vtype from $objects_tbl, $nodes_tbl where $objects_tbl.id=$nodes_tbl.object and $nodes_tbl.path=substring('$epath',1,length(path)) and $nodes_tbl.path LIKE '$etop%' order by path";
		$result["method"]="parents";
		$result["path"]=$path;
		$result["list"]=mysql_db_query($this->database,$query_string, $this->connect_id);
		return $result;
	}

	public function find($path, $criteria, $limit=100, $offset=0) {
	/**********************************************************************************

	 This function takes as arguments a path to an object in the store and some search
	 criteria. It will search for all matching objects under the given path. If the
	 given path is not in this store but in a substore it will not automatically search
	 that substore. 

	 $criteria is of the form 

	 $criteria ::= ({ $property_name => ({ $valuename => ({ $compare_function, $value }) }) }) 

	 e.g.: $criteria["status"]["value"][">"]="'published'";

	 $path should always start and end with a '/'.

	 **********************************************************************************/
		if (!is_array($criteria) && ($criteria=trim($criteria))) {
			$sqlcompiler= $this->compilerFactory();
			$query_string=$sqlcompiler->compile($path, $criteria, $limit, $offset);
			if ($sqlcompiler->error) {
				$this->error=$sqlcompiler->error;
			}
			unset($sqlcompiler);

		} else {
			$this->error="";
			$count=0;
			$result["method"]="find";
			$result["path"]=$path;
			$result["criteria"]=$criteria;
			$epath=AddSlashes($path);

			$nodes_tbl=$this->tbl_prefix."nodes";
			$objects_tbl=$this->tbl_prefix."objects";
			$types_tbl=$this->tbl_prefix."types";

			while (list($property, $values)=@each($criteria)) {
				$eproperty=AddSlashes($property);
				if ($property!="object") {
					$from.=", ".$this->tbl_prefix."prop_$eproperty";
					$where.=" and (";
				}
				while (list($valuename, $compare)=each($values)) {
					while (list($function, $value)=each($compare)) {
						switch(strtolower($function)) {
							case '=':
							case '==':
								$ecompare = '=';
							break;
							case '!=':
							case '<=':
							case '>=':
							case '<':
							case '>':
								$ecompare = $function;
							break;
							case '~=':
							case '=~':
							case 'like':
								$ecompare = "like";
							break;
							case '!~':
							case 'not like':
								$ecompare = "not like";
							break;
						}
						$evaluename=AddSlashes($valuename);
						if ($value=="") { 
							// empty strings as value generate strange results in SQL land
							$value=0;
						}
						switch($property) {
							case "object" :
								switch($valuename) {
									case ("type") : 
										$where.=" and $objects_tbl.type $ecompare $value ";
									 	break;
									case ("implements") : 
										$types=", $types_tbl";
										$where.=" and ( $types_tbl.implements $ecompare $value and $objects_tbl.vtype=$types_tbl.type ) ";
										break;
									case ("parent") :
										$where.=" and $nodes_tbl.parent $ecompare $value ";
										break;
									case ("lastchanged") :
										$value = date("YmdHis", $value);
										$where.=" and $objects_tbl.lastchanged $ecompare $value ";
										break;
								}
								break;
							default :
								$where.=$this->tbl_prefix."prop_$eproperty.AR_$evaluename $ecompare $value and "; 
						}
					}
				}
				if ($property!="object") {
					$where.=" ".$this->tbl_prefix."prop_$eproperty.object=$objects_tbl.id)	";
				}
			}
			$query_string="select distinct($nodes_tbl.path), $nodes_tbl.parent, $nodes_tbl.priority, $objects_tbl.id, $objects_tbl.type, $objects_tbl.object, UNIX_TIMESTAMP($objects_tbl.lastchanged) as lastchanged, $objects_tbl.vtype from $nodes_tbl, $objects_tbl $from $types where $objects_tbl.id=$nodes_tbl.object and $nodes_tbl.path like '$epath%'";
			$where=substr($where,4);
			if ($where) { 
				$query_string.=" and ( ( $where ) )";
			} 
			$query_string.=" order by $nodes_tbl.parent, $nodes_tbl.priority DESC, $nodes_tbl.path";
			if ($limit) {
				$query_string.=" limit ";
				if ($offset) {
					$query_string.="$offset,";
				}
				$query_string.="$limit";
			}
		}
		$result["list"]=mysql_db_query($this->database,$query_string, $this->connect_id);
		return $result;
	}

	public function close() {
		parent::close();
		return @mysql_close($this->connect_id);
	}


	public function save($path, $type, $data, $properties="", $vtype="", $priority=false) {
	/***************************************************************

		This function takes as argument a path, type, objectdata and 
		possibly a properties list and vtype (virtual type).
		If there exists no object with the given path, a new object is 
		saved with the given type, data, properties and vtype, and a
		new path is saved pointing to it.
		If there does exist an object with the given path, it's object
		data is overwritten with the given data and if vtype is set the
		current vtype is overwritten with the new one.

		$path must be an absolute path (containing no '..' and starting
			with '/')
		$type must be a valid type
		$data can be any string (usually a serialized object.)
		$properties is a multidimensional hash of the following form:
			$properties[{property_name}][][{value_name}]={value}
			{property_name} must be a valid property name
			{value_name} must be a valid value name for this property
			{value} can be a number, boolean or string. If it is a string
				it must be enclosed in single qoutes. All other single 
				quotes in the string must be escaped. e.g:
				"'\'t is a String'"
		example:
			$properties["name"][0]["value"]="'A name'";
			$properties["name"][1]["value"]="'A second name!'";
		if $properties["name"]=1 then all properties for property name
			will be removed.

		$vtype must be a valid type.
	 
		if $properties or $vtype are not set or empty ("",0 or false)
		they will be ignored. $vtype defaults to $type.
		Only those properties listed in $properties will be updated.
		Any other property set will remain as it was.

	***************************************************************/


		$this->error="";
		if ($path!="/") {
			$parent=$this->make_path($path, "..");
		} else {
			$parent="..";
		}
		$eparent=AddSlashes($parent);
		$epath=AddSlashes($path);
		$edata=AddSlashes(serialize($data));
		$etype=AddSlashes($type);
		$epriority=(int)$priority;

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		if (strlen($path)<MAX_PATH_LENGTH) { // initial check
			if ($id=$this->exists($path)) { //update
				$result = $path;
				if ($vtype) { // only change/save vtype if it is explicitly set
					$evtype=AddSlashes($vtype);
					$query_string="update $objects_tbl set object='$edata', vtype='$evtype', lastchanged=NULL where id=$id"; 
				} else {
					$query_string="update $objects_tbl set object='$edata', lastchanged=NULL where id=$id"; 
				}
				mysql_db_query($this->database,$query_string, $this->connect_id);
				$errno=mysql_errno($this->connect_id);
				if (!$errno) { // mysql_affected_rows doesn't always work
					$this->save_properties($properties, $id, $this); 
					if($priority !== false) {
						$query_string="update $nodes_tbl set priority=$epriority where path='$epath'";
						mysql_db_query($this->database,$query_string, $this->connect_id);
						$errno=mysql_errno($this->connect_id);
						if ($errno) {
							$this->error="ERROR: Mysql: $errno: ".mysql_error($this->connect_id);
							debug("save: query=$query_string","store");
							debug("save: update object failed!","store");
							debug("save: ".$this->error,"store");
							$result=0;
						}
					} 
				} else {
					$this->error="ERROR: Mysql: $errno: ".mysql_error($this->connect_id);
					debug("save: query=$query_string","store");
					debug("save: update object failed!","store");
					debug("save: ".$this->error,"store");
					$result=0;
				}
			} else { // insert new
				if ($vtype=="") { // if vtype is not set, it defaults to type for new objects
					if ($subcpos = strpos($type, '.')) {
						$vtype = substr($type, 0, $subcpos);
					} else {
						$vtype=$type; 
					}
				}
				$evtype=AddSlashes($vtype);

				if($priority === false){
					// default priority == 0
					$priority = 0;
					$epriority=(int)$priority;
				}

				$mask = substr($path, strlen($parent));
				if (ereg("^(.*)\{([0-9]:)?id\}(.*)",$mask,$matches)) { 
					// if the last part of a path matches something like {2:id} this
					// part will automatically create a new number, unique in this directory, and fill it in.
					// before we proceed, we need to lock the 'nodes' and 'objects' table
					$query_string="lock tables ".$this->tbl_prefix."nodes write, ".$this->tbl_prefix."objects write";
					if (mysql_db_query($this->database, $query_string, $this->connect_id)) {
						$needunlocking = true;

						$subid=$this->get_nextid($parent, $mask);
						$path=ereg_replace("\{([0-9]:)?id\}",strval($subid),$path);
						$epath=AddSlashes($path);
					} else {
						error("PANIC: could not obtain write lock on nodes table!");
						$this->close();
						exit;
					}
				}

				if (strlen($path)>=MAX_PATH_LENGTH) {
					// extra check, after rewrite of filename
					$this->error="ERROR: Maximum path length (".MAX_PATH_LENGTH." characters) exceeded. Please shorten your filenames.";
					$result=false;
				} else {
					$query_string="insert into $objects_tbl (id,type,object,vtype) values (0,'$etype','$edata','$evtype')";
					$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
					$errno=mysql_errno($this->connect_id);
					$error=mysql_error($this->connect_id);
					if (!$errno && $id=mysql_insert_id($this->connect_id)) {
						$query_string="insert into $nodes_tbl (path,parent,object,priority) values ('$epath','$eparent',$id,$epriority)";
						$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
						$errno=mysql_errno($this->connect_id);
						$error=mysql_error($this->connect_id);
						if (!$errno) {
							if ($needunlocking) {
								$query_string = "unlock tables";
								mysql_db_query($this->database,$query_string, $this->connect_id);
								$needunlocking = false;
							}
							$this->save_properties($properties, $id, $this);
							$result=$path;
						} else {
							$this->error="ERROR: Mysql: $errno: $error";
							debug("save: insert node failed!","store");
							debug("save: ".$this->error,"store");
							$result=0;
						}
					} else {
						$this->error="ERROR: Mysql: $errno: $error";
						debug("save: insert object failed!","store");
						debug("save: ".$this->error,"store");
						$result=0;
					}
				}
				if ($needunlocking) {
					$query_string = "unlock tables";
					mysql_db_query($this->database,$query_string, $this->connect_id);
				}
			}
		} else {
			// path too long
			$this->error="ERROR: Maximum path length (".MAX_PATH_LENGTH." characters) exceeded. Please shorten your filenames.";
			$result=false;
		}
		return $result;
	}


	public function purge($path) {
	/**********************************************************************
	 
		This function will delete the object pointed to by $path and all
	other paths pointing to that object. It will then remove any property
	for this object from all property tables.
		The function returns the number of paths found and removed or 1 if
	there was no path found (meaning that the object doesn't exist and 
	therefor purge succeeded while doing nothing.)

	 $path should always start and end with a '/'.

	**********************************************************************/

		$this->error="";

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";
		$nextid_tbl=$this->tbl_prefix."seq_id";

		$object=$this->exists($path);
		if ($object) {
			$query_string="delete from $nodes_tbl where object=$object";
			$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
			if ($temp) {
				$result=mysql_affected_rows($this->connect_id);
			}
			$this->del_property($object);
			$query_string="delete from $objects_tbl where id=$object";
			mysql_db_query($this->database,$query_string, $this->connect_id);
			$paths=$this->list_paths($path);
			if (is_array($paths)) {
				while (list($key, $path)=each($paths)) {
					$epath=AddSlashes($path);
					$query_string="delete from $nextid_tbl where path='$epath'";
					$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
				}
			}
		} else { // no such path, so purge already succeeded :)
			$result=1;
		}
		return $result;
	}

	public function delete($path) {
	/**********************************************************************

		This function deletes the path given. If this is the last path pointing
	to an object, the object will be purged instead.

	$path should always start and end with a '/'.

	**********************************************************************/

		$this->error="";
		$epath=AddSlashes($path);
		$paths=$this->list_paths($path);

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";
		$nextid_tbl=$this->tbl_prefix."seq_id";


		if (is_array($paths)) {
			if (sizeof($paths)==1) { // only one path for this object
				$result=$this->purge($path); // therefore purge the object.
			} else { // only delete the given path
				$query_string="delete from $nodes_tbl where path='$epath'";
				$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
				if (mysql_affected_rows($this->connect_id)) {
					$result=1;
				} else {
					$result=0;
				}
				$query_string="delete from $nextid_tbl where path='$epath'";
				$temp=mysql_db_query($this->database,$query_string, $this->connect_id);

			}
		}
		return $result;
	}

	public function exists($path) {
	/**********************************************************************

		This function checks the given path to see if it exists. If it does
	it returns the id of the object to which it points. Otherwise it returns
	0.

	$path should always start and end with a '/'.

	**********************************************************************/

		$this->error="";
		$epath=AddSlashes($path);

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$query_string="select object from $nodes_tbl where path='$epath'";
		$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
		if ($temp && ($row=mysql_fetch_array($temp))) {
			$object=intval($row["object"]);
		}
		return $object;
	}


	public function link($source, $destination) {
	/**********************************************************************

		Link adds an extra path to an already existing object. It has two
	arguments: $source and $destination. $source is an existing path of
	an object, $destination is the new path. $destination must not already
	exist.

	$destination should always start and end with a '/'.

	**********************************************************************/

		$this->error="";
		$edestination=AddSlashes($destination);
		$esource=AddSlashes($source); 

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";


		$parent=$this->make_path($destination, "..");
		$filename=substr($destination, strlen($parent));
		$eparent = AddSlashes($parent);

		$query_string = "select path from $nodes_tbl where path = '$eparent'";
		$qresult = mysql_db_query($this->database, $query_string, $this->connect_id);
		if ($qresult && ($row = mysql_fetch_array($qresult))) {
			$eparent = AddSlashes($row['path']);
			$edestination = AddSlashes($eparent.$filename);


			if ($this->exists($destination)) {
				$this->error="$destination already exists, cannot overwrite.";
				debug("link: ERROR: ".$this->error,"store");
				$result=false;
			} else if (!$this->exists($parent)) {
				$this->error="$parent does not exist, cannot link.";
				debug("link: ERROR: ".$this->error,"store");
				$result=false;
			} else { 
				$mask = substr($destination, strlen($parent));
				if (ereg("(.*)\{([0-9]:)?id\}(.*)",$mask,$matches)) {
					$query_string="lock tables ".$this->tbl_prefix."nodes write";
					if (mysql_db_query($this->database, $query_string, $this->connect_id)) {
						$needunlocking = true;
						$subid = $this->get_nextid($parent, $mask);
						$destination=ereg_replace("\{([0-9]:)?id\}",strval($subid),$destination);
						$edestination=AddSlashes($destination);
					} else {
						error("PANIC: could not obtain write lock on nodes table!");
						$this->close();
						exit;
					}
				}
				$id=$this->exists($source);
				if ($id) {
					$query_string="insert into $nodes_tbl (path, parent, object ) values ('$edestination', '$eparent', $id)";
					$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
					$errno=mysql_errno($this->connect_id);
					$error=mysql_error($this->connect_id);
					if ($errno) {
						$this->error="ERROR: Mysql: $errno: $error";
						debug("link: insert node failed!","store");
						debug("link: ".$this->error,"store");
						debug("link: query=$query_string","store");
						$result=false;
					}
					$result=$destination;
				} else {
					$result=false;
				}
			}
			if ($needunlocking) {
				$query_string = "unlock tables";
				mysql_db_query($this->database,$query_string, $this->connect_id);
			}
		} else {
			$this->error="$parent does not exist, cannot link.";
			debug("link: ERROR: ".$this->error,"store");
			$result=false;
		}
		return $result;
	}

	protected function store_run_query($query) {
		/* private function, do not use this outside this class */
		$result=mysql_db_query($this->database, $query, $this->connect_id);
		$errno=mysql_errno($this->connect_id);
		$error=mysql_error($this->connect_id);
		if ($errno) {
			$this->error="ERROR: Mysql: $errno: $error";
			debug("run_query: ".$this->error,"store");
			debug("run_query: query=$query_string","store");
			$result=false;
		} else if (!isset($result)) {
			$result=true;
		}
		return $result;
	}

	public function move($source, $destination) {
	/**********************************************************************

	$destination should always start and end with a '/'.

	**********************************************************************/


		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$this->error="";
		$esource=AddSlashes($source); 
		$parent=$this->make_path($destination, "..");
		$filename=substr($destination, strlen($parent));
		$eparent = AddSlashes($parent);

		$query_string = "select path from $nodes_tbl where path = '$eparent'";
		$qresult = mysql_db_query($this->database, $query_string, $this->connect_id);
		if ($qresult && ($row = mysql_fetch_array($qresult))) {
			$eparent = AddSlashes($row['path']);
			$edestination = AddSlashes($eparent.$filename);

			if ($this->exists($destination) &&
					! ( strtolower($destination) === strtolower($source) &&
						$destination !== $source
					)) {

				$this->error="$destination already exists, cannot overwrite.";
				debug("move: ERROR: ".$this->error,"store");
				$result=false;
			} else if (!$this->exists($parent)) {
				$this->error="$parent does not exist, cannot move.";
				debug("move: ERROR: ".$this->error,"store");
				$result=false;
			} else { 
				$mask = substr($destination, strlen($parent));
				if (ereg("(.*)\{([0-9]:)?id\}(.*)",$mask,$matches)) {
					$query_string="lock tables ".$this->tbl_prefix."nodes write";
					if (mysql_db_query($this->database, $query_string, $this->connect_id)) {
						$needunlocking = true;
						$subid = $this->get_nextid($parent, $mask);
						$destination=ereg_replace("\{([0-9]:)?id\}",strval($subid),$destination);
						$edestination=AddSlashes($destination);
					} else {
						error("PANIC: could not obtain write lock on nodes table!");
						$this->close();
						exit;
					}
				}
				$id=$this->exists($source);
				if ($id) {
					$destinationlength=strlen($destination);
					$sourcelength=strlen($source);
					$parentlength=strlen($parent);
					// move the top path
					$query_string="update $nodes_tbl set path='$edestination', parent='$eparent' where path='$esource'";
					$result=$this->store_run_query($query_string);
					if ($result) {
						// now move all the children
						$query_string="update $nodes_tbl set path=CONCAT('$edestination', SUBSTRING(path, $sourcelength+1)), parent=CONCAT('$edestination', SUBSTRING(parent, $sourcelength+1)) where parent like '$esource%'";
						$result=$this->store_run_query($query_string);
					}
				} else {
					$result=false;
				}
			}

			if ($needunlocking) {
				$query_string = "unlock tables";
				mysql_db_query($this->database,$query_string, $this->connect_id);
			}
		}

		if ($result) {
			return $destination;
		} else {
			return false;
		}
	}


	public function list_paths($path) {
	/**********************************************************************

		This function returns an array of all paths pointing to the same object 
	as $path does.

	**********************************************************************/

		$this->error="";

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$object=$this->exists($path);
		$query_string="select path from $nodes_tbl where object=$object";
		$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
		while ($row=@mysql_fetch_array($temp)) {
			$result[]=$row["path"];
		}
		return $result;
	}

	public function AR_implements($type, $implements) {
	/**********************************************************************

		This function returns 1 if the $type implements the type or
	interface in $implements. Otherwise it returns 0.

	**********************************************************************/


		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		$query_string="select distinct type from $types_tbl where implements='".AddSlashes($implements)."' and type='".AddSlashes($type)."'";
		$this->error="";
		$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
		if ($temp) {
			$row=mysql_fetch_array($temp);
		}
		if ($row) {
			$result=1;
		}
		return $result;
	}
	

	public function format_for_fti($text) {
	/**********************************************************************
 
		This function prepares the passed string to be interpreted properly
	by the store's full text indexing system.
		For MySQL, all characters over 126 and the select allowed characters
	are escaped with the underscore character; whitespace characters are
	collapsed into a single space.

	**********************************************************************/

		$allowedchars="_'-";
		$search = array("%[\\x80-\\xFF$allowedchars]%es", "%\\s+%s");
		$replace = array("'_'.dechex(ord('\\0'))", " ");
		return preg_replace($search, $replace, $text);
	}


	public function load_properties($object, $values="") {
		if ($object) {
			$query_string="select name from ".$this->tbl_prefix."properties";
			$query=@mysql_db_query($this->database,$query_string,$this->connect_id);
			while ($prop=@mysql_fetch_array($query)) {
				if ($value=$this->load_property($object,$prop["name"],$values)) {
					$result[$prop["name"]]=$value;
				}
			}
		}
		return $result;
	}

	public function load_property($object, $property, $values="") {

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		if ($object) {
			$query_string="select * from ".$this->tbl_prefix."prop_".AddSlashes($property)." where ";
			if (is_array($values)) {
				while (list($name, $value)=each($values)) {
					$query_string.="AR_".AddSlashes($name)."=$value and ";
				}
			}
			$query_string.="object=$object";
			$query=@mysql_db_query($this->database,$query_string,$this->connect_id);
			$currProp=0;
			while ($prop=@mysql_fetch_array($query)) {
				reset($prop);
				while (is_array($prop) && (list($name,$val)=each($prop)) ) {
					if (($name!="object")&&(!is_int($name))) {
						if (is_string($val)) {
							$result[$currProp][substr($name,3)]="'".AddSlashes($val)."'";
						} else {
							$result[$currProp][substr($name,3)]=$val;
						}
					}
				}
				$currProp++;
			}
		}
		return $result;
	}

	public function add_property($object, $property, $values) {

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		if ($object) {
			while (list($name, $value)=each($values)) {
				if ($value!="") {
					$query_names.="AR_".AddSlashes($name).", ";
					$query_values.="$value, ";
				}
			}
			$query_string="insert into ".$this->tbl_prefix."prop_".AddSlashes($property)." ( ".
										$query_names."object ) values ( ".$query_values."$object )";
			mysql_db_query($this->database,$query_string, $this->connect_id);
			$result=mysql_affected_rows($this->connect_id);
		}
		return $result;
	}

	public function del_property($object, $property="", $values="") {

		$nodes_tbl=$this->tbl_prefix."nodes";
		$objects_tbl=$this->tbl_prefix."objects";
		$types_tbl=$this->tbl_prefix."types";

		if (intval($object)) {
			if (!$property) { // remove all properties for $object
				$query_string="select name from ".$this->tbl_prefix."properties";
				$temp=mysql_db_query($this->database,$query_string, $this->connect_id);
				while ($row=@mysql_fetch_array($temp)) {
					$query_string="delete from ".$this->tbl_prefix."prop_".$row["name"]." where object=$object";
					mysql_db_query($this->database,$query_string, $this->connect_id);
					$result+=mysql_affected_rows($this->connect_id);
				}
			} else {
				$query_string="delete from ".$this->tbl_prefix."prop_".AddSlashes($property)." where ";
				if (is_array($values)) {
					while (list($name, $value)=each($values)) {
						$query_string.="AR_".AddSlashes($name)."=$value and ";
					}
				}
				$query_string.="object=$object";
				mysql_db_query($this->database,$query_string, $this->connect_id);
				$result=mysql_affected_rows($this->connect_id);
			}
		}
		return $result;
	}

	public function set_nextid($path, $newid) {
	/**********************************************************************

		'private' function of mysql store. 
		(deprecated, but still available for backward compatibility).

	**********************************************************************/
		return $newid;
	}


	public function get_nextid($path, $mask="{5:id}") {
	/**********************************************************************

		'private' function of mysql store. This will return the next
		'autoid' for $path.

	**********************************************************************/

		$path=AddSlashes($path);

		$substr_s = strlen($path);
		if (ereg("^(.*)\{([0-9]:)?id\}(.*)",$mask,$matches)) { 
			$subid = 0;
			$mask_pre = $matches[1];
			$substr_s += strlen($mask_pre)+1;
			$substr_l = intval(substr($matches[2], 0, 1));
			if (!$substr_l) {
				$substr_l = 5; // default length is 5
			}
			$mask_post= $matches[3];
			$query_string = 
				"select max(substring(path, $substr_s, $substr_l)) as id
				from ".$this->tbl_prefix."nodes where 
				parent =  '$path' and
				path regexp '^".$path.$mask_pre."[0-9]\{".$substr_l."\}".$mask_post."'";

			//error($query_string);
			$result = mysql_db_query($this->database, $query_string, $this->connect_id);
			if ($result) {
				$row = mysql_fetch_array($result);
				$subid  = (int)$row["id"];
			}
			$subid=$subid+1;
			$subid = sprintf("%0".$substr_l."d", $subid);
		}
		return $subid;
	}


	public function priv_get_implements($type) {
	/**********************************************************************

		helper function for the query compiler.
		returns an array of alle types implementing the given type.

	**********************************************************************/
		$returnValue = array();
		/* retrieve an implements list */
		$types_tbl=$this->tbl_prefix."types";

		$query = "select type from $types_tbl where $types_tbl.implements = $type";
		$qresult = $this->store_run_query($query);

		while ($iresult = mysql_fetch_array($qresult)) {
			$returnValue[] = $iresult['type'];
		}

		mysql_free_result($qresult);

		return $returnValue;
	}


} // end class store

?>