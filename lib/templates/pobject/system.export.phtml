<?php
	if ($this->CheckLogin("read")) {
		global $AR;
		$saved_object = array();

		if (!function_exists('display')) {
			function display($str) {
				global $ARCurrent;
				if ($ARCurrent->options["verbose"]) {
					echo "$str";
					flush();
				}
			}
		}
		if (!function_exists('progress')) {
			function progress($current, $total) {
			//	if ($total > 0) {
					$progress = (int)(100*($current)/$total);
					display("progress: $current / $total ($progress %)\n");
			//	}
			}
		}

		if(!function_exists('getCommonParent')){
			function getCommonParent($base,$match,$store) {

				// if base is false, $match is the best parent
				if ( $base === false ) {
					return $match;
				}

				// check if $base matches $match prefix
				while ( $base != '/' && strpos($match,$base) !== 0 )  {
					$base = $store->make_path($base, "..");
				}
				return $base;
			}	
		}

		if (get_class($ARCurrent->importStore) == "axstore") {
			$ARCurrent->AXAction = "export";
			$ARCurrent->AXHeader = &$ARCurrent->importStore->header;
		} else {
			$ARCurrent->AXAction = "import";
			$ARCurrent->AXHeader = &$this->store->header;
		}

		/* create a dummy object for later use */
		$dummy = new pobject;
		$dummy->nls = new object;
		$dummy->axflags = true;
		$dummy->type = "pobject";
		reset($AR->nls->list);
		while (list($key, $val)=each($AR->nls->list)) {
			$dummy->$key=new object;
			$dummy->$key->name="Dummy node";
			$dummy->nls->list[$key]=$val;
		}


		if (!$srcpath) {
			$srcpath="/";
		}
		display("export($srcpath) to ($destpath)\n");


		if (!$destpath) {
			if ($srcpath!="/") {
				if (!$ARCurrent->importStore->exists("/")) {
					$checkpaths[]="/";
				}
				$path_str="/";
				$calc_path=substr($srcpath, 0, strrpos(substr($srcpath,0,-1),'/'));
				$path_elements=explode("/", $calc_path);
				while (list(,$element)=each($path_elements)) {
					if ($element) {
						$path_str.=$element."/";
						if (!$ARCurrent->importStore->exists($path_str)) {
							$checkpaths[]=$path_str;
						}
					}
				}

			}
			$destpath="/";
			$rootpath="/";
		} else {
			if ($destpath!="/") {
				$parent=$this->store->make_path($destpath, "..");
				if (!$ARCurrent->importStore->exists($parent)) {
					if ($parent=="/") {
						display($ARnls["axnorootnode"]);

						$ARCurrent->importStore->save(
								"/", 
								"pobject",
								$dummy,
								0,
								0,
								0,
								AX_DUMMY);
					} else {
						$ARCurrent->importStore->error=sprintf($ARnls["err:noparentdefined"],$destpath);
					}
				}
			}
			$rootpath=$srcpath;
		}



		$clearcachePath = false;

		if (!is_array($ARCurrent->options['rewrite_references'])) {
			$ARCurrent->options['rewrite_references'] = array();
		} else if ($ARCurrent->options['rewrite_references']['default']) {
			unset($ARCurrent->options['rewrite_references']['default']);
			$ARCurrent->options['rewrite_references'][ $rootpath ] = $destpath;
		}


		$offset=0;
		if (!$ARCurrent->importStore->error) {
			if($ARCurrent->options['without_children'] == true){
				if($criteria){
					$criteria .= ' and ';
				}
				$criteria .=" path = '$srcpath' ";
			}
			$processed_items = 0;

            if (get_class($this->store) == "axstore") {
				$items_to_process = count($this->store->nodes); // FIXME: This works for import, but not for export.
			} else {
				$query = "object.path =~ '" . $srcpath . "%' order by path ASC";
				$items_to_process = $this->count_find($srcpath, $query);
			}
			$stepsize=100;
			progress(0, $items_to_process);
			while (count($result=$this->store->call("system.export.object.phtml",$arCallArgs,$this->store->find($srcpath,$criteria,$stepsize,$offset)))) {
				if (is_array($checkpaths)) {
					unset($newresult);
					@reset($checkpaths);
					while (list(,$path)=@each($checkpaths)) {
						if (!$ARCurrent->importStore->exists($path)) {
							$arguments = $arCallArgs;
							$arguments["setDummyObject"] = true;
							$temp_obj=current($this->store->call("system.export.object.phtml",
													$arguments,
													$this->store->get($path)));
							$temp_obj->axflags |= AX_DUMMY;

							$newresult[]=$temp_obj;
						}
					}
					while (list($key,)=each($result)) {
						$newresult[]=$result[$key];
					}
					$result=$newresult;
					reset($result);
					unset($checkpaths);
				}

				while (is_array($result) && (list($key,$object)=each($result))) {
					if ($object->parent != '..' && !$object->exists($object->parent)) {
						display("Found orphaned node '".$object->path."' (skipping)\n");
						continue;
					}
					$newpath=$destpath.substr($object->path, strlen($rootpath));
					$oldpath=$object->path;
					$update_obj = false;
					$save_obj = true;

					if (is_array($exclude_list)) {
						reset($exclude_list);
						while ($save_obj && (list($key, $excl_path)=each($exclude_list))) {
							if (substr($newpath, 0, strlen($excl_path)) == $excl_path) {
								$save_obj = false;
							}
						}
					}

					if ($save_obj) {
						display("processing($newpath)	");
						if ($ARCurrent->options["without_data"]) {
							display("no data for (".$object->path.")");
							$object->axflags |= AX_WITHOUT_DATA;
						}

						if ($ARCurrent->options["without_templates"]) {
							unset($object->data->config->privatetemplates);
							unset($object->data->config->templates);
							unset($object->data->config->pinp);
							$object->axflags |= AX_WITHOUT_TEMPLATES;
						}

						if ($ARCurrent->options["without_files"]) {
							$object->axflags |= AX_WITHOUT_FILES;
						}

						if (!$saved_object[$object->id]) {
							if ((!$ARCurrent->options["force"] || ($object->axflags & (AX_DUMMY | AX_WITHOUT_DATA))) && $ARCurrent->importStore->exists($newpath)) {
								$saved_object[$object->id]=$newpath;
								// we may never overwrite an existing object with a
								// dummy object
								if (!($object->axflags & AX_DUMMY) && 
									!($object->axflags & AX_WITHOUT_DATA)) {

									$oldObject=current($ARCurrent->importStore->call("system.get.clone.phtml", $arCallArgs,
													$ARCurrent->importStore->get($newpath)));

									if (($object->lastchanged > $oldObject->lastchanged)) {
										display("(updating)");
										$save_obj = true;
									} else {
										$save_obj = false;
										display("(ok)");
										unset($oldObject);	// no update needed
									}
								} else {
									display("(no overwrite)");
									$save_obj = false;
								}
							}


							if ($save_obj) {
								$clearcachePath = getCommonParent($clearcachePath,$newpath,$this->store);

								// next one has to be linked
								$saved_object[$object->id]=$newpath;

									if ($ARCurrent->importStore->exists($newpath)) {

										$ARCurrent->importStore->call(
												"system.export.update.phtml", 
												Array("newObject" => $object),
												$ARCurrent->importStore->get($newpath));


									} else {
										$impObject = clone $object ;
										display("(saving ".(($impObject->axflags) ? " (".$object->axflags.") " : "").")");
										$impObject->arIsNewObject = true;
										$impObject->path = $newpath;
										if ($newpath!="/") {
											$impObject->parent = $this->store->make_path($newpath, "..");
										} else {
											$impObject->parent = "..";
										}
										$impObject->store = $ARCurrent->importStore;
										$impObject->call("system.import.phtml", $arCallArgs);
										if ($impObject->error) {
											display("\n	ERROR (".$impObject->error.")\n");
											$exclude_list[] = $impObject->path;
											continue;
										}
									}
							}

							if (!($object->axflags & AX_DUMMY)) {
									$clearcachePath = getCommonParent($clearcachePath,$newpath,$this->store);

									$object->newObject=current(
										$ARCurrent->importStore->call("system.get.clone.phtml", $arCallArgs,
											$ARCurrent->importStore->get($newpath)));

									if (!($object->axflags & AX_WITHOUT_TEMPLATES)) {
										// (update or set templates and files)
										$object->call("system.export.templates.phtml", $arCallArgs);
									}
									if (!($object->axflags & AX_WITHOUT_FILES)) {
										$object->call("system.export.files.phtml", $arCallArgs);
									}
							}

						} else {
							if (!$ARCurrent->importStore->exists($newpath)) {
								display("(linking)");
								$ARCurrent->importStore->link($saved_object[$object->id], $newpath);
							}
						}
						display("\n");

						$check_path = $this->store->make_path($newpath, "..");
						if ($oldpath!=$srcpath && !$nextid_checks[$check_path]) {
							$nextid_checks[$check_path] = true;
							$nextid = $this->store->get_nextid($this->store->make_path($oldpath, ".."));
							if ($nextid > 1) {
								$ARCurrent->importStore->set_nextid($check_path, $nextid);
								display("setting nextid ($nextid)\n");
							}
						}
					} else {
						display("	skipping ($newpath)\n");
					}
					$items_processed++;
					progress($items_processed, $items_to_process);
				}
				$offset+=$stepsize;
			}
			if (!$ARCurrent->options["without_grants"]) {
				display("updating grants (groups)\n");
				@reset($ARCurrent->grants_list);
				while (list($type, $type_logins)=@each($ARCurrent->grants_list)) {
					while (list($login, )=each($type_logins)) {
						if ($type=="pgroup") {
							unset($criteria);
							$criteria["login"]["value"]["="]="'$login'";
							$criteria["object"]["type"]["="]="'pgroup'";
							$arguments = $arCallArgs;
							$arguments["importDestPath"] = $destpath;
							$arguments["importRootPath"] = $rootpath;
							$ARCurrent->importStore->call("system.import.groupgrants.phtml", 
															$arguments,
															$result=$ARCurrent->importStore->find("/system/groups/", $criteria));
						} 
					}
				}

				display("updating grants (users)\n");
				@reset($ARCurrent->grants_list);
				while (list($type, $type_logins)=@each($ARCurrent->grants_list)) {
					while (list($login, )=each($type_logins)) {
						if ($type=="puser") {
							unset($criteria);
							$criteria["login"]["value"]["="]="'$login'";
							$criteria["object"]["type"]["="]="'puser'";
							$ARCurrent->importStore->call("system.import.usergrants.phtml", $arCallArgs,
								$result=$ARCurrent->importStore->find("/system/users/", $criteria));
						} 
					}
				}

			}
			if ($ARCurrent->AXAction == "import") {
				display("clearing cache on $clearcachePath.\n");
				$ARCurrent->importStore->call("system.cache.clear.phtml", 
						Array(
							"private" => true,
							"recurse" => true
						) , $ARCurrent->importStore->get($clearcachePath));
			}
		}
	}
?>