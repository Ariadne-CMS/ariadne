#!/usr/bin/php -q
<?php
	$ariadne="../lib";
	require($ariadne."/configs/ariadne.phtml");
	require($ariadne."/configs/store.phtml");
	require($ariadne."/configs/axstore.phtml");
	require($ariadne."/includes/loader.web.php");
	require($ariadne."/stores/".$store_config["dbms"]."store.phtml");
	include($ariadne."/stores/axstore.phtml");


	$HELP_INFO="export [--options] [source path] [destination path] file.ax
  The export command will export objects from the current Ariadne database to
  the specified .ax file. It will export all objects specified 
  by [source path] to your .ax at [destination path].

  options are:
    --verbose                Display what we are doing
    --force                  Force saving of objects
    --without-grants         Don't export grant information
    --without-templates      Don't export templates
    --without-files          Don't export files
    --tar_nofail             Skip tar/gz errors
    --convertToUTF8-[nls]=[source charset] 
                             Convert data for language [nls] from 
                             [source-charset] to UTF-8. Default 
                             source-charset is CP1252.
    --help                   This information\n\n";



	$arg_c=0;
	$arg_v[$arg_c++]=$argv[0];

	next($argv); // do not parse the filename
	while (list(,$cmd)=each($argv)) {
		if (strpos($cmd, "--") === 0) {
			if (strpos(substr($cmd, 2),"-")===false) {
				$option_switch=substr($cmd, 2);
			} else {

				$option_switch=substr($cmd, 2, strpos(substr($cmd, 2),"-"));

				if (strpos($cmd, "=")!==false) {
					$option_value=substr($cmd, strpos($cmd, "=")+1);
					$option=substr($cmd, strlen($option_switch)+3, strpos($cmd, "=") - (strlen($option_switch)+3));
				} else {
					$option=substr($cmd, strlen($option_switch)+3);
				}
			}

			//echo "switch($option_switch)($option)='$option_value'\n";

			switch ($option_switch) {
				case 'with':
					$ARCurrent->options[$option]=($option_value) ? $option_value : true;
				break;
				case 'without':
					$ARCurrent->options["without_$option"]=true;
				break;

				case 'help':
					echo $HELP_INFO;
					exit;
				break;

				case 'convertToUTF8':
				case 'convert2UTF8':
					if (!$option_value) {
						$option_value = "CP1252";
					}
					$callArgs["convert_charsets"][$option] = $option_value;
				break;

				case 'verbose':
					$ARCurrent->options["verbose"]=true;
				break;

				case 'force':
					$ARCurrent->options["force"]=true;
				break;

				case 'tar_nofail':
					$ax_config["tar_nofail"]=true;
				break;

				case 'tar_fail':
					$ax_config["tar_nofail"]=false;
				break;

				default:
					echo "unknow option-switch ($option_switch)\n";
			}
		} else {
			$arg_v[$arg_c++]=$cmd;
		}
	}

        set_time_limit(0);

	if ($arg_c>=2) {
		$ARLogin="admin";
		$AR->user=new object;
		$AR->user->data=new object;
		$AR->user->data->login="admin";

		if ($arg_c>3) {
			$ax_config["database"]=$arg_v[3];
			$srcpath=$arg_v[1];
			$destpath=$arg_v[2];
		} else
		if ($arg_c>2) {
			$ax_config["database"]=$arg_v[2];
			$srcpath=$arg_v[1];
			$patharray = explode(",", $srcpath);
		} else {
			$ax_config["database"]=$arg_v[1];
		}

		$ax_config["writeable"]=true;
		$importStore=new axstore("", $ax_config);
		if (!$importStore->error) {
			$inst_store = $store_config["dbms"]."store";
			$store=new $inst_store($root,$store_config);

			if (is_array($patharray) && count($patharray)>1) {
				while (list(, $patharray_entry)=each($patharray)) {
					$patharray_entry = explode("=>", $patharray_entry);
					$srcpath = $patharray_entry[0];
					$destpath = $patharray_entry[1];
					echo "srcpath ($srcpath) destpath($destpath)\n";					
					$ARCurrent->importStore=&$importStore;
					$callArgs["srcpath"] = $srcpath;
					$callArgs["destpath"] = $destpath;
					$error=current($store->call("system.export.phtml", $callArgs,
						$store->get("/")));
				}
			} else {
				$ARCurrent->importStore=&$importStore;
				$callArgs["srcpath"] = $srcpath;
				$callArgs["destpath"] = $destpath;
				$error=current($store->call("system.export.phtml", $callArgs,
					$store->get("/")));
			}
			$importStore->close();

		} else {
			$error="ax error: ".$importStore->error;
		}

		if ($error) {
			echo $error."\n";
		}
	} else {
		echo $HELP_INFO;
	}
?>
