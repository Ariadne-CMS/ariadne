#!/usr/bin/php -q
<?php
	$ariadne="../lib";
	require($ariadne."/configs/ariadne.phtml");
	require($ariadne."/configs/store.phtml");
	require($ariadne."/configs/axstore.phtml");
	require($ariadne."/includes/loader.web.php");
	require($ariadne."/stores/".$store_config["dbms"]."store.phtml");
	include($ariadne."/stores/axstore.phtml");


	$HELP_INFO="export [--options] [source path] [destination path] file.ax
	The import command will export from the current Ariadne database to
	to specified .ax file. It will import all objects specified 
	by [source path] to your .ax at [destination path].

	options are:
		--verbose		Display what we are doing
		--force			Force saving of objects
		--without-grants	Don't export grant information
		--tar_nofail		Suppres tar/gz errors
		--help			This information\n";



	$arg_c=0;
	$arg_v[$arg_c++]=$argv[0];

	next($argv); // do not parse the filename
	while (list(,$cmd)=each($argv)) {
		if (strpos($cmd, "--") === 0) {
			if (strpos(substr($cmd, 2),"-")===false) {
				$option_switch=substr($cmd, 2);
			} else {

				$option_switch=substr($cmd, 2, strpos(substr($cmd, 2),"-"));

				if (strpos($cmd, "=")!==false) {
					$option_value=substr($cmd, strpos($cmd, "=")+1);
					$option=substr($cmd, strlen($option_switch)+3, strpos($cmd, "=") - (strlen($option_switch)+3));
				} else {
					$option=substr($cmd, strlen($option_switch)+3);
				}
			}

			//echo "switch($option_switch)($option)='$option_value'\n";

			switch ($option_switch) {
				case 'with':
					$ARCurrent->options[$option]=($option_value) ? $option_value : true;
				break;
				case 'without':
					$ARCurrent->options["without_$option"]=true;
				break;

				case 'help':
					echo $HELP_INFO;
					exit;
				break;

				case 'verbose':
					$ARCurrent->options["verbose"]=true;
				break;

				case 'force':
					$ARCurrent->options["force"]=true;
				break;

				case 'tar_nofail':
					$ax_config["tar_nofail"]=true;
				break;

				case 'tar_fail':
					$ax_config["tar_nofail"]=false;
				break;

				default:
					echo "unknow option-switch ($option_switch)\n";
			}
		} else {
			$arg_v[$arg_c++]=$cmd;
		}
	}

        set_time_limit(0);

	if ($arg_c>=2) {
		$ARLogin="admin";
		$AR->user=new object;
		$AR->user->data=new object;
		$AR->user->data->login="admin";

		if ($arg_c>3) {
			$ax_config["database"]=$arg_v[3];
			$srcpath=$arg_v[1];
			$destpath=$arg_v[2];
		} else
		if ($arg_c>2) {
			$ax_config["database"]=$arg_v[2];
			$srcpath=$arg_v[1];
		} else {
			$ax_config["database"]=$arg_v[1];
		}

		$ax_config["writeable"]=true;
		$importStore=new axstore("", $ax_config);
		if (!$importStore->error) {
			$inst_store = $store_config["dbms"]."store";
			$store=new $inst_store($root,$store_config);

			$ARCurrent->importStore=&$importStore;
			$callArgs=Array("srcpath" => $srcpath,
							"destpath" => $destpath);
			$error=current($store->call("system.export.phtml", $callArgs,
				$store->get("/")));

			$importStore->close();

		} else {
			$error="ax error: ".$importStore->error;
		}

		if ($error) {
			echo $error."\n";
		}
	} else {
		echo $HELP_INFO;
	}
?>
