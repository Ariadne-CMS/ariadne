<?php

	/******************************************************************
	 system.save.grants.phtml                              Muze Ariadne
	 ------------------------------------------------------------------
	 Arguments: $path, $delete, $type, $id, $newgrants, $grant, 
				$modifier
	 Grant needed: config
	 Global variables: none

	 This template saves changes to grants defined at the current
	 object. It then updates the changes at the user/group object too.
	 
	 no result

	******************************************************************/
	if ($this->CheckLogin("config") && $this->CheckConfig()) {
		include_once($this->store->get_config("code")."modules/mod_grant.php");

		// some variable fetching stuff
		$path=$this->getdata("path", "none");
		$newgrants=$this->getdata("newgrants", "none");
		$delete=$this->getdata("delete", "none");
		$type=$this->getdata("type", "none");
		$id=$this->getdata("id", "none");
		$grant=$this->getdata("grant" , "none");
		$modifier=$this->getdata("modifier", "none");
		if ($delete) {
			if (!$type || !$id || !$delete) {
				$this->error=$ARnls["err:missingparam"];
			}
		} else {
			if (!$path || !$newgrants) {
				$this->error=$ARnls["err:missingparam"];
			}
		}

		if (!function_exists("arGetGrantType")) {
			function arGetGrantType($value) {
				if (($value & ARMASKLOCAL) && ($value & ARMASKCHILDREN)) {
					$result="+";
				} else if ($value & ARMASKLOCAL) {
					$result="=";
				} else {
					$result=">";
				}
				return $result;
			}
		}

		if (!function_exists("arDelGrant")) {
			function arDelGrant(&$grants, $id, $grant='', $modifier='') {
				// for those wondering why $id is needed: try unsetting a reference...
				// unset($grants) will not remove the original data, only the reference to it
				if (!$grant) {
					unset($grants[$id]);
				} else if ($grants[$id]) {
					if (!$modifier) {
						unset($grants[$id][$grant]);
					} else {
						unset($grants[$id][$grant][$modifier]);
						if (!@count($grants[$id][$grant])) {
							unset($grants[$id][$grant]);
						}
					}
					if (!@count($grants[$id])) {
						unset($grants[$id]);
					}
				}
			}
		}
		if (!$this->error) {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
			$this->data=current($this->get(".","system.get.data.phtml"));

			if (!$path) {
				$searchpath["pgroup"]="/system/groups/";
				$searchpath["puser"]="/system/users/";
				$criteria["login"]["value"]["="]="'".AddSlashes($id)."'";
				if ($temp=current($this->find($searchpath[$type], $criteria, "system.get.phtml"))) {
					$path=$temp->path;
				} else {
					$this->error=sprintf($ARnls["err:notfindusergroup"],$id);
				}
			}
			if ($delete) {
				arDelGrant($this->data->config->grants[$type], $id, $grant, $modifier);
				$result=current($this->get($path, "system.save.grants.user.phtml", Array(
								"action"	=> "delete",
								"path"		=> $this->path,
								"grant"		=> $grant,
								"modifier"	=> $modifier)));
				if ($result==$ARnls["ok"] || !$path) {
					$this->save();
				} else {
					$this->error=sprintf($ARnls["err:notremovegrant"],$id,$path);
				}
			} else if ($newgrants) {
				if ($type=current($this->get($path, "system.get.type.phtml"))) {
					if ($this->store->implements($type, "pgroup")) {
						$type="pgroup";
					} else if ($this->store->implements($type, "puser")) {
						$type="puser";
					} else {
						$this->error=sprintf($ARnls["err:nousergroup"],$path);
					}
					if (!$this->error) {	
						if ($id=current($this->get($path, "system.get.login.phtml"))) {
							$criteria["login"]["value"]["="]="'".AddSlashes($id)."'";
							$newgrants=ereg_replace('([\(\)])',' \\1 ',$newgrants);
							$newgrants=str_replace(',',' ',$newgrants);
							$newgrants=ereg_replace("[[:space:]]"," ",$newgrants);
							$firstgrant=strtok($newgrants, " ");
							if ($firstgrant=="{}") {
								if ($result=current($this->get($path, "system.get.grants.phtml", Array("path" => $this->path)))) {
									$current=implode(" ", array_keys($result));
									$newgrants=ereg_replace(' ?\{\} ?',AddSlashes($current),$newgrants);
								}
							} else if (ereg('(\{(.*)\})',$firstgrant,$regs)) {
								$cloned="";
								if ($this->data->config->grants[$type][$regs[2]]) {
									while (list($key, $value)=each($this->data->config->grants[$type][$regs[2]])) {
										if (is_array($value)) {
											$cloned.="$key ( ";
											while (list($modifier, $mod_val)=each($value)) {
												$cloned.=arGetGrantType($mod_val).$modifier." ";
											}	
											$cloned.=" ) ";
										} else {
											$cloned.=arGetGrantType($value).$key." ";
										}
									}
								}
								$newgrants=ereg_replace(" ?".$regs[1]." ?",AddSlashes($cloned),$newgrants);
							}
							$g_comp = new mod_grant;
							$grants = $this->data->config->grants[$type][$id];
							if (!is_array($grants)) {
								$grants = Array();
							}
							$g_comp->compile($newgrants, $grants);
							if (!$g_comp->error) {
								$this->data->config->grants[$type][$id] = $grants;
								if (!@count($this->data->config->grants[$type][$id])) {
									unset($this->data->config->grants[$type][$id]);
									if (!@count($this->data->config->grants[$type])) {
										unset($this->data->config->grants[$type]);
									}
								}
								$result=current($this->get($path, "system.save.grants.user.phtml", Array(
												"action"	=> "set",
												"path"		=> $this->path,
												"grants"	=> $this->data->config->grants[$type][$id])));

							} else {
								$this->error = $g_comp->error;
							}
						} else {
							$this->error=sprintf($ARnls["err:notgetlogin"],$path);
						}
					}
				} else {
					$this->error=sprintf($ARnls["err:notfindusergroup"],$path);
				}
				if (!$this->error) {
					$this->save($properties);
					// clear public cache recursively
					$this->ClearCache($this->path, false, true);
				}
			}
		}
	}
?>
