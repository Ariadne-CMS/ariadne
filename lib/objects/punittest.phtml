<?php
    /******************************************************************
     punittest.phtml                                       Muze Ariadne
     ------------------------------------------------------------------
     Copyright 2016 Muze
    ******************************************************************/

require_once(AriadneBasePath."/objects/pdir.phtml");

class punittest extends pdir implements PHPUnit_Framework_Test {

    public function count() {
        return 1;
    }

    public function run(PHPUnit_Framework_TestResult $result = NULL) {
        global $AR;
        if(!$AR->user) {
            echo "RECOVERING USER PUBLIC\n";
            $this->pushContext(array("scope" => "php"));
                $AR->user=current(
                    $this->get("/system/users/public/", "system.get.phtml")
                );
            $this->popContext();

        }
        if ($result === NULL) {
            $result = new PHPUnit_Framework_TestResult;
        }
        foreach ( $this->data->config->pinp['punittest'] as $template => $templateInfo ) {
            if ( substr($template, 0, 5) !== 'test.') {
                continue;
            }
            $result->startTest($this);
            PHP_Timer::start();
            $stopTime = null;
            try {
                $this->call($template);
            } catch (PHPUnit_Framework_AssertionFailedError $e) {
                $stopTime = PHP_Timer::stop();
                $result->addFailure($this, $e, $stopTime);
            } catch(\Exception $e) {
                var_dump($e);
                $stopTime = PHP_Timer::stop();
                $result->addError($this, $e, $stopTime);
            }
            if ( $stopTime===null ) {
                $stopTime = PHP_Timer::stop();
            }
            $result->endTest($this, $stopTime);
        }
        return $result;
    }

    public function __call($name, $args)
    {
        if ( substr($name, 0, 7)==='_assert' ) {
            if (!method_exists('PHPUnit_Framework_Assert',substr($name,1))) {
                throw new \Exception('Method '.substr($name,1).' not found',404);
            }
            return call_user_func_array(
                'PHPUnit_Framework_Assert::'.substr($name,1),
                $args
            );
        } else {
            return parent::__call($name, $args);
        }
    }

    public function _run() {
        $suite = new PHPUnit_Framework_TestSuite();

        $suite->addTest($this); //punittest

        //$listener = new PHPUnit_Util_TestDox_ResultPrinter_HTML();
        //$result = new PHPUnit_Framework_TestResult();
        //$result->addListener($listener);
        $result = $suite->run($result); // => PHPUnit_Framework_TestResult

        $printer = new PHPUnit_TextUI_ResultPrinter();
        echo '<pre>';
        $printer->printResult($result);
        echo '</pre>';
        return $result;
    }

}