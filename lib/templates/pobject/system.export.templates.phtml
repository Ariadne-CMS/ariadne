<?php
  if ($this->CheckLogin("read") && !$ARCurrent->options["without_templates"]) {

		if ( ($this->newObject->arIsNewObject && $this->newObject->CheckLogin("add", $this->newObject->type)) ||
			(!$this->newObject->arIsNewObject && $this->newObject->CheckLogin("edit"))) {
			 $orig_filestore=$this->store->get_filestore("templates");
			 $orig_templates=$orig_filestore->ls($this->id);
			 if (is_array($orig_templates)) {

				$new_filestore=$this->newObject->store->get_filestore("templates");
				/* 
					if we have to do a forced update, we have to remove all 
					files in the new_filestore first
				*/
				if ($ARCurrent->options["force"]) {
					$new_filestore->purge($this->newObject->id);
					unset($this->newObject->data->templates);
					unset($this->newObject->data->pinp);
					$save=1;
				}


				while (list(,$template)=each($orig_templates)) {
					display("\n");
					if ($new_filestore->exists($this->newObject->id, $template) &&
						( $new_filestore->mtime($this->newObject->id, $template) >
							$orig_filestore->mtime($this->id, $template))) {
								display("	template($template) no update");
					} else {
						$tempname=tempnam($this->store->files."temp", "temp");
						if (!$orig_filestore->copy_from_store($tempname, $this->id, $template)) {
							display("	error: could not copy $template from store !");
						} else {
							if (!$new_filestore->copy_to_store($tempname, $this->newObject->id, $template)) {
								display("	error: could not copy $template to store");
							} else {
								display("	template($template) created");
							}
						}
						@unlink($tempname);
					}
				}

				if ($this->data->templates) {
					$save=1;
					$templates=$this->data->templates;
					while (is_array($templates) && (list($type, $functions)=each($templates))) {
						while (is_array($functions) && (list($function, $languages)=each($functions))) {
							while (is_array($languages) && (list($language, $file)=each($languages))) {
								//echo "		templates[$type][$function][$language]=".$this->newObject->id."\n";
								$this->newObject->data->templates[$type][$function][$language]=$this->newObject->id;
							}
						}
					}
				}
				if ($this->data->pinp) {
					$save=1;
					$pinp=$this->data->pinp;
					while (is_array($pinp) && (list($type, $functions)=each($pinp))) {
						while (is_array($functions) && (list($function, $languages)=each($functions))) {
							while (is_array($languages) && (list($language, $file)=each($languages))) {
								//echo "		pinp[$type][$function][$language]=".$this->newObject->id."\n";
								$this->newObject->data->pinp[$type][$function][$language]=$this->newObject->id;
							}
						}
					}
				}

				if ($save) {
					$this->newObject->store->save(
						$this->newObject->path,
						$this->newObject->type,
						$this->newObject->data,
						$this->newObject->properties,
						$this->newObject->vtype,
						$this->newObject->priority,
						$this->newObject->axflags);
				}
			 }
		}
 }
  
?>