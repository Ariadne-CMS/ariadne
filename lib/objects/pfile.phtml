<?php
    /******************************************************************
     pfile.phtml                                           Muze Ariadne
     ------------------------------------------------------------------
     Author: Muze (info@muze.nl)
     Date: 31 october 2002

     Copyright 2002 Muze

     This file is part of Ariadne.

     Ariadne is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published 
     by the Free Software Foundation; either version 2 of the License, 
     or (at your option) any later version.
 
     Ariadne is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with Ariadne; if not, write to the Free Software 
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  
     02111-1307  USA

    -------------------------------------------------------------------

     Class inheritance: 	pobject > pfile
     Description:

       This is the class definition file of the pfile class.

    ******************************************************************/

debug("pfile: Load","object");
include_once($this->code."objects/pobject.phtml");
include_once($this->code."modules/mod_url.php");

class pfile extends pobject { // pfile class definition

	function GetFile() {
		$files=$this->store->get_filestore("files");
		return $files->read($this->id, "file");
	}

	function ParseFile($file) {
		return URL::ARtoRAW($file, true);
	}

	function ShowFile() {
		global $AR;
		$files=$this->store->get_filestore("files");
		if (!ereg("^text/",$this->data->mimetype)) {
			$size=$files->size($this->id, "file");
		}
		if (ldSetContent($this->data->mimetype, $size)) {
			$cacheseconds=1800; // 1/2 hour
			$expires=time()+$cacheseconds;
			if ($AR->user->data->login=="public" || $this->CheckPublic("read")) {
				// always set the client side cache headers, independant of
				// server side cache configuration. Except for private content
				// (needed to prevent proxies from caching it too). If server 
				// side caching is on, the loader will override this header.
				ldSetClientCache(true, $expires);
			}
		} else if(!ereg("^text/",$this->data->mimetype)) {
			error( sprintf( $ARnls["err:headerssentnottext"], $this->path ) );
			// FROP error("headers already sent and this is not a text file (".$this->path.")");
			$stop=true;
		}
		if( !$stop ) {
			if ($this->data->mimetype=="text/html") { // parse {arRoot}
				// assume html files to use charset UTF-8; this will always work correctly
				// with the MSIE html editor, and won't corrupt 'normal' html.
				ldHeader("Content-Type: text/html; charset=UTF-8");
				echo $this->ParseFile($this->GetFile());
			} else {
				// set pragma: cache; bug workaround for internet explorer and https
				if (ldGetServerVar('HTTPS')) {
					ldHeader('Pragma: cache');
				}
				$files->show($this->id, "file");
			}
		}
		$files->close();
	}

	function DownloadFile() {
		$files=$this->store->get_filestore("files");
		if (!ereg("^text/",$this->data->mimetype)) {
			$size=$files->size($this->id, "file");
		}
		$filename=substr($this->path, strlen($this->parent), -1);
		ldHeader('Cache-Control: no-cache, must-revalidate');
        // set pragma: cache; bug workaround for internet explorer and https
		if (ldGetServerVar('HTTPS')) {
			ldHeader('Pragma: cache');
		} else {
			ldHeader('Pragma: no-cache');
		}
		if (!ldHeader("Content-type: application/x-ariadne-download\nContent-Disposition: inline; filename=\"".$filename."\"\nContent-length:".(string)$size)) {
			error( sprintf( $ARnls["err:headerssentnottext"], $this->path ) );
			// FROP error("headers already sent and this is not a text file (".$this->path.")");
		} else {
			$files->show($this->id, "file");
		}
		$files->close();
	}

	function _ParseFile($file) {
		return $this->ParseFile($file);
	}
  
	function _GetFile() {
		return $this->GetFile();
	}
  
	function _ShowFile() {
		return $this->ShowFile();
	}

	function _DownloadFile() {
		return $this->DownloadFile();
	}

	function GetPlainText() {  
		global $AR;
		$result="";
		$files=$this->store->get_filestore("files");
		
		
		$mimetype=$this->data->mimetype=$this->getdata("mimetype","none");
		if (eregi("^text/", $mimetype)) {
			$result=$this->GetFile();
			if ($mimetype=="text/html") {
				$result=$this->html_to_text($result);
			}
		} elseif (eregi("^application/(.*)$", $mimetype, $regs)) {
			$textualizer=$AR->Textualizers[$regs[1]];
			if ($textualizer) {
				$temp_file = tempnam($this->store->get_config('files').'temp/', 'totext');
				@unlink($temp_file);

				$files->copy_from_store($temp_file, $this->id, 'file');
				exec(ereg_replace('FILE', $temp_file, $textualizer), $result, $ret);

				@unlink($temp_file);
				if (!$ret) {
					$result = implode("\n", $result);
				}
			}
		}
		return $result;
	}
	
	function _GetPlainText() {
		return $this->GetPlainText();
	}
  
} // end of pfile class definition
?>