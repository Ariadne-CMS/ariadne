<?php
	global $ARnls;

	$language=$AR->user->data->language;
	if (!$AR->nls->list[$language]) {
		$language='en';
	}
	$language = preg_replace('/[^a-z0-9_]/i', '', $language);
	include($this->store->get_config("code")."nls/".$language);
	include($this->store->get_config("code")."nls/vedor-editor.".$language);

    /******************************************************************
     editor.ini                                            Muze Ariadne
     ------------------------------------------------------------------
     Author: Muze (info@muze.nl)
     Date: 26 november 2002

     Copyright 2002 Muze

     This file is part of Ariadne.

     Ariadne is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published 
     by the Free Software Foundation; either version 2 of the License, 
     or (at your option) any later version.
 
     Ariadne is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with Ariadne; if not, write to the Free Software 
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  
     02111-1307  USA

    -------------------------------------------------------------------

     Description:

       This is the configuration file for the html editor widget.

    ******************************************************************/

	// List of predefined html editor options, MS DHTML editing component
	define(DECMD_BOLD ,                      5000);
	define(DECMD_COPY ,                      5002);
	define(DECMD_CUT ,                       5003);
	define(DECMD_DELETE ,                    5004);
	define(DECMD_DELETECELLS ,               5005);
	define(DECMD_DELETECOLS ,                5006);
	define(DECMD_DELETEROWS ,                5007);
	define(DECMD_FINDTEXT ,                  5008);
	define(DECMD_FONT ,                      5009);
	define(DECMD_GETBACKCOLOR ,              5010);
	define(DECMD_GETBLOCKFMT ,               5011);
	define(DECMD_GETBLOCKFMTNAMES ,          5012);
	define(DECMD_GETFONTNAME ,               5013);
	define(DECMD_GETFONTSIZE ,               5014);
	define(DECMD_GETFORECOLOR ,              5015);
	define(DECMD_HYPERLINK ,                 5016);
	define(DECMD_IMAGE ,                     5017);
	define(DECMD_INDENT ,                    5018);
	define(DECMD_INSERTCELL ,                5019);
	define(DECMD_INSERTCOL ,                 5020);
	define(DECMD_INSERTROW ,                 5021);
	define(DECMD_INSERTTABLE ,               5022);
	define(DECMD_ITALIC ,                    5023);
	define(DECMD_JUSTIFYCENTER ,             5024);
	define(DECMD_JUSTIFYLEFT ,               5025);
	define(DECMD_JUSTIFYRIGHT ,              5026);
	define(DECMD_LOCK_ELEMENT ,              5027);
	define(DECMD_MAKE_ABSOLUTE ,             5028);
	define(DECMD_MERGECELLS ,                5029);
	define(DECMD_ORDERLIST ,                 5030);
	define(DECMD_OUTDENT ,                   5031);
	define(DECMD_PASTE ,                     5032);
	define(DECMD_REDO ,                      5033);
	define(DECMD_REMOVEFORMAT ,              5034);
	define(DECMD_SELECTALL ,                 5035);
	define(DECMD_SEND_BACKWARD ,             5036);
	define(DECMD_BRING_FORWARD ,             5037);
	define(DECMD_SEND_BELOW_TEXT ,           5038);
	define(DECMD_BRING_ABOVE_TEXT ,          5039);
	define(DECMD_SEND_TO_BACK ,              5040);
	define(DECMD_BRING_TO_FRONT ,            5041);
	define(DECMD_SETBACKCOLOR ,              5042);
	define(DECMD_SETBLOCKFMT ,               5043);
	define(DECMD_SETFONTNAME ,               5044);
	define(DECMD_SETFONTSIZE ,               5045);
	define(DECMD_SETFORECOLOR ,              5046);
	define(DECMD_SPLITCELL ,                 5047);
	define(DECMD_UNDERLINE ,                 5048);
	define(DECMD_UNDO ,                      5049);
	define(DECMD_UNLINK ,                    5050);
	define(DECMD_UNORDERLIST ,               5051);
	define(DECMD_PROPERTIES ,                5052);
	// OLECMDEXECOPT  
	define(OLECMDEXECOPT_DODEFAULT ,         0); 
	define(OLECMDEXECOPT_PROMPTUSER ,        1);
	define(OLECMDEXECOPT_DONTPROMPTUSER ,    2);
	// DHTMLEDITCMDF
	define(DECMDF_NOTSUPPORTED ,             0); 
	define(DECMDF_DISABLED ,                 1); 
	define(DECMDF_ENABLED ,                  3);
	define(DECMDF_LATCHED ,                  7);
	define(DECMDF_NINCHED ,                  11);
	// DHTMLEDITAPPEARANCE
	define(DEAPPEARANCE_FLAT ,               0);
	define(DEAPPEARANCE_3D ,                 1); 
	// OLE_TRISTATE
	define(OLE_TRISTATE_UNCHECKED ,          0);
	define(OLE_TRISTATE_CHECKED ,            1);
	define(OLE_TRISTATE_GRAY ,               2);

	global $ARConfig;

	// predefined editor settings, which editor buttons disabled
	// and which tags are allowed:
	// strict editor settings, basic html
	$arEditorDefaults["_strict"]=Array(
		DECMD_HYPERLINK => 1,
		DECMD_IMAGE => 1,
		DECMD_INDENT => 1,
		DECMD_INSERTCELL => 1,
		DECMD_INSERTCOL => 1,
		DECMD_INSERTROW => 1,
		DECMD_INSERTTABLE => 1,
		DECMD_JUSTIFYCENTER => 1,
		DECMD_JUSTIFYLEFT => 1,
		DECMD_JUSTIFYRIGHT => 1,
		DECMD_LOCK_ELEMENT => 1,
		DECMD_MAKE_ABSOLUTE => 1, 
		DECMD_MERGECELLS => 1, 
		DECMD_ORDERLIST => 1,
		DECMD_OUTDENT => 1,
		DECMD_SEND_BACKWARD => 1,
		DECMD_BRING_FORWARD => 1,
		DECMD_SEND_BELOW_TEXT => 1,
		DECMD_BRING_ABOVE_TEXT => 1,
		DECMD_SEND_TO_BACK => 1,
		DECMD_BRING_TO_FRONT => 1,
		DECMD_SETBACKCOLOR => 1,
		DECMD_SETBLOCKFMT => 1,
		DECMD_SETFONTNAME => 1,
		DECMD_SETFONTSIZE => 1,
		DECMD_SETFORECOLOR => 1,
		DECMD_SPLITCELL => 1,
		DECMD_UNLINK => 1,
		DECMD_UNORDERLIST => 1, // test
		"allow_tags" => "<strong><b><br><p><em><i><q><s><strike><tt><u>"
	);

	// strict_img editor settings, basic html + images + links
	$arEditorDefaults["_strict_img"]=Array(
		DECMD_INDENT => 1,
		DECMD_INSERTCELL => 1,
		DECMD_INSERTCOL => 1,
		DECMD_INSERTROW => 1,
		DECMD_INSERTTABLE => 1,
		DECMD_JUSTIFYCENTER => 1,
		DECMD_JUSTIFYLEFT => 1,
		DECMD_JUSTIFYRIGHT => 1,
		DECMD_LOCK_ELEMENT => 1,
		DECMD_MAKE_ABSOLUTE => 1, 
		DECMD_MERGECELLS => 1, 
		DECMD_ORDERLIST => 1,
		DECMD_OUTDENT => 1,
		DECMD_SEND_BACKWARD => 1,
		DECMD_BRING_FORWARD => 1,
		DECMD_SEND_BELOW_TEXT => 1,
		DECMD_BRING_ABOVE_TEXT => 1,
		DECMD_SEND_TO_BACK => 1,
		DECMD_BRING_TO_FRONT => 1,
		DECMD_SETBACKCOLOR => 1,
		DECMD_SETBLOCKFMT => 1,
		DECMD_SETFONTNAME => 1,
		DECMD_SETFONTSIZE => 1,
		DECMD_SETFORECOLOR => 1,
		DECMD_SPLITCELL => 1,
		DECMD_UNLINK => 1,
		DECMD_UNORDERLIST => 1, // test
		"allow_tags" => "<strong><b><br><p><em><i><q><s><strike><tt><u><a><img>"
	);

	// loose editor settings, no tables and no dhtml
	$arEditorDefaults["_loose"]= Array(
		DECMD_INSERTCELL => 1,
		DECMD_INSERTCOL => 1,
		DECMD_INSERTROW => 1,
		DECMD_INSERTTABLE => 1,
		DECMD_LOCK_ELEMENT => 1,
		DECMD_MAKE_ABSOLUTE => 1, 
		DECMD_MERGECELLS => 1, 
		DECMD_SEND_BACKWARD => 1,
		DECMD_BRING_FORWARD => 1,
		DECMD_SEND_BELOW_TEXT => 1,
		DECMD_BRING_ABOVE_TEXT => 1,
		DECMD_SEND_TO_BACK => 1,
		DECMD_BRING_TO_FRONT => 1,
		DECMD_SETBACKCOLOR => 1,
		DECMD_SETFONTNAME => 1,
		DECMD_SETFONTSIZE => 1,
		DECMD_SETFORECOLOR => 1,
		DECMD_SPLITCELL => 1,
		"allow_tags" => $arEditorDefaults["_strict_img"]["allow_tags"]."<abbr><acronym><address><area><big><small><blockquote><cite><code><comment><dd><dl><dt><hr><li><ol><ul><map><samp><sub><sup><var>"
	);

	// full editor settings, anything goes
	$arEditorDefaults["_full"] = Array(
		"allow_tags" => ""	// allow all tags
	);


	// ---------------------------------------------
    // Start of the HTML editor widget configuration
	// ---------------------------------------------

	$arEditorSettings = Array(		// set up defaults:
		link => Array(				// new hyperlink stuff
			behaviours => Array(
				'current'	=> Array(
					'name'			=> $ARnls['ariadne:editor:currentwindow'],
					'attributes'	=> Array()
				),
				'new'		=> Array(
					'name'			=> $ARnls['ariadne:editor:newwindow'],
					'attributes'	=> Array(
						'target'		=> '_blank'
					)
				),
				'popup'		=> Array(
					'name'			=> $ARnls['ariadne:editor:popup'],
					'attributes'	=> Array(
						'target'		=> '_blank',
						'onClick'		=> "window.open(this.href, '_popup', 'directories=no,height=600,width=800,location=no,menubar=no,resizable=yes,status=no,toolbar=no'); return false;"
					)
				)
			),

			'types' => Array(
				'internal'	=> Array(
					'name'		=> $ARnls['ariadne:editor:internal_link'],
					'options'	=> Array(
						'path'		=> true,
						'anchor'	=> true,
						'language'	=> $AR->nls->list,
						'behaviour'	=> Array('current','new','popup'),
						'nofollow'	=> true
					),
					attributes	=> Array(
					)
				),
				'external'	=> Array(
					'name'		=> $ARnls['ariadne:editor:external_link'],
					'options'	=> Array(
						'url'		=> true,
						'anchor'	=> true,
						'behaviour'	=> Array('current','new','popup'),
						'nofollow'	=> true
					),
					attributes	=> Array(
					)
				),
				'anchor'	=> Array(
					'name'		=> $ARnls['ariadne:editor:anchor'],
					'options'	=> Array(
						'name'		=> true
					),
					attributes	=> Array(
					)
				)
			)
		),

		affiliate => Array(			// affiliate sites

			muze 			=> 'http://www.muze.nl/',
			ariadne 		=> 'http://ariadne.muze.nl/'

		),

		// affiliate prefix (template to use)
		affiliate_prefix 	=> 'show.indirect.html?url=',

		photobook => Array (		// default image directory

			location		=> ''

		),

		htmltidy => Array(			// htmltidy settings

			enabled			=> false,
			options			=> $AR->Tidy->options.' --wrap 0 --output-xhtml no --drop-empty-paras yes --input-encoding utf8'

		),

		htmlcleaner => Array(

			/* enable htmlcleaner, set it to false to disable it */

			enabled		=> false,

			/* the rewrite array contains the rewrite rules. 

			The first level index is used to match tags (like <b> <font> etc)
				If the index matches the given tag and its value is
				set to false then the tag will be removed from the document,
				if it is assigned a string, then the tag name will be replaced
				with that string. If it is an Array then it will continue 
				with attribute matching. 

			The second level index is used to match attributes (like
				class, style etc).

				If the index matches the given attribue and its value is
				set to false then the attribute will be removed from the tag,
				if it is assigned a string, then the attribue name will be replaced
				with that string. If it is an Array then it will continue 
				with attribute value matching. 

			The third level index is used to match attribute values.

				If the index matches the given attribue value and its value is
				set to false then the attribute will be removed from the tag,
				if it is assigned a string, then the attribue value will be replaced
				with that string. 

			*/

			rewrite		=> Array(
				'tr|td|table|col'  => Array(
					'class' => Array( 'mso.*' => false ),
					'v:.*' => false
				),
				'o:.*' => false,
				'font' => false,
				'.*' => Array( 
					'class' => Array( 'mso.*' => false ),
					'style' => false,
					'v:.*' => false,
					'jquery[0-9]+' => false
				)
			), 

			/*
				tags to delete when emptied by the rewrite rules
			*/
			delete_emptied => Array(
				'span', 'div'
			),

			delete_empty_containers => Array(
				'a'
			)
		),

		// select editor settings: strict, strict_img, loose or full
		tags				=> '_full',

		// select editor settings for summaries: strict, strict_img, loose or full
		tags_summary		=> '_strict_img',

		// dtd to use, currently unused
		doctype				=> '<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">',

		// start document
    	emptydoc			=> "<html>\n<head>\n  <meta content=\"text/html; charset=UTF-8\" http-equiv=\"Content-Type\">\n  <title></title>\n</head>\n<body>\n<p>&nbsp;</p>\n</body>\n</html>\n",

		// use xhtml? (also set xhtml in htmltidy config)
		xhtml				=> false,

		css => Array(

			// default stylesheet
			stylesheet		=> ($this->arIsNewObject) ? $this->make_url($this->parent)."style.css" : $this->make_url("", $nls)."style.css",

			// inline styles
			inline => Array(
				"big"		=>	"Bigger",
				"cite"		=>	"Citation",
				"code"		=>	"Code",
				"dfn"		=>	"Definition",
				"del"		=>	"Deleted text",
				"ins"		=>	"Inserted text",
				"kbd"		=>	"Keyboard",
				"listing"	=>	"Listing",
				"q"			=>	"Quote",
				"small"		=>	"Smaller",
				"samp"		=>	"Sample output",
				"tt"		=>	"Teletype",
				"var"		=>	"Variable",
			),
			// block format styles
			block => Array(
				"h1" 		=>	$ARnls['vd.editor:h1'],
				"h2"		=>	$ARnls['vd.editor:h2'],
				"h3"		=>	$ARnls['vd.editor:h3'],
				"p" 		=>	$ARnls['vd.editor:default'],
				"pre" 		=>	$ARnls['vd.editor:formatted'],
				"ul"		=> 	$ARnls['vd.editor:ul'],
				"ol"		=> 	$ARnls['vd.editor:ol'],
				"blockquote"	=> 	$ARnls['vd.editor:blockquote'],
				"."		=>	$ARnls['vd.editor:clear_style']
			)
		),

		image => Array(

			// image browse dialog options
			browse	=> Array(
	
				top				=> '/',
				hideButtons		=> Array(

					lookin		=> false,
					up			=> false,
					home		=> true,
					'new'		=> false,
					viewmode	=> true
				),
				hideMenu		=> false,
				hideCurrent		=> false,
				hidePhotobook	=> false,
				hideHome		=> false,
				hideURL			=> false
			),				

			// image styles
			styles	=> Array(
	
				'default'		=> 
							Array (
								'template' => '',
								'class' => 'default'
							),
				'thumbnail'		=>
							Array(
								'template' => 'view.thumb.html',
								'class' => 'thumbnail'
							)
			)

		),

		/*	html blocks which can be inserted into the page content */
		htmlblocks => Array(
/*
			'image'	=> Array(
				'name'		=>	$ARnls['vd_image'],
				'dialog'	=>	'vd.image.phtml',
				'template'	=>	'vd.image.insert.html',
				'context'	=>	'vd.image.context.html'
			),
			'flash'	=> array(
				'name'		=>	$ARnls['vd_flash'],
				'dialog'	=>	'vd.flash.phtml',
				'template'	=>	'vd.flash.insert.html',
				'context'	=>	'vd.flash.context.html'
			),
			'news'	=> array(
				'name'		=>	$ARnls['vd_news'],
				'dialog'	=>	'vd.browse.phtml',
				'template'	=>	'vd.news.insert.html',
				'context'	=>	'vd.news.context.html'
			),
			'poll'	=> array(
				'name'		=>	$ARnls['vd_poll'],
				'dialog'	=>	'vd.browse.phtml',
				'template'	=>	'vd.poll.insert.html',
				'context'	=>	'vd.poll.context.html'
			)
*/
		),

		/* security limits on html blocks (specifically those calling ariadne templates) inserted into page content */
		arCall => Array(
/*
			'view.news.html' => array(
				'paths' => array( $this->currentsite().'*' )
			),
			'view.poll.html' => array(
				'paths' => array( $this->currentsite().'*' )
			)
*/
		),

		'editor-toolbars' => array(
			"toolbar.vedor-hyperlink.html",
			"toolbar.vedor-image.html",
			"toolbar.vedor-list-cursor.html",
			"toolbar.vedor-menu.html",
			// "toolbar.vedor-table.html",
			"toolbar.vedor-text-cursor.html",
			"toolbar.vedor-text-selection.html",
		),

		'browse' => array(
			'root' => $this->currentsite()
		),
	);

	if ($ARCurrent->session) {
		$arEditorSettings['formSecret'] = $ARCurrent->session->data->formSecret;
	}

	// ----------------------------------------
	// END OF CONFIG
	// ----------------------------------------

	$ARCurrent->arEditorSettings=$arEditorSettings;
	$ARCurrent->arEditorDefaults=$arEditorDefaults;

	$allnls = $ARCurrent->allnls;
	$ARCurrent->allnls = true;

	// allow user defined overrides and extensions
	if ($this->CheckLogin("read") && $this->CheckConfig($arCallFunction, $arCallArgs)) {
	}

	$ARCurrent->allnls = $allnls;

	$ARCurrent->arEditorSettings["disabled"]="";
	while (list($key, $value)=each($ARCurrent->arEditorDefaults[$ARCurrent->arEditorSettings["tags"]])) {
		if (is_numeric($key) && $value) {
			$ARCurrent->arEditorSettings["disabled"].=":".$key;
		}
	}
	$buttons="";
	if (is_array($ARCurrent->arEditorSettings["browse"]["hideButtons"])) {
		reset($ARCurrent->arEditorSettings["browse"]["hideButtons"]);
		while (list($key, $value)=each($ARCurrent->arEditorSettings["browse"]["hideButtons"])) {
			$buttons.="&buttons[".$key."]=".$value;
		}
	}
	$ARCurrent->arEditorSettings["browse"]["buttons"]=$buttons;
	$ARCurrent->arEditorSettings["disabled"].=":";
	$ARCurrent->arEditorSettings["allow_tags"]=$ARCurrent->arEditorDefaults[$ARCurrent->arEditorSettings["tags"]]["allow_tags"];
	$ARCurrent->arEditorSettings["allow_tags_summary"]=$ARCurrent->arEditorDefaults[$ARCurrent->arEditorSettings["tags_summary"]]["allow_tags"];

	$ARCurrent->arEditorSettings["grants"]["add"] = $this->CheckSilent("add",ARANYTYPE);
	$ARCurrent->arEditorSettings["grants"]["delete"] = $this->CheckSilent("delete");

        // Default styles as set in default.style.css
	if ($ARConfig->pinpcache[$this->path]['publisher_version'] >= 1) {
		if ( !$ARCurrent->arEditorSettings["table"]["styles"] ) {
			$ARCurrent->arEditorSettings["table"]["styles"][$ARnls['vd_tbl_default']] = "";
			$ARCurrent->arEditorSettings["table"]["styles"][$ARnls['vd_tbl_show_border']] = "vdShowBorder";
		}
		if ( !$ARCurrent->arEditorSettings["table_cell"]["styles"] ) {
			$ARCurrent->arEditorSettings["table_cell"]["styles"][$ARnls['vd_cell_default']] = "";
			$ARCurrent->arEditorSettings["table_cell"]["styles"][$ARnls['vd_cell_lightgrey']] = "vdLightGrey";
			$ARCurrent->arEditorSettings["table_cell"]["styles"][$ARnls['vd_cell_grey']] = "vdGrey";
		}
	}

	$ARCurrent->arEditorSettings['cookieConsentRequired'] = ar::acquire("settings.cookieConsentEnabled") ? true : false;

	$arResult=$ARCurrent->arEditorSettings;
	$ARCurrent->arResult = $arResult;
?>