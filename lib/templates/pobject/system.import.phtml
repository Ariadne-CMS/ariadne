<?php
if ($this->CheckLogin("read")) {
	global $import_list, $options;

    include_once($this->store->code."modules/mod_ax.phtml");



	function saveObject(&$store, &$axobject, $newfilename) {
		global $savedObject, $options, $ax_options, $ARCurrent;

		if (!$options["without_data"] && !$ax_options["without_data"]) {
			// instantiate a real ariadne object
			$object=$store->newobject($newfilename,
											$store->make_path($newfilename, ".."),
											$axobject->type,
											$axobject->data,
											0, 
											$axobject->lastchanged,
											$axobject->vtype);

			$id=$axobject->id;

			if (!$savedObject[$id]) {
				$savedObject[$id]=$newfilename;
				$object->options=&$options;

				if ($store->exists($newfilename)) {
					$ARCurrent->import=&$object;
					$store->call("system.import.update.phtml", "", $store->get($newfilename));
				} else {
					$object->arIsNewObject=true;
					$object->call("system.import.new.phtml", "");
				}
				if (!$result) {
					$error=$store->error;
				}
			} else {
				$result=$store->link($savedObject[$id],$newfilename);
				if (!$result) {
					$error=$store->error;
				}
			}
		}

		return $error;
	}

	if (!function_exists('display')) { 
		function display($str) {
			global $options;
			if ($options["verbose"]) {
				echo $str;
			}
		}
	}



	$mod=new mod_ax;
	if (!($error=$mod->open($options["axFile"],$AR->ax,"unpack",$this->store->files."temp/"))) {
		if (!$fp=$mod->openObjectsData("r")) {
			$error="Error: No object data found in $ax_file";
		} else {
			$header=$mod->getObject();
			$ax_options=$header->data->options;

			while (list($key, $path)=each($import_list)) {
				if ($path[0]==".") {
					if ($path[1]!="/") {
						$path="./".substr($path, 1);
					}
					if ($path[strlen($path)-1]!="/") {
						$path.="/";
					}
				} else {
					if ($path[0]!="/") {
						$path="/".$path;
					}
					if ($path[strlen($path)-1]!="/") {
						$path.="/";
					}
				}

				$import_list[$key]=$path;
			}

			unset($savedObject);
			while ($object=$mod->getObject()) {
				$object_path = substr($object->path, 0); // always eliminate the root...

				reset($import_list); $stop=false;
				while ((list($key, $i_path) = each ($import_list)) && !$stop) {
					if ($i_path[0]!=".") {
						$c_path=substr($i_path, 0, strpos(substr($i_path, 1), "/") + 1);
						$i_path=substr($i_path, strlen($c_path));
					} else {
						$c_path=substr($object->path, 0, strpos(substr($object->path, 1),"/") + 1);
						if ($old_c_path && ($c_path != $old_c_path)) {
							$stop=true;
						} else if (!$old_c_path) {
							$old_c_path=$c_path;
						}
						$i_path=substr($i_path, 1);
					}
	
					if (!$stop && (substr($object_path, 0, strlen($c_path)) == $c_path)) {
						$o_path=substr($object_path, strlen($c_path));
						// Check if this is one of our parents
						// ifso, check if it exists, otherwise we will
						// import it
						$p_path=substr($i_path, 0, strrpos(substr($i_path, 0, -1),"/")+1);
						if ($o_path == substr($p_path, 0, strlen($o_path))) {
							$check_path= $options["import_path"] . substr($o_path, 1);
							display("checking parent path ($check_path) ");
							if (!$this->store->exists($check_path)) {
								display("(created)\n");
								saveObject($this->store, $object, $check_path);
								$fl=sizeof($file_list);
								$file_list[$fl]["path"]=".".$o_path."class=";
								$file_list[$fl]["c_path"]=$c_path;
							} else {
								display("(exists)\n");
							}
	
							$stop=true; // not necessary, but it will speed things up
						}
						if ($i_path == substr($o_path, 0, strlen($i_path))) {
							$s_path=$options["import_path"] . substr($o_path, 1);
							saveObject($this->store, $object, $s_path);
							if ($i_path == $o_path) {
								$fl=sizeof($file_list);
								$file_list[$fl]["path"]=".".$o_path;
								$file_list[$fl]["c_path"]=$c_path;
							}
	
							$stop=true;
						}
					}
				}
	
			}
	
			if ($options["grants"]) {
				if ($ARCurrent->grants_list) {
					display("-============Importing grants==================-\n");
					while (list($user, $paths)=each($ARCurrent->grants_list["puser"])) {
						display("user: $user\n");
						$criteria["object"]["type"]["="]="'puser'";
						$criteria["login"]["value"]["="]="'".AddSlashes($user)."'";
						$result=$this->store->call("system.import.usergrants.phtml", "",
							$this->store->find("/system/users/", $criteria));
					}
				} else {
					display("-============No grants found===================-\n");
				}
			}
	
			if (!$options["without_templates"] || !$options["without_files"]) {
				display("-============templates & files=================-\n");
			}
	
			while (!$error && is_array($file_list) && (list($key, $val)=each($file_list))) {
				$c_path=substr($val["c_path"],1);
				//display("c_path($c_path)\n");
	
				if (!$options["without_templates"]) {
					$path=$val["path"];
					display("templates ($path) ");
					if (($error=$mod->importfiles("templates_".$c_path, $this->store->files."templates".$options["import_path"], $path))==1) {
						$error=false;
						display("(not in archive)");
					}
					display("\n");
				}
	
				if (!$error) {
					if (!$options["without_files"]) {
						$path=$val["path"];
						display("files     ($path) ");
						if (($error=$mod->importfiles("files_".$c_path, $this->store->files."files".$options["import_path"], $path))==1) {
							$error=false;
							display("(not in archive)");
						}
						display("\n");
					}
				}
			}

		}

		$mod->close();
	}
}
?>