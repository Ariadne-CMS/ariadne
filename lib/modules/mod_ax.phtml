<?php
/***********************************************************************
	Ariadne Export file manager

************************************************************************/
class mod_ax {

	function open($exportfile,$cmdlist,$mode="unpack",$tempdir="/tmp/") {
		$this->tempdir=$this->mktempdir($tempdir,"export_");
		$this->cmdlist=$cmdlist;
		$this->mode=$mode;

		if (!file_exists($this->tempdir)) {
			mkdir($this->tempdir,0777);
		}

		$this->exportfile=$exportfile;

		if ($mode=="unpack") {
			if (!file_exists($this->exportfile=$exportfile)) {
				$result="err:cannotfindaxfile";
			} else {
				if (strpos($this->exportfile,"/")===false) {
					$slash="\\";
				} else {
					$slash="/";
				}
				$pos=strrpos($this->exportfile,"$slash");
				if ($pos!==false) {
					$tempexpf=substr($this->exportfile,$pos+1);
				} else {
					$tempexpf=$this->exportfile;
				}

				copy($this->exportfile,$this->tempdir."/$tempexpf");
				$this->exportfile=$exportfile=$tempexpf;
				// tar will (g)unzip and untar the file into tempdir 

				if (($olddir=getcwd()) && chdir($this->tempdir)) {
					$command=sprintf($this->cmdlist->cmd_untar,$exportfile);
					system($command,$retVar);
					chdir($olddir);
					if ($retVar!=0) {
						$result="err:cannotuntar";
					}
				} else {
					$result="err:cannotchdir";
				}
			}
		}
		return $result;
	}


	function openObjectsData($mode="r") {
		return $this->ofp=fopen($this->tempdir."/objects.data",$mode);		
	}

	function writeObject($object) {
		if (is_object($object)) {
			$str=$object->path."&";
			$str.=$object->id."&";
			$str.=$object->type."&";
			$str.=$object->vtype."&";
			$str.=$object->lastchanged."&";
			$str.=base64_encode(serialize($object->properties))."&";
			$str.=base64_encode(serialize($object->data));
			$str.="\n";
			$result=fputs($this->ofp,$str, strlen($str));
		} else {
			$this->error="err: data to be written is not an object";
		}
		return $result;
	}

	function getObject() {
		$data=fgets($this->ofp, 64000);
		if ($data) {
			$data=explode("&",$data);
			if (sizeof($data)==7) {
				$result=new object;
				$result->path=$data[0];
				$result->id=$data[1];
				$result->type=$data[2];
				$result->vtype=$data[3];
				$result->lastchanged=$data[4];
				$result->properties=unserialize(base64_decode($data[5]));
				$result->data=unserialize(base64_decode($data[6]));
			} else {
				$result=false;
				$this->error="err: read line corrupted";
			}
		}
		return $result;
	}

	function closeObjectsdata() {
		if ($this->ofp) {
			return fclose($this->ofp);
		}
	}

	function mktempdir($dir,$prefix="tdir") {
		$nr=0; if ($dir[strlen($dir)-1]!="/") $dir.="/";
		while (file_exists($dir.$prefix.($nr))) {
			$nr++;
		}				

		return ($dir.$prefix.($nr));
	}


	function MkDir($path) {
		$paths=explode("/",$path);
		while (is_array($paths) && (list($key,$path)=each($paths))) {
			$curr.="/".$path;
			if (!file_exists($curr)) {
				if (!@mkdir($curr,0755)) {
					$result="err:cannotmakedir $curr";
					break;
				}
			}
		}
		return $result;
	}

	// remove directories with content
	function RmDir($path) {
		$command=sprintf($this->cmdlist->cmd_rmdir,$path);
				
		//system($command,$retVar);
		if ($retVar!=0) {
			$result="err:cannotremovedir";
		}
		return $result;
	}

	function rmvolume($path) {
		if (substr($tmpdir=$path,1,2)==":/") {
			// we have a windows volume name...
			// delete it
			$tmpdir=substr($tmpdir,2);
		}

		return $tmpdir;
	}

	function importfiles($type,$path) {
		if (!($result=$this->MkDir($this->rmvolume($path)))) {
			if (file_exists($this->tempdir."/$type.tgz")) {
				if (($olddir=getcwd()) && chdir($path)) {
					// if we have a windows volume name...
					// delete it, since we stay in the same
					// partition
					$tmpdir=$this->rmvolume($this->tempdir);

					$command=sprintf($this->cmdlist->cmd_untar,$tmpdir."/$type.tgz");
					system($command,$retVar);
					chdir($olddir);
					if ($retVar!=0) {
						$result="err:cannotimport";
					}
				} else {
					$result="err:cannotchdir";
				}
			}
		}
		return $result;
	}

	function exportfiles($type,$path) {
		$path=$this->rmvolume($path);
		if (file_exists($path)) {
			$path2=substr($path,$rpos=strrpos(substr($path,0,-1),"/")+1);
			$path=substr($path,0,$rpos);

			if (($olddir=getcwd()) && chdir($path)) {
				//$command="tar -zc $path2 -f ".$this->tempdir."/$type.tgz";
				$command=sprintf($this->cmdlist->cmd_tar,$this->rmvolume($path2),$this->rmvolume($this->tempdir)."/$type.tgz");
				system($command,$retVar);
				chdir($olddir);
				if ($retVar!=0) {
					$result="err:cannotexport";
				}
			} else {
				$result="err:cannotchdir";
			}
		}
		return $result;
	}

	function close() {
		if ($this->mode!="unpack") {
			if (!($dh=opendir($this->tempdir))) {
				$result="err:cannotopentempdir";
			} else {
				while ($data=readdir($dh)) {
					if (($data!='.') && ($data!='..')) 
						$exp.=" $data ";
				}
				closedir($dh);

				if (($olddir=getcwd()) && chdir($this->tempdir)) {
					//$command="tar -zc $exp  -f ".$this->exportfile;
					$command=sprintf($this->cmdlist->cmd_tar,$exp,$this->exportfile);
					system($command,$retVar);
					chdir($olddir);
					copy($this->tempdir."/".$this->exportfile,$this->exportfile);

					if ($retVar!=0) {
						$result="err:cannotmakeax";
					}
				} else {
					$result="err:cannotchdir";
				}
			}
		}

		if (!$result) {
			$result=$this->RmDir($this->tempdir);
		}
		return $result;
	}
}
?>