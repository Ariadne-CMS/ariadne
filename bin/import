#!/usr/bin/env php
<?php

	$ARLoader = 'cmd';
	$currentDir = getcwd();
	$ariadne = dirname($currentDir).'/lib/';

	if (!@include_once($ariadne."/bootstrap.php")) {
		chdir(substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/')));
		$ariadne = dirname(getcwd()).'/lib/';

		if(!include_once($ariadne."/bootstrap.php")){
			echo "could not find Ariadne";
			exit(1);
		}

		chdir($currentDir);
	}
	require_once(AriadneBasePath . "/stores/axstore.phtml");
	require_once(AriadneBasePath . "/configs/axstore.phtml");

	$nls = $AR->nls->default;

	$HELP_INFO="import [--options] file.ax [source path] [destination path]
  The import command will import the supplied .ax into the current
  Ariadne database. It will import all objects specified by [source path]
  to your Ariadne database at [destination path].

  options are:
    --verbose                Display what we are doing.
    --without-grants         Don't import grant information.
    --without-templates      Don't import templates.
    --without-files          Don't import files.
    --rewrite-urls           Rewrite URLs in page, summary and customdata fields
                             Example: --rewrite-urls=http://dev.fastbizz.com,http://www.fastbizz.com

    --rewrite-references     Rewrite references in shortcuts, page-, summary- and customdata fields
                             Example: --rewrite-references=/projects/fastbizz-dev/,/projects/fastbizz/

    --use-nls                This will update/import the specified nls data.
    --tar_nofail             Skip tar/gz errors.
    --force                  Overwrites existing objects.
    --convertToUTF8-[nls]=[source charset] 
                             Convert data for language [nls] from 
                             [source-charset] to UTF-8. Default 
                             source-charset is CP1252.
    --skip-user-check        Skip the user check  to see if the owner of files/templates
                             matches the user running the import
    --help                   This information.\n\n";

	$arg_c=0;
	$arg_v[$arg_c++]=$argv[0];

	next($argv); // do not parse the filename
	while (list(,$cmd)=each($argv)) {
		$option = ldParseOption($cmd);
		if ($option !== false ) {
			switch ($option['switch']) {
				case 'with':
					$ARCurrent->options[$option['subswitch']]=($option['value']) ? $option['value'] : true;
				break;
				case 'without':
					$ARCurrent->options["without_".$option['subswitch']]=true;
				break;
				case 'use':
					switch($option['subswitch']) {
						case 'nls':
							$ARCurrent->options["nls"][$option['value']] = $option['value'];
						break;
					}
				break;
				case 'convertToUTF8':
				case 'convert2UTF8':
					if (!$option['value']) {
						$option['value'] = "CP1252";
					}
					$callArgs["convert_charsets"][$option['subswitch']] = $option['value'];
				break;

				case 'verbose':
					$ARCurrent->options["verbose"]=true;
				break;

				case 'force':
					$ARCurrent->options["force"]=true;
				break;

				case 'help':
					echo $HELP_INFO;
					exit;
				break;

				case 'tar_nofail':
					$ax_config["tar_nofail"]=true;
				break;

				case 'tar_fail':
					$ax_config["tar_nofail"]=false;
				break;
				case 'rewrite':
					switch ($option['subswitch']) {
						case 'references':
							if ($option['value']) {
								$fpaths = explode(",", $option['value']);
								if (count($fpaths) != 2) {
									die("--rewrite-references expects nothing or a source- and a destination path, seperated by a comma\n");
								} else {
									$ARCurrent->options['rewrite_references'][ $fpaths[0] ] = $fpaths[1];
								}
							} else {
								$ARCurrent->options['rewrite_references'] = array( 'default' => 'default' );
							}
						break;
						case 'urls':
							$urls = explode(",", $option['value']);
							if (count($urls) != 2) {
								die("--rewrite-urls expects a source url and a destination url, seperated by a comma\n");
							} else {
								$ARCurrent->options['rewrite_urls'][ $urls[0] ] = $urls[1];
							}
						break;
						default:
							die("no idea howto rewrite ".$option['subswitch']."\n");
						break;
					}
				break;
				case 'skip':
					switch ($option['subswitch']) {
						case 'user-check':
							$ARCurrent->options["skip-user-check"] = true;
						break;
						default:
							die("Unknown skip option\n");
						break;
					}
				break;
				default:
					die("unknown option-switch (".$option['switch'].")\n");
			}
		} else {
			$arg_v[$arg_c++]=$cmd;
		}
	}

	if (function_exists("posix_getuid")) {
		if (!$ARCurrent->options["skip-user-check"]) {
			if ( posix_getuid() == 0 ) {
				die("User running the import script is root, override with --skip-user-check.\n");
			}
			if (
				// Check if the user running the import script is also the owner and group of the files/files and files/templates directory.
				posix_getuid() != fileowner($AR->dir->install . "/files/files/") ||
				posix_getgid() != filegroup($AR->dir->install . "/files/files/") ||
				posix_getuid() != fileowner($AR->dir->install . "/files/templates/") ||
				posix_getgid() != filegroup($AR->dir->install . "/files/templates/")
			) {
				if (posix_getuid() != fileowner($AR->dir->install . "/files/files/")) {
					$message .= $AR->dir->install . "/files/files/ owner is not current user.\n";
				}
				if (posix_getgid() != filegroup($AR->dir->install . "/files/files/")) {
					$message .= $AR->dir->install . "/files/files/ group is not current group.\n";
				}
				if (posix_getuid() != fileowner($AR->dir->install . "/files/templates/")) {
					$message .= $AR->dir->install . "/files/templates/ owner is not current user.\n";
				}
				if (posix_getgid() != filegroup($AR->dir->install . "/files/templates/")) {
					$message .= $AR->dir->install . "/files/templates/ group is not current group.\n";
				}

				die(
					"User running the import is not the owner and group of the files directory, override with --skip-user-check.\n" . $message
				);
			}
		}
	}

	// Ready to go!
	set_time_limit(0);

	if ($arg_c>=2) {
		$ARLogin="admin";
		$AR->user=new baseObject;
		$AR->user->data=new baseObject;
		$AR->user->data->login="admin";

		if( isset( $ARCurrent->options['temp']) && 
			is_dir($ARCurrent->options['temp']) &&
			is_writeable($ARCurrent->options['temp'])
			){
			$ax_config['temp'] = $ARCurrent->options['temp'];
		}

		$ARCurrent->allnls = true;
		$ARCurrent->nolangcheck = true;
		$ax_config["writeable"]=false;
		$ax_config["database"]=$arg_v[1];
		if ($arg_c>3) {
			$destpath=$arg_v[3];
			$srcpath=$arg_v[2];
		} else
		if ($arg_c>2) {
			$srcpath=$arg_v[2];
		}

		// swapping stores
		$store=new axstore("", $ax_config);

		if (!$store->error) {
			$inst_store = $store_config["dbms"]."store";
			$importStore=new $inst_store($root,$store_config);

			$login = "admin";
			$query = "object.implements = 'puser' and login.value='$login'";
			$AR->user = current($importStore->call('system.get.phtml', '', $importStore->find('/system/users/', $query)));

			$ARCurrent->importStore=&$importStore;
			$callArgs["srcpath"]  = $srcpath;
			$callArgs["destpath"] = $destpath;

			$store->call("system.export.phtml", $callArgs,
				$store->get("/"));
			$error=$store->error;

			$store->close();
			$importStore->close();

		} else {
			$error="ax error: ".$store->error;
		}

		if ($error) {
			echo $error."\n";
		}
	} else {
		echo $HELP_INFO;
	}
?>
