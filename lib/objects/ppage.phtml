<?php
    /******************************************************************
     ppage.phtml                                        Muze Ariadne
     ------------------------------------------------------------------
     Author: Muze (info@muze.nl)
     Date: 31 october 2002

     Copyright 2002 Muze

     This file is part of Ariadne.

     Ariadne is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published 
     by the Free Software Foundation; either version 2 of the License, 
     or (at your option) any later version.
 
     Ariadne is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with Ariadne; if not, write to the Free Software 
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  
     02111-1307  USA

    -------------------------------------------------------------------

     Class inheritance: 	pobject > ppage
     Description:

       This is the class definition file of the ppage class.

    ******************************************************************/

debug("ppage: Load","object");
include_once($this->code."objects/pobject.phtml");

class ppage extends pobject { // ppage class definition

  function ParsePage($page, $full=false) {
    global $ARCurrent;
    if ($ARCurrent->session && $ARCurrent->session->id) {
      $session='/-'.$ARCurrent->session->id.'-';
    } else {
      $session='';
    } 
    if (!$full) {
      return str_replace("{arSession}", $session, 
			str_replace("{arRoot}",$AR->host.$this->store->root, 
			str_replace("{arCurrentPage}", $this->make_url(),
        		eregi_replace('^.*<BODY[^>]*>','',
        		eregi_replace('</BODY.*$','',$page)))));
    } else {
      return str_replace("{arSession}", $session, str_replace("{arRoot}",$AR->host.$this->store->root, $page));
    }
  }

  function RAWtoAR($page) {
  global $ARCurrent, $AR;

	/* find and replace the current page */
	$page = str_replace($this->make_url(), "{arCurrentPage}", $page);
    $page = ereg_replace("(https?://)?".$AR->host.$AR->dir->www."loader.php(/-".$ARCurrent->session->id."-)?(/".$this->nls.")?".$this->path, "{arCurrentPage}", $page);

	// change hardcoded links and images to use a placeholder for the root
	if ($this->store->root) {
		if (substr($this->store->root, -3) !== "/$this->nls") {
			$nls_reg = "(/$this->nls)?";
		}
		$page = ereg_replace("(http[s]?://)?".$AR->host.$this->store->root.$nls_reg, "{arRoot}", $page);
		$page = ereg_replace("(http[s]?://)?".$this->store->root.$nls_reg, "{arRoot}", $page);
	}
    // change hand pasted sources, which may or may not include session id's
    $page = ereg_replace("(https?://)?".$AR->host.$AR->dir->www."loader.php(/-".$ARCurrent->session->id."-)?(/".$this->nls.")?", "{arRoot}", $page);
	if ($ARCurrent->session && $ARCurrent->session->id) {
      // check for other session id's:
      $page = str_replace("/-".$ARCurrent->session->id."-", "{arSession}", $page);
    }
	return $page;
  }

  function GetPage($nls="", $source=false, $full=false) {
    if (!$nls) {
      $target=$this->nlsdata->page;
    } else if ($this->data->$nls) {
      $target=$this->data->$nls->page;
    }
    if ($source) {
      return htmlspecialchars($this->ParsePage($target, $full));
    } else {
      return $this->ParsePage($target, $full);
    }
  }

  function ShowPage($nls="", $source=false, $full=false) {
    echo $this->GetPage($nls, $source, $full);
  }

  function _GetPage($nls="", $source=false, $full=false) {
    return $this->GetPage($nls, $source, $full);
  }

  function _GetFullPage($nls="", $source=false) {
    return $this->GetPage($nls, $source, true);
  }

  function _ShowPage($nls="", $source=false, $full=false) {
    return $this->ShowPage($nls, $source, $full);
  }

  function _ShowFullPage($nls="", $source=false) {
    return $this->ShowPage($nls, $source, true);
  }

  function _ParsePage($page, $full=false) {
    return $this->ParsePage($page, $full);
  }

  function _RAWtoAR($page) {
	return $this->RAWtoAR($page);
  }
} // end of ppage class definition
?>