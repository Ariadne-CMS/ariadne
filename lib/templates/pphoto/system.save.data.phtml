<?php
	/******************************************************************
	 system.save.data.phtml                                Muze Ariadne
	 ------------------------------------------------------------------
	 
	******************************************************************/

	require_once($this->store->get_config('code')."modules/mod_page.php");

	if ((($this->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) &&
			$this->CheckConfig()) {

		if ($this->arIsNewObject) {
			$this->data=new object;
     	} else {
			// first make sure that the object is clean (data can only be set v
			// the defined interface: $arCallArgs)
			$this->data=current($this->get(".","system.get.data.phtml"));
		}

		// unset the properties array, so no properties can be passed to this template.
		$properties = Array();

		if (!$this->getdata("name", $ARConfig->nls->default)) {
			$this->error=sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]);
		} else {
			if (!$this->data->nls) {
				$this->data->nls=new object;
			}
			$this->data->nls->default=$ARConfig->nls->default;
			$nlslist = Array("none");
			reset($AR->nls->list);
			$count=0;
			while (list($key, $value)=each($AR->nls->list)) {
				array_push($nlslist, $key);
				if ($this->getdata("name",$key)) {
					if (!isset($this->data->$key)) {
						$newnlsdata=new object;
					} else {
						$newnlsdata=$newdata->$key;
					}
					$newnlsdata->name=$this->getdata("name",$key);
					$properties["name"][$count]["value"]="'".AddSlashes($newnlsdata->name)."'";
					$properties["name"][$count]["nls"]="'$key'";
					$properties["text"][$count]["value"]="'".AddSlashes($newnlsdata->name)."'";
					$properties["text"][$count]["nls"]="'$key'";
					$count++;
					$newnlsdata->summary=page::compile($this->getdata("summary",$key), $key);
					$properties["text"][$count]["value"]="'".AddSlashes($newnlsdata->summary)."'";
					$properties["text"][$count]["nls"]="'$key'";
					$count++;
					if ($this->store->is_supported("fulltext")) {
						$properties["fulltext"][$count]["value"]="'".AddSlashes($this->store->format_for_fti(
								$newnlsdata->name." ".
								$this->html_to_text($newnlsdata->summary)
								))."'";
						$properties["fulltext"][$count]["nls"]="'$key'";
					}
					$this->data->$key=$newnlsdata;
					$this->data->nls->list[$key]=$value;
				} else {
					if ($this->data->$key) {
						unset($this->data->$key->name);
						unset($this->data->nls->list[$key]);
					}
				}
			}
		}

		$this->data->mimetype=$this->getdata("mimetype","none");
		$temp=explode("/",$this->data->mimetype);
		$this->data->mime["type"]=$temp[0];
		$this->data->mime["subtype"]=$temp[1];
		$properties["mimetype"][0]["type"]="'".AddSlashes($this->data->mime["type"])."'";
		$properties["mimetype"][0]["subtype"]="'".AddSlashes($this->data->mime["subtype"])."'";

		$this->save($properties);
		unset($properties);

		$this->arIsNewObject=false;

		if (!$this->error) {
			$this->ClearCache();
			unset($properties);

			$this->arIsNewObject = false;
			$isDefaultSet = false;
			foreach ($nlslist as $nlskey) {
				$fulltext = $properties['fulltext'];
				$tempfile = $this->getdata("file_temp", $nlskey);
				$mimetype = $this->getdata("file_type", $nlskey);
				if (!$mimetype) {
					$mimetype = $this->getdata("mimetype", $nlskey);
				}
				// now check whether $file_temp is defined, if so, move it
				if (!$this->error) {
					if ($tempfile) {
						$tempfile=ereg_replace("[\\\/]","",$tempfile); // make sure nobody gets /etc/passwd			
						$tempfile=$this->store->get_config("files")."temp/".$tempfile;

						if (file_exists($tempfile)) {	
							$files = $this->store->get_filestore("files");

							$checksize=getimagesize($tempfile);
							if ($checksize) {
								$pixelsize=$checksize[0]*$checksize[1];
								if ($AR->IM->hardLimit && ($pixelsize>$AR->IM->hardLimit)) {
									// FIXME: generate error: picture too large
									// problem: error message displays back button, but object is already saved,
									// next save action will trigger 'object already exists'.
									// $this->error=sprintf($ARnls["err:imagetoolarge"],$AR->IM->hardLimit.' Pixels');
									$this->data->toolarge=true;
								} else if ($AR->IM->softLimit && ($pixelsize>$AR->IM->softLimit)) {
									$this->data->toolarge=false;
									// generate smaller version, use that as default
									$resizeFactor=sqrt($AR->IM->softLimit/($checksize[0]*$checksize[1]));
									$newx=floor($resizeFactor*$checksize[0]);
									$newy=floor($resizeFactor*$checksize[1]);
									system($AR->IM->convert." -size ".$newx."x".$newy." ".$tempfile." -resize ".$newx."x".$newy." ".$tempfile.".scaled");
									$originalfile=$tempfile;
									$tempfile=$tempfile.'.scaled';
									if ($nlskey == "none") {
										$files->copy_to_store($originalfile, $this->id, "file.original");
									} else {
										$files->copy_to_store($originalfile, $this->id, $nlskey."_file.original");
									}
								} else {
									$this->data->toolarge=false;
								}
							} else {
								// FIXME: if getimagesize fails, check filesize
								if ($AR->IM->hardLimitBytes && filesize($tempfile)>$AR->IM->hardLimitBytes) {
									// $this->error=sprintf($ARnls["err:imagetoolarge"],$AR->IM->hardLimitBytes.' Bytes');
									$this->data->toolarge=true;
								} else {
									$this->data->toolarge=false;
								}
							}
							if (!$isDefaultSet) {
								// keep the 'none' key for backwards compatibility
								if ($nlskey == "none" || $nlskey == $ARConfig->nls->default) {
									$files->copy_to_store($tempfile, $this->id, "file");
									$isDefaultSet = true;
								}
							}
							$armime = explode("/", $mimetype);
							if ($nlskey != "none") {
								$files->copy_to_store($tempfile, $this->id, $nlskey."_file");
								$this->data->$nlskey->filesize = $this->getdata("file_size", $nlskey); 
								$this->data->$nlskey->mimetype = $mimetype;
								$this->data->mime["type"] = $armime[0];
								$this->data->mime["subtype"] = $armime[1];
							} else {
								$this->data->filesize = $this->getdata("file_size", "none"); 
								$this->data->mimetype = $mimetype;
								$this->data->mime["type"] = $armime[0];
								$this->data->mime["subtype"] = $armime[1];
							}
							$properties["mimetype"][] = Array(
								"type"		=> "'".AddSlashes($this->data->mime["type"])."'",
								"subtype"	=> "'".AddSlashes($this->data->mime["subtype"])."'"
							);
							unlink($tempfile);

						} else {
							$tempfile=false;
						}
					} 
					if ($this->store->is_supported("fulltext")) {
						$filetext = $this->GetPlainText("file", $nlskey);
						if ($filetext) {
							$count++;
							$properties["fulltext"] = $fulltext;
							$properties["fulltext"][$count][$nlskey]="'".AddSlashes($nlskey)."'";
							$properties["fulltext"][$count]["value"]="'".AddSlashes($this->store->format_for_fti(
									$filetext
									))."'";
						}
					}

				} else {
					debug("err: $this->error");
					break;
				}
			}
			if (!$this->error) {
					$this->save($properties);
			}
		}
	}
?>