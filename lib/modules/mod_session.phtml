<?php
class session {

	protected $changed = false;

	function __construct($session_config, $id=0) {
		debug("session([array],$id)","store");
		// init session store
		$inst_store = $session_config["dbms"]."store";
		include_once($session_config["code"]."stores/$inst_store.phtml");
		$this->sessionstore=new $inst_store($session_config["root"], $session_config);

		$this->timeout=$session_config["timeout"];
		$this->updateInterval = $session_config["timeout"]/10;

		if ((!$id) || (!$this->sessionstore->exists("/$id/"))) {
			debug("session: generating new id", "all");
			// generate new id
			do {
				$attempts++;
				$id = false;
				if ($attempts % 25 === 0) {
					debug("Cleaning up sessions and reusing old session","store");
					$purgedSessions = (array)$this->purgeExpiredSessions();
					shuffle($purgedSessions);
					$id = current($purgedSessions);
					debug("reuse id is $id","store");
				}
				if (!$id ) {
					// base36 encoded 4 char length == 36^4-1 == 1679615
					$id = sprintf("%04s",base_convert(random_int(0,1679615),10,36));
				}
				debug("new id is $id","store");
			} while ($this->sessionstore->exists("/".$id."/"));
			// save new session object
			$this->data=new baseObject;
			$this->id=$id;
			$this->lastchanged=time();
			$this->system = new baseObject;
			$this->system->ARSessionTimedout=false;
			$this->put("formSecret", bin2hex(random_bytes(16)));

			$this->save(0, 1);
		} else { // retrieve session
			$result=current($this->sessionstore->call(
													"system.get.session.phtml",
													"",
													$this->sessionstore->get("/$id/")
												));
			$this->id=$id;
			$this->lastchanged=$result->lastchanged;
			$this->system = $result->data->system;
			if (isset($this->system->timeout)) {
				$this->timeout = $this->system->timeout;
			}
			unset($result->data->system);
			if ($result->data->ARSessionTimedout || $this->timeout && $this->lastchanged < (time()-$this->timeout)) {
				debug("session: ".$this->id." ARSessionTimedout", "all");
				$this->system->ARSessionTimedout = true;
			}
			$this->data=$result->data;
		}

		$this->put("ARSessionId",$this->id);
		debug("session: end","all");
	}

	function put($varname, $value, $system=0) {
		debug("session->put($varname,$value,$system)","store");
		if (!$system) {
			if ($this->data->$varname !== $value) {
				$this->data->$varname=$value;
				$this->changed = true;
			}
		} else {
			if ($this->system->$varname !== $value) {
				$this->system->$varname=$value;
				$this->changed = true;
			}
		}
		debug("session->put: end","all");
	}

	function get($varname, $system=0) {
		debug("session->get($varname, $system)","store");
		if (!$system) {
			$result = $this->data->$varname;
		} else {
			$result = $this->system->$varname;
		}
		debug("session->get: end","all");
		return $result;
	}

	function setTimeout($timeout = 0) {
		$this->put('timeout', $timeout, true);
	}

	function save($id=0, $forceupdate=0) {
		debug("session->save($id)","store");
		if (!$this->system->ARSessionTimedout || $forceupdate) {
			if (!$id) { $id=$this->id; } else { $this->id=$id; }
			// store session data
			$now = time();
			$interval = $this->timeout/10;
			if ( $interval > 0 ) {
				$interval = min($interval,$this->updateInterval);
			} else {
				$interval = $this->updateInterval;
			}
			$this->data->system = $this->system;
			if ($this->changed || $forceupdate) {
				if ( !$this->sessionstore->exists('/') ) {
					$this->sessionstore->save( '/', 'pobject', new baseObject );
				}
				$this->sessionstore->save("/$id/","psession",$this->data);
			} else if( ($now - $interval ) > $this->lastchanged ) {
				// save session only if last save is 0.1 timeout lenght ago
				$this->sessionstore->touch("/$id/", $now);
			} else {
				// no save needed, make sure lastchanged is not updated
				$now = $this->lastchanged;
			}
			unset($this->data->system);
			$this->lastchanged=$now;
		} else {
			debug("session timed out: no save!", "all");
		}
		debug("session->save: end","all");
	}

	function suspend() {
		debug("session->suspend()","store");
		$this->save();
		$this->sessionstore->close();
		$this->id=0;
		debug("session->suspend: end","all");
		ldSetSession();
	}

	function kill() {
		debug("session->kill()","store");
		//FIXME: also delete childs in the session store
		// should we mark the session as 'dead' and let the sessioncleanup fix the rest ?
		// remove session data from store
		$this->sessionstore->delete("/".$this->id."/");
		$this->sessionstore->close();
		$this->id=0;
		debug("session->kill: end","all");
		ldSetSession();
	}

	function purgeExpiredSessions( $limit=100 ) {
		// expire all old sessions
		$query = "object.implements='psession' and object.lastchanged < ".(time() - $this->timeout*4)."order by none" ;
		$result = array();
		$result = $this->sessionstore->call("system.expire.silent.phtml","",
				$this->sessionstore->find("/", $query,$limit));
		return $result;
	}
}
