<?php
	if ($this->CheckLogin("delete") && $this->CheckConfig()) {
		$target=$this->getdata("target");
		$target=$this->store->make_path($this->parent, $this->getdata("target","none"));
		$userConfig = $this->loadUserConfig();
		$authconfig = $userConfig['authentication'];
		$parentobject=current($this->get($this->parent, "system.get.phtml"));
		if ($parentobject && $parentobject->AR_implements("pgroup")) {
			// this is probably a link in a group
			// so it is, so remove the user from the group
			// which will by the way also delete the current object
			// first get the original users path

			$paths = $this->store->list_paths($this->path);
			foreach ($paths as $userpath) {
				if ($userpath != $this->path) {
					// This is the user path.
					// FIXME: This also tries to delete group paths from the group.
					$realuser=current($this->get($userpath,"system.get.phtml"));
					if ($realuser && $realuser->path) {
						$realpath=$realuser->path;
						$parentobject->call("system.set.user.phtml", array("path" => $realpath, "action" => "delete"));
					}
				}
			}
		} else {
			// this is a live user object, not a link in a group
			if ($this->data->login=="public" || $this->data->login=="admin") {
				$this->error=$ARnls["err:cannotdelsystemusers"];
			} else {
				if (!$this->exists($target)) {
					// new filename -> new login, so check if it is unique
					$newparent=$this->store->make_path($target, "..");
					$newlogin=substr($target, strlen($newparent), -1);
					$loginexists = false;
					$crit["login"]["value"]["="]=$newlogin;
					foreach ($authconfig['userdirs'] as $userdirpath) {
						$result=$this->find($userdirpath,$crit,"system.get.id.phtml");
						if (count($result) && $result[0] != $this->id) {
							$loginexists = true;
							break;
						}
					}
					if ($loginexists) {
						$this->error=sprintf($ARnls["err:loginexists"],$newlogin);
					}
				}
				if (!$this->error) {
					// remove groups
					if (is_array($this->data->groups)) {
						reset($this->data->groups);
						while (list($path) = each($this->data->groups)) {
							$this->get($path,
									"system.set.user.phtml",
									array(
										"action" => "delete",
										"path" => $this->path
									));
						}
					}
					// remove grants
					$oldusergrants = $this->data->config->usergrants;
					$oldlogin = $this->data->login;
					$oldpath = $this->path;
					if (is_array($this->data->config->usergrants)) {
						// remove usergrants
						while (list($key, $value)=each($this->data->config->usergrants)) {
							$this->get($key, "system.save.grants.phtml", array("delete" => true, "id" => $this->data->login, "type" => $this->type));
						}
					}

					$this->call("pobject::system.rename.phtml", $arCallArgs);
					$this->data->login=substr($this->path, strlen($this->parent), -1);
					$properties["login"][0]["value"]=$this->data->login;
					$this->save($properties);
					if (!$this->error) {
						// now update groups
						if (is_array($this->data->groups)) {
							reset($this->data->groups);
							while (list($path) = each($this->data->groups)) {
								$this->get($path,
										"system.set.user.phtml",
										array(
											"action" => "add",
											"path" => $this->path
										));
							}
						}
						// update grants
						if (is_array($oldusergrants)) {
							reset($oldusergrants);
							while (list($path, $grants) = each($oldusergrants)) {
								if (substr($path, 0, strlen($oldpath)) == $oldpath) {
									$path = $target.substr($path, strlen($oldpath));
								}

								$grantstring = "";
								reset($grants);
								while (list($grant, $granttype) = each($grants)) {
									if (is_array($granttype)) {
										$grantstring .= " $grant ( ";
										reset($granttype);
										while (list($class, $modifierId)=each($granttype)) {
											switch($modifierId) {
												case ARGRANTLOCAL:
													$modifier = "=";
												break;
												case ARGRANTCHILDREN:
													$modifier = ">";
												break;
												default:
													$modifier = "";
											}
											$grantstring .= " $modifier$class ";
										}
										$grantstring .= " ) ";
									} else {
										switch($granttype) {
											case ARGRANTLOCAL:
												$modifier = "=";
											break;
											case ARGRANTCHILDREN:
												$modifier = ">";
											break;
											default:
												$modifier = "";
										}
										$grantstring .= " $modifier$grant ";
									}
								}
								$this->get( $path,
											"system.save.grants.phtml",
											array(
												"path" => $this->path,
												"newgrants" => $grantstring
											));
							}
						}
					}
				}
			}
		}
	}
	$arResult=$target;
?>
