<?php

include_once($ariadne."/stores/mysql_workspacesstore.phtml");
include_once($ariadne."/stores/mysqlstore_install.phtml");

class mysql_workspacesstore_install extends mysql_workspacesstore {

	function upgrade() {
		$result = true;
		echo "upgrading mysql store for workspace support.\n";
		$queries = Array(
				array("query_string" => "alter table ".$this->tbl_prefix."nodes drop primary key"),
				array("query_string" => "alter table ".$this->tbl_prefix."nodes add id int(11) NOT NULL AUTO_INCREMENT KEY"),
				array("query_string" => "alter table ".$this->tbl_prefix."nodes add layer int(11) NOT NULL DEFAULT '0'"),
				array("query_string" => "alter table ".$this->tbl_prefix."nodes drop primary key, add primary key(id, layer)"),
				array("query_string" => "alter table ".$this->tbl_prefix."nodes add UNIQUE KEY layer (layer,path)"),
				array("query_string" => "alter table ".$this->tbl_prefix."nodes add key path (path)"),
				array("query_string" => "alter table ".$this->tbl_prefix."objects add layer int(11) NOT NULL DEFAULT '0'"),
				array("query_string" => "alter table ".$this->tbl_prefix."objects add key layer (layer)"),
			);

		while ((list($key, $query)=each($queries)) && (!$error)) {
			if ($query["query_string"]) {
				echo "Executing: ".$query["query_string"]."\n";
			}
			$qresult = $this->store_run_query($query["query_string"]);

			if (!$qresult) {
				$result = false;
				$error=$this->dbh->error;
				$errno=$this->dbh->errno;
				error("Mysql: $errno: $error");
			}
		}
		return $result;

	}

	function initialize() {
		print("Init clasic mylsqstore\n");
		$result = $this->mysqlstore->initialize();
		if ($result) {
			print "Upgrade to workspace\n";
			$result = $this->upgrade();
		} else {
			print "Init failed\n";
			return false;
		}
		return $result;
	}

	public function __construct($path, $config) {
		parent::__construct($path, $config);
		$this->mysqlstore = new mysqlstore_install($path, $config);
	}

	public function add_type($type, $implements){
		return $this->mysqlstore->add_type($type, $implements);
	}

	public function create_property($property, $definition) {
		return $this->mysqlstore->create_property($property, $definition);
	}
}
