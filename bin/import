#!/usr/bin/php -q
<?php
	$ariadne = "../lib";
	if (!@include_once($ariadne."/configs/ariadne.phtml")) {
		chdir(substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/')));
		if(!include_once($ariadne."/configs/ariadne.phtml")){
			echo "could not open ariadne.phtml";
			exit(1);
		}
	}
	require_once($ariadne."/configs/store.phtml");
	require_once($ariadne."/configs/axstore.phtml");
	require_once($ariadne."/includes/loader.web.php");
	require_once($ariadne."/stores/".$store_config["dbms"]."store.phtml");
	require_once($ariadne."/stores/axstore.phtml");
	require_once($ariadne."/ar.php");
	include_once($ariadne."/nls/".$AR->nls->default);

	$nls = $AR->nls->default;

	$HELP_INFO="import [--options] file.ax [source path] [destination path]
  The import command will import the supplied .ax into the current
  Ariadne database. It will import all objects specified by [source path]
  to your Ariadne database at [destination path].

  options are:
    --verbose                Display what we are doing.
    --without-grants         Don't import grant information.
    --without-templates      Don't import templates.
    --without-files          Don't import files.
    --rewrite-urls           Rewrite URLs in page, summary and customdata fields
                             Example: --rewrite-urls=http://dev.fastbizz.com,http://www.fastbizz.com

    --rewrite-references     Rewrite references in shortcuts, page-, summary- and customdata fields
                             Example: --rewrite-references=/projects/fastbizz-dev/,/projects/fastbizz/

    --use-nls                This will update/import the specified nls data.
    --tar_nofail             Skip tar/gz errors.
    --force                  Overwrites existing objects.
    --convertToUTF8-[nls]=[source charset] 
                             Convert data for language [nls] from 
                             [source-charset] to UTF-8. Default 
                             source-charset is CP1252.
    --help                   This information.\n\n";

	$arg_c=0;
	$arg_v[$arg_c++]=$argv[0];

	next($argv); // do not parse the filename
	while (list(,$cmd)=each($argv)) {
		if (strpos($cmd, "--") === 0) {
			if (strpos(substr($cmd, 2),"-")===false) {
				$option_switch=substr($cmd, 2);
			} else {

				$option_switch=substr($cmd, 2, strpos(substr($cmd, 2),"-"));

				if (strpos($cmd, "=")!==false) {
					$option_value=substr($cmd, strpos($cmd, "=")+1);
					$option=substr($cmd, strlen($option_switch)+3, strpos($cmd, "=") - (strlen($option_switch)+3));
				} else {
					$option=substr($cmd, strlen($option_switch)+3);
				}
			}

//			echo "switch($option_switch)($option)='$option_value'\n";

			switch ($option_switch) {
				case 'with':
					$ARCurrent->options[$option]=($option_value) ? $option_value : true;
				break;
				case 'without':
					$ARCurrent->options["without_$option"]=true;
				break;
				case 'use':
					switch($option) {
						case 'nls':
							$ARCurrent->options["nls"][$option_value] = $option_value;
						break;
					}
				break;
				case 'convertToUTF8':
				case 'convert2UTF8':
					if (!$option_value) {
						$option_value = "CP1252";
					}
					$callArgs["convert_charsets"][$option] = $option_value;
				break;

				case 'verbose':
					$ARCurrent->options["verbose"]=true;
				break;

				case 'force':
					$ARCurrent->options["force"]=true;
				break;

				case 'help':
					echo $HELP_INFO;
					exit;
				break;

				case 'tar_nofail':
					$ax_config["tar_nofail"]=true;
				break;

				case 'tar_fail':
					$ax_config["tar_nofail"]=false;
				break;
				case 'rewrite':
					switch ($option) {
						case 'references':
							if ($option_value) {
								$fpaths = explode(",", $option_value);
								if (count($fpaths) != 2) {
									die("--rewrite-references expects nothing or a source- and a destination path, seperated by a comma\n");
								} else {
									$ARCurrent->options['rewrite_references'][ $fpaths[0] ] = $fpaths[1];
								}
							} else {
								$ARCurrent->options['rewrite_references'] = array( 'default' => 'default' );
							}
						break;
						case 'urls':
							$urls = explode(",", $option_value);
							if (count($urls) != 2) {
								die("--rewrite-urls expects a source url and a destination url, seperated by a comma\n");
							} else {
								$ARCurrent->options['rewrite_urls'][ $urls[0] ] = $urls[1];
							}
						break;
						default:
							die("no idea howto rewrite $option\n");
						break;
					}
				break;

				default:
					die("unknow option-switch ($option_switch)\n");
			}
		} else {
			$arg_v[$arg_c++]=$cmd;
		}
	}

	set_time_limit(0);


	if ($arg_c>=2) {
		$ARLogin="admin";
		$AR->user=new object;
		$AR->user->data=new object;
		$AR->user->data->login="admin";

		$ARCurrent->allnls = true;
		$ARCurrent->nolangcheck = true;
		$ax_config["writeable"]=false;
		$ax_config["database"]=$arg_v[1];
		if ($arg_c>3) {
			$destpath=$arg_v[3];
			$srcpath=$arg_v[2];
		} else
		if ($arg_c>2) {
			$srcpath=$arg_v[2];
		}

		$store=new axstore("", $ax_config);
		if (!$store->error) {
			$inst_store = $store_config["dbms"]."store";
			$importStore=new $inst_store($root,$store_config);

			$ARCurrent->importStore=&$importStore;
			$callArgs["srcpath"]  = $srcpath;
			$callArgs["destpath"] = $destpath;

			$store->call("system.export.phtml", $callArgs,
				$store->get("/"));
			$error=$store->error;

			$store->close();
			$importStore->close();

		} else {
			$error="ax error: ".$importStore->error;
		}

		if ($error) {
			echo $error."\n";
		}
	} else {
		echo $HELP_INFO;
	}
?>