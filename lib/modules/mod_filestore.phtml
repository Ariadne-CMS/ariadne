<?PHP
	/**************************************************************************
	File Store Module
	---------------------------------------------------------------------------

	filestore($name, $root)

    write($contents, $id, $name)

	read($id, $name, $limit=0, $offset=0)

	show($id, $name)

	exists($id, $name)

	import($fsId, $fsName, $fsLocalVars, $fsObject)

	copy_to_store($source, $id, $name="")

	copy_from_store($target, $id, $name="")

	remove($id, $name="")

	is_empty($id)

	copy($id, $newid, $name="", $newname="")

	move($id, $newid, $name="", $newname="")

	size($id, $name)
	
	purge($id)

    ls($id)

	mtime($id, $name)

	ctime($id, $name)

	touch($id, $name, $time)

	close()

	**************************************************************************/

	define("WRITE",true);
	define("READ",false);
	define("PATHTICLESIZE",100);
	define("DIRMODE",0770);
	define("FILEMODE",0660);

	class filestore {

		/* public */

		function filestore($name, $root) {
			// initialize filestore
			$this->name=$name;
			// make a copy of the store data, not a reference
			// for security reasons
			$this->root=$root.$name;
			if (!file_exists($this->root)) {
				if (!@mkdir($this->root, DIRMODE)) {
					error("Failed opening filestore $name with root: $root");
				}
			}
		}

		function write($contents, $id, $name) {
			$result=false;
			if ($name) {
				$path=$this->make_path($id, $name, WRITE);
				if ($fp=fopen($path, "wb")) {
					$result=fwrite($fp, $contents);
					fclose($fp);
				}
			}
			return $result;
		}

		function read($id, $name, $limit=0, $offset=0) {
			$result=false;
			$path=$this->make_path($id, $name);
			if (file_exists($path))	{
				if (!$limit) {
					$limit=filesize($path)-$offset;
				}
				if (!$limit) {
					$result = '';
				} else if ($fp=fopen($path, "rb")) {
					if ($offset) {
						fseek($fp, $offset);
					}
					$result=fread($fp, $limit);
					fclose($fp);
				}
			}
			return $result;
		}

		function show($id, $name) {
			$result=false;
			$path=$this->make_path($id, $name);
			if (file_exists($path))	{
				$result=readfile($path);				
			}
			return $result;
		}

		function exists($id, $name) {
			return file_exists($this->make_path($id, $name));
		}

		function ls($id) {
			$path=$this->make_path($id);
			if ($dir=@opendir($path)) {
				$result=array();
				while ($file=readdir($dir)) {
					if (is_file($path.$file)) {
						$result[]=$this->get_filename($file);
					}
				}
				closedir($dir);
			} else {
				$result=false;
			}
			return $result;
		}
			

		function import($fsId, $fsName, $fsLocalVars="", &$fsObject) {
			$fsPath=$this->make_path($fsId, $fsName);
			if (file_exists($fsPath)) {
				Parse_str($fsLocalVars);
				if ($fsObject) {
					$fsOldThis=&$this;
					$this=&$fsObject;
				}
				include($fsPath);
				if ($fsOldThis) {
					$this=&$fsOldThis;
				}					
			} else {
				$arResult=false;
			}
			if (isset($arResult)) {
				return $arResult;
			}
		}

		function copy_to_store($file, $id, $name="") {
			$result=false;
			//if (file_exists($file)) {
				if (is_dir($file)) {
					$path=$this->make_path($id, "", WRITE);
					// copy all files, result is number of files
					$count=0;
					if ($dir=opendir($file)) {
						while ($temp=readdir($dir)) {
							if (is_file($file.$temp)) {
								$target=$this->make_path($id, $temp);
								if ($result=copy($file.$temp, $target)) {
									$count++;
								}
							}
						}
						closedir($dir);
					}
					$result=$count;
				} else {
					if (!$name) {
						$name=basename($file);
					}
					$path=$this->make_path($id, $name, WRITE);
					$result=copy($file, $path);
				}
			//}
			return $result;
		}

		function copy_from_store($target, $id, $name="") {
			$result=false;
			if ($name) {
				$path=$this->make_path($id, $name);
				if (!file_exists($target) || !is_dir($target)) {
					$result=@copy($path, $target);
				} else if (is_dir($target)) {
					if (substr($target, -1)!="/") {
						$target.="/";
					}
					$target=$target.$name;
					$result=@copy($path, $target);
				}
			} else {
				if (!file_exists($target)) {
					mkdir($target);
				}
				if (file_exists($target) && (is_dir($target))) {
					if (substr($target, -1)!="/") {
						$target.="/";
					}
					$count=0;
					$files=$this->ls($id);
					if (is_array($files)) {
						while (list($key, $file)=each($files)) {
							$source=$this->make_path($id, $file);
							$result=@copy($source, $target.$file);
							if ($result) {
								$count++;
							}
						}
					}
					$result=$count;
				}
			}			
			return $result;
		}

		function remove($id, $name) {
			$result=false;
			$path=$this->make_path($id, $name);
			if (file_exists($path)) {
				unlink($path);
				if ($this->is_empty($id)) {
					$this->rmdir($id);
				}		
			}
		}

		function is_empty($id) {
			$empty=true;
			if ($dir=@opendir($this->make_path($id))) {
				while ($empty && ($file=readdir($dir))) {
					if ($file!="." && $file!="..") {
						$empty=false;
					}
				}
				closedir($dir);
			}
			return $empty;
		}

		function purge($id) {
			$path=$this->make_path($id);
			if ($dir=@opendir($path)) {
				while ($file=readdir($dir)) {
					if ($file!="." && $file!="..") {
						if (is_file($path.$file)) {
							unlink($path.$file);
						}
					}
				}
				closedir($dir);
				$this->rmdir($id);
			}
		}

		function copy($id, $name, $newid, $newname) {
			$source=$this->make_path($id, $name);
			$target=$this->make_path($newid, $newname, WRITE);
			return copy($source, $target);
		}

		function move($id, $name, $newid, $newname) {
			$result=false;
			$source=$this->make_path($id, $name);
			$target=$this->make_path($newid, $newname, WRITE);
			if (copy($source, $target)) {
				$result=unlink($source);
			}
			return $result;
		}

		function size($id, $name) {
			$path=$this->make_path($id, $name);
			if (file_exists($path)) {
				$result=filesize($path);
			} else {
				$result=false;
			}
			return $result;
		}

		function mtime($id, $name) {
			$path=$this->make_path($id, $name);
			if (file_exists($path)) {
				$result=filemtime($path);
			} else {
				$result=false;
			}
			return $result;
		}

		function ctime($id, $name) {
			$path=$this->make_path($id, $name);
			if (file_exists($path)) {
				$result=filectime($path);
			} else {
				$result=false;
			}
			return $result;
		}

		function touch($id, $name, $time) {
			$path=$this->make_path($id, $name);
			if (file_exists($path)) {
				$result=touch($path, $time);
			} else {
				$result=false;
			}
			return $result;
		}

		function close() {
		}

		/* private functions */

		function make_path($id, $name="", $write=false) {
			// calculate path based on $id and $name
			$path=$this->root;
			if (!file_exists($path) && $write) {
				mkdir($path, DIRMODE);
			}	
			while ($id) {
				$next=floor($id/PATHTICLESIZE);
				$part=$id%PATHTICLESIZE;
				$path.="/$part";
				if (!file_exists($path) && $write) {
					mkdir($path, DIRMODE);
				}
				$id=$next;				
			}
			$path.="/";
			if ($name) {
				$path.="_$name";
			}			
			return $path;
		}

		function get_filename($file) {
			return substr($file, 1);
		}

		function get_parent_id($id) {
			$parent=0;
			$count=0;
			while ($id) {
				$next=floor($id/PATHTICLESIZE);
				$part=$id%PATHTICLESIZE;
				if ($next) {
					$parent=$part*(pow(PATHTICLESIZE,$count))+$parent;
				}
				$id=$next;
				$count++;
			}
			return $parent;
		}	

		function rmdir($id) {
			$result=true;
			if ($this->is_empty($id)) {
				$path=$this->make_path($id);
				if (file_exists($path)) {
					$result=rmdir($path);
				}
				$parent=$this->get_parent_id($id);
				while ($parent) {
					if ($this->rmdir($parent)) {
						$parent=$this->get_parent_id($parent);
					} else {
						$parent=0;
					}
				}
			} else {
				$result=false;
			}
			return $result;
		}
	}
?>