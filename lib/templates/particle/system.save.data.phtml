<?php
	/******************************************************************
	 system.save.data.phtml				 Muze Ariadne v2.1
	 ------------------------------------------------------------------
 
	******************************************************************/

	require_once($this->store->get_config('code')."modules/mod_page.php");

	if ((($this->arIsNewObject &&
			($parentobj=current($this->get($this->parent, "system.get.phtml"))) &&
			$parentobj->CheckLogin("add", $this->type)) ||
			(!$this->arIsNewObject && $this->CheckLogin("edit"))) && 
			$this->CheckConfig()) {
		if (!$this->arIsNewObject) {
			// first make sure that the object is clean (data can only be set via 
			// the defined interface: $arCallArgs)
		    $this->data=current($this->get(".","system.get.data.phtml"));
		} else {
			$this->data=new object;
		}

		$this->error = null;

		// unset the properties array, so no properties can be passed to this template.
		$properties = array();

		$scenario=$this->getdata("scenario","none");
		if( !$scenario ){
			$scenarioObj = $this->get("/system/newspaper/scenarios/news/", "system.get.phtml");
			if( $scenarioObj ){
				$scenario = "/system/newspaper/scenarios/news/";
			}
		}

		if ($scenario && $this->exists($scenario)) {
			if ($displays=current($this->get($scenario, "system.get.displays.phtml"))) {
				$this->data->priority=$displays->data->priority;

				if (!$this->getdata("name",$ARConfig->nls->default)) { // default language for this path
					$this->error = ar::error( sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]), 1101);
					$arResult = false;
				} else {
					if ($ContentEditOptionsPath) {
						$arEditorSettings=$ARCurrent->editorSettings[$ContentEditOptionsPath];
						if (!$arEditorSettings) {
							$arEditorSettings=current($this->get($ContentEditOptionsPath, "editor.ini"));
							$ARCurrent->editorSettings[$ContentEditOptionsPath]=$arEditorSettings;
						}
					} else {
						$arEditorSettings=$ARCurrent->editorSettings[$this->path];
						if (!$arEditorSettings) {
							$arEditorSettings=$this->call("editor.ini");
							$ARCurrent->editorSettings[$this->path]=$arEditorSettings;
							if (sizeof($ARCurrent->editorSettings) > 10) {
								array_shift($ARCurrent->editorSettings);
							}
						}
					}

					if (!$this->data->nls) {
						// its a new object, no nls data specified yet, create it
						$this->data->nls=new object;
					}
					// data for the default language has been entered, so make sure
					// it is set as the default language for this object too.
					$this->data->nls->default=$ARConfig->nls->default;
					reset($AR->nls->list);
					$count=0;
					while (list($key, $value)=each($AR->nls->list)) {
						// for each language in the list, get the nls specific data
						if ($name=$this->getdata("name",$key)) { 
							// the name is the minimum requirement for an nls aware	object.
							if (!$this->data->$key) {
								$newnlsdata=new object;
							} else {
								$newnlsdata=$this->data->$key;
							}
							$newnlsdata->name=$name;
							$properties["name"][$count]["value"]=$name;
							$properties["name"][$count]["nls"]="$key'";
							$properties["text"][$count]["value"]=$name;
							$properties["text"][$count]["nls"]="$key";
							$count++;
							$newnlsdata->summary=page::compile($this->getdata("summary",$key), $key);

							if ($arEditorSettings) {
								if ($arEditorSettings["htmlcleaner"]["enabled"]) {
									include_once($this->store->get_config("code")."modules/mod_htmlcleaner.php");
									$config = $arEditorSettings["htmlcleaner"];
									$newnlsdata->summary = htmlcleaner::cleanup($newnlsdata->summary, $config);
								}
								if ($arEditorSettings["htmltidy"]["enabled"]) {
									include_once($this->store->get_config("code")."modules/mod_tidy.php");
									$config=$arEditorSettings["htmltidy"];
									$config["temp"]=$this->store->get_config("files")."temp/";
									$config["path"]=$AR->Tidy->path;
									$tidy=new ARtidy($config);
									$result=$tidy->clean($newnlsdata->summary);
									$newnlsdata->summary=$result["html"];
								}
								if ($arEditorSettings["allow_tags_summary"]) {
									$newnlsdata->summary=strip_tags($newnlsdata->summary, $arEditorSettings["allow_tags_summary"]);
								}
							}

							$properties["text"][$count]["value"]=substr($newnlsdata->summary,0,255);
							$properties["text"][$count]["nls"]="$key";
							$count++;
							$newnlsdata->title=$this->getdata("title", $key);
							$properties["text"][$count]["value"]=substr($this->getdata("title", $key),0,255);
							$properties["text"][$count]["nls"]="$key";
							$count++;
							if ($this->store->is_supported("fulltext")) {
								$properties["fulltext"][$count]["value"]=$this->store->format_for_fti(
										$newnlsdata->name." ".
										$newnlsdata->title." ".
										$AR->user->data->name." ".
										$this->html_to_text($newnlsdata->summary)." ".
										$this->html_to_text($this->getdata("page",$key))
										);
								$properties["fulltext"][$count]["nls"]=$key;
							}
							$this->data->$key=$newnlsdata;
							$this->data->nls->list[$key]=$value;
						} else { // clear language values for $key->name if set, keep the rest, just in case.
							if ($this->data->$key) {
								unset($this->data->$key->name);
								unset($this->data->nls->list[$key]);
							}
						}
					}
				}
				$this->data->scenario=$scenario;
				if ( !isset($startdatetime) ) {
					$this->data->startdate=$this->getdata("startdate","none");
					$this->data->starttime_hour = $this->getdata("starttime_hour");
					$this->data->starttime_minute = $this->getdata("starttime_minute");
					$this->data->starttime_seconds = $this->getdata("starttime_seconds");
					$this->data->starttime=($this->data->starttime_hour*3600)
										+($this->data->starttime_minute*60)
										+($this->data->starttime_seconds);
					$this->data->startdatetime = $this->data->startdate + $this->data->starttime;
				} else {
					$this->data->startdate = strtotime('today', $startdatetime);
					$this->data->starttime = $startdatetime - $this->data->startdate;
					$this->data->starttime_hour = strftime('%H', $startdatetime);
					$this->data->starttime_minute = strftime('%M', $startdatetime);
					$this->data->starttime_seconds = strftime('%S', $startdatetime);
					$this->data->startdatetime = $startdatetime;
				}
				if ( !isset($enddatetime) ) {
					$this->data->enddate=$this->getdata("enddate","none");
					$this->data->endtime_hour = $this->getdata("endtime_hour");
					$this->data->endtime_minute = $this->getdata("endtime_minute");
					$this->data->endtime_seconds = $this->getdata("endtime_seconds");
					$this->data->endtime=($this->data->endtime_hour*3600)
										+($this->data->endtime_minute*60)
										+($this->data->endtime_seconds);
					$this->data->enddatetime = $this->data->enddate + $this->data->endtime;
				} else {
					$this->data->enddate = strtotime('today', $enddatetime);
					$this->data->endtime = $enddatetime - $this->data->enddate;
					$this->data->endtime_hour = strftime('%H', $enddatetime);
					$this->data->endtime_minute = strftime('%M', $enddatetime);
					$this->data->endtime_seconds = strftime('%S', $enddatetime);
					$this->data->enddatetime = $enddatetime;
				}

				if( ( !$this->data->endtime ) && ( !$this->data->enddate ) ) {
					$this->data->endtime = $this->data->starttime;
					$this->data->enddate = $this->data->startdate;
				}

				if (!$this->data->published) {
					$this->data->published=time();
				}
				if (!$this->data->author) {
					$this->data->author=$AR->user->data->name;
					$this->data->author_path=$AR->user->path;
				}

				$i=0;
				@reset($displays);
				while ((list($display,$val)=@each($displays))) {
					$scenario_start=$this->data->startdate+$this->data->starttime +($val["start"]*3600*24);
					$scenario_end=$this->data->enddate+$this->data->endtime+($val["end"]*3600*24);
					$this->data->sstart[$display]=$scenario_start;
					$this->data->send[$display]=$scenario_end;
					$properties["article"][$i]["start"]=$scenario_start;
					$properties["article"][$i]["end"]=$scenario_end;
					$properties["article"][$i]["display"]=$display;
					$i++;
				}
				$properties["published"][0]["value"]=$this->data->published;

				$arResult = $this->save($properties);
				if ( !$this->error ) {
					reset($AR->nls->list);
					while (list($key, $value)=each($AR->nls->list)) {
						/* Reset the loop check, when saving lots of languages it might cause a loopcount exceeded */
						global $ARBeenHere;
						$ARBeenHere=array();

						$page=$this->getdata("page",$key);
						if ($page!==false) {
							$this->call("system.save.page.phtml",array("ContentLanguage" => $key, "page" => $page));
						}
					}
					global $cache_config;
					$cachestore=new cache($cache_config);
					$cachestore->onObjectSaved($this->id);
				}
			} else {
				$this->error = ar::error( sprintf($ARnls["err:notascenario"],$scenario), 1201 );
				$arResult = false;
			}
		} else {
			$this->error = ar::error( sprintf($ARnls["err:scenerionotfound"],$scenario), 1202 );
			$arResult = false;
		}
	}
?>