<?php
  if ( ( ($newtype)  && ($this->CheckLogin("add") ) ) || 
       ( (!$newtype) && ($this->CheckLogin("edit")) ) ) {
    if (!$confirm) {
      if ($date) {
        $date_arr=getdate($date);
      }
      if ($entry) {
        $entry_arr=getdate($entry);
      }
      if (($newtype) ||
          (!$data->repeat) ||
          ($data->repeat=="none")) { // default all for new items, and none repeating items
        $confirm=$ARnls["all"];
      } else if (($repeat) && ( // when changing the repeat values, default to all
          ($data->repeatend<($repeatend+24*60*60-1)) ||
          ($data->repeatn!=$repeatn) ||
	  ($data->repeat!=$repeat) ||
          ((serialize($data->repeat_on)!=serialize($repeat_on)) && ($repeat=="week")) ||
          ((serialize($data->repeat_by)!=serialize($repeat_by)) && ($repeat=="month")) ) ) {
        $confirm=$ARnls["all"];
      } else if ($date && $entry &&
                 ( ($entry_arr["year"]!=$date_arr["year"]) ||
                   ($entry_arr["mon"]!=$date_arr["mon"]) ||
                   ($entry_arr["mday"]!=$date_arr["mday"]) ) ) { // when the date is changed, default to current
        $confirm=$ARnls["current"];
      } else {
	$question=$ARnls["q:applychanges"];
        $buttons[]=$ARnls["all"];
	$buttons[]=$ARnls["current"];
        include($this->store->code."includes/confirm.phtml");
      }
    } 
    if ($confirm) {    
      if ($newtype) {
        $newdata=new object;
        $savetimeframes=1;
      } else {
        $newdata=$data; 
        $savetimeframes=0;
        if ($confirm==$ARnls["current"]) {
  	  // save a new pcalitem with the current values
 	  $newtype="pcalitem";
  	  $savetimeframes=1;
  	  $newfilename="{0:id}";
  	  // only one save -> disable any repeat info
  	  $newdata->repeat="none";
          $data->timeframes=$this->DelTimeframe($entry);
          $this->save($this->path, $this->type, $data);
        } else { // $confirm=="All"
          // check whether this is the first item in the repeating row
  	  //   or the item doesn't repeat
          // else ->
          if (($data->repeat!="none") && 
              ($data->timeframes[0]["start"]<$entry)) {
            // save a new pcalitem, repeating from now
            // and set endtime for the current object to current entry and save it.
            $data->timeframes=$this->NewEndtime($entry);
            $entry_arr=getdate($entry);
  	    $data->repeatend=mktime(0,0,0, $entry_arr["mon"], $entry_arr["mday"], $entry_arr["year"]);
            $this->save($this->path, $this->type, $data);
  	    $newtype="pcalitem";
            $newfilename="{0:id}";
  	    $savetimeframes=1;
          }
        }
      }
      // nls data
      if (!isset(${$ARConfig->nls->default}) && !isset($newdata->{$ARConfig->nls->default})) { // default language for this path
        $error=sprintf($ARnls["err:nodatafordefaultlanguage"],$AR->nls->list[$ARConfig->nls->default]);
      } else {
        if (!$newdata->nls) {
          $newdata->nls=new object;
        }
        $newdata->nls->default=$ARConfig->nls->default;
        reset($AR->nls->list);
        while (list($key, $value)=each($AR->nls->list)) {
          if (isset(${$key})) {
            $nlsformdata=$$key;
            if (!$newdata->$key) {
              $newnlsdata=new object;
            } else {
              $newnlsdata=$newdata->$key;
            }
            if (!$nlsformdata["name"]) {
              $error=sprintf($ARnls["err:shorttitle"],$AR->nls->list[$key]);
            }
            $newnlsdata->name=$nlsformdata["name"];
            $newnlsdata->summary=$nlsformdata["summary"];
            $properties["name"][]["value"]="'".AddSlashes($nlsformdata["name"])."'";
            $newdata->$key=$newnlsdata;
	        $newdata->nls->list[$key]=$value;
          }
        }
      }

      // starttime
      if (!isset($date)) {
        $error=$ARnls["err:validdate"];
      } else {
        $days=(24*60*60);
        $weeks=(7*$days);
        $date_arr=getdate($date);
        $newdata->starttime=mktime($starthour, $startminute, 0, $date_arr["mon"], $date_arr["mday"], $date_arr["year"]);
        // endtime
        if ($no_time) {
          $newdata->endtime=$newdata->starttime-1;
        } else {
          $newdata->endtime=mktime($endhour, $endminute, 0, $date_arr["mon"], $date_arr["mday"], $date_arr["year"]);
        }
        $newdata->priority=$priority;
        $properties["name"][0]["value"]="'".AddSlashes($newname)."'";
        $properties["priority"][0]["value"]=AddSlashes($priority);
        //      $repeatn: int
        //      week: $repeat_on[$option]=0/1 
        //         $option {0-7}  /* niet meer: "Sun","Mon","Tue","Wed","Thu","Fri","Sat"}
        //      month: $repeat_by=$option {"Day","Date"}
        //      $repeatend: date int
        $roptions=array(	$ARnls["none"] => "none",
    				$ARnls["day"]  => "day",
				$ARnls["week"] => "week",
				$ARnls["month"]=> "month",
				$ARnls["year"] => "year");
   	$moptions=array(	$ARnls["day"]  => "day",
				$ARnls["date"] => "date");
   	$woptions=array(	$ARnls["sun"]  => "sun",
				$ARnls["mon"]  => "mon",
				$ARnls["tue"]  => "tue",
				$ARnls["wed"]  => "wed",
				$ARnls["thu"]  => "thu",
				$ARnls["fri"]  => "fri",
				$ARnls["sat"]  => "sat");
        if (!$repeat) { // advanced options not selected 
  	  if (!$newdata->repeat) { // and never entered -> fill with defaults
  		$newdata->repeat="none";
  		$newdata->repeatn=1;
  	  }
        } else { // advanced options selected
   	  $newdata->repeat=$roptions[$repeat];
  	  $newdata->repeatn=abs(intval($repeatn));
  	  if (!$newdata->repeatn) { // must never be 0!
  		$newdata->repeatn=1;
          }
  	  $newdata->repeatend=intval($repeatend)+$days-1;
  	  $newdata->repeat_on=$repeat_on;
  	  $newdata->repeat_by=$moptions[$repeat_by];
        }
        $length=$newdata->endtime - $newdata->starttime;
        if (($newdata->starttime!=$data->starttime) ||
          ($newdata->endtime!=$data->endtime) ||
  	  ($newdata->repeat!=$data->repeat) ||
  	  ($newdata->repeatend>$data->repeatend) ||
  	  ($newdata->repeatn!=$data->repeatn) ||
  	  ((serialize($newdata->repeat_on)!=serialize($data->repeat_on)) && ($data->repeat=="Week")) ||
            ((serialize($newdata->repeat_by)!=serialize($data->repeat_by)) && ($data->repeat=="Month"))) {
          $savetimeframes=1;
        }
        if ($savetimeframes) {
          switch($newdata->repeat) {
      	case "none":	// add one entry;
      			$properties["timeframe"][0]["start"]=$newdata->starttime;
      			$properties["timeframe"][0]["end"]=$newdata->endtime;
      			break;
      	case "day":	// repeat ever $repeatn days untile $repeatend
      			$i=0;
      			$time=$newdata->starttime;
      			while (($time<=$newdata->repeatend) && ($i<100)) {
      				$properties["timeframe"][$i]["start"]=$time;
    				$properties["timeframe"][$i]["end"]=$time+$length;
    				$time+=($newdata->repeatn*$days);
      				$i++;
      			}
      			break;
      	case "week":	// repeat every $repeatn weeks on given weekdays until $repeatend
       			$i=0;
      			$time=$newdata->starttime; 
    			while ($time<=$newdata->repeatend) {
      				$time_arr=getdate($time);
      				$wday=$time_arr["wday"];
    				reset($newdata->repeat_on);
      				while (list($day,$checked)=each($newdata->repeat_on)) {
      					if ($checked) {
      						$diff=($day-$wday) * $days;
      						$properties["timeframe"][$i]["start"]=$time+$diff;
      						$properties["timeframe"][$i]["end"]=$time+$diff+$length;
      						$i++;
      					}
      				}
    				$time+=($newdata->repeatn*$weeks);  
      			}
      			break;
      	case "month":	// repeat every $repeatn months on ..
      			$i=0;
      			$stime_arr=getdate($newdata->starttime);
      			$time=$newdata->starttime;
      			if ($newdata->repeat_by=="day") { // .. the nth weekday of the month or .. 
      				$week=($stime_arr["mday"]-($stime_arr["mday"] % 7)) / 7; // get n (this simulates a 'div 7') 
      				while ($time<=$newdata->repeatend) {
      					$properties["timeframe"][$i]["start"]=$time;
      					$properties["timeframe"][$i]["end"]=$time+$length;
      					$i++;
     						// calculate mday of this weekday, this week of the next month
     						// first get the correct week
     						$check=getdate(mktime(0,0,0,$stime_arr["mon"]+$i, $week*7+1, $stime_arr["year"]));
     						// then get the first occurance of the weekday from there
					// check_wday<=stime_wday -> mday=check_mday+(stime_wday-check_wday)
					// check_wday
     						$temp=$stime_arr["wday"] - $check["wday"];
					if ($temp<0) {
						$mday=$check["mday"]+(7+$temp);
					} else {
						$mday=$check["mday"]+$temp;
					}
					$check=getdate(mktime(0,0,0,$stime_arr["mon"]+$i+1,-1,$stime_arr["year"]));
					if ($mday>$check["mday"]) { // check that $mday isn't in the next month
						$mday-=7; // then get the last wday of this month instead.
					}
     					// now make the new time
     					$time=mktime($stime_arr["hours"], $stime_arr["minutes"],
     						$stime_arr["seconds"], $stime_arr["mon"]+$i,
     						$mday, $stime_arr["year"]);					
      				}
      			} else { // .. this date until $repeatend
      				while ($time<=$newdata->repeatend) {
      					$properties["timeframe"][$i]["start"]=$time;
      					$properties["timeframe"][$i]["end"]=$time+$length;
      					$i++;
      					$time=mktime($stime_arr["hours"], $stime_arr["minutes"],
      						$stime_arr["seconds"], $stime_arr["mon"]+$i,
      						$stime_arr["mday"], $stime_arr["year"]);
      				}
      			}
      			break;
      	case "year":	// repeat every $repeatn years on this date until $repeatend
      			$i=0;
      			$time=$newdata->starttime; 
      			$stime_arr=getdate($newdata->starttime);
    			while ($time<=$newdata->repeatend) {
      				$properties["timeframe"][$i]["start"]=$time;
      				$properties["timeframe"][$i]["end"]=$time+$length;
      				$i++;
    				$time=mktime($stime_arr["hours"], $stime_arr["minutes"],
      					$stime_arr["seconds"], $stime_arr["mon"],
      					$stime_arr["mday"], $stime_arr["year"]+$i);
      			}
      			break;
          }
          $newdata->timeframes=$properties["timeframe"];
        }
      }
      include($this->store->code."includes/save.object.phtml");
    }
  }
?>