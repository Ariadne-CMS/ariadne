<?php
/**************************************************************************
	mod_lock v1.0b						msSQL

	table layout:

	Table locks
	+----------+---------------+------+-----+---------+-------+
	| Field    | Type          | Null | Key | Default | Extra |
	+----------+---------------+------+-----+---------+-------+
	| release  | int(11)       |      | MUL | 0       |       |
	| type     | char('O','T') |      | MUL | O       |       |
	| identity | varchar(23)   |      | MUL |         |       |
	| path     | varchar(127)  |      | MUL |         |       |
	+----------+---------------+------+-----+---------+-------+

	error numbers:

	1	lock()	mssql error when running lock query
	2	lock()	path already locked by someone else

**************************************************************************/


class mssqllock {

	function mssqllock($tbl_prefix="") {
		debug("mssqllock::mssqllock($tbl_prefix)");
		$this->tbl_prefix=$tbl_prefix;
		debug("mssqllock::mssqllock end","all");
	}

	function connect($host="",$user="sa",$password="",$database="") {
		debug("mssqllock::connect($host, $user, [password], $database)", "store");
		$this->mayClose = true;
		$this->host = $host;
		$this->user = $user;
		$this->password = $password;
		$this->database = $database;
		$this->connectid = mssql_connect(($host ? $host : ""),$user,$password) or die("DATABASE FAILED TO CONNECT");
		mssql_select_db($database) OR DIE ("Could not select MSSQL database ".$database);
		debug("mssqllock::connect end","all");
	}

	function get_locks($identity) {
		debug("mssqllock:get_locks($identity)","store");
		$i = 0;
		$query_string = "select path, release, type, [identity] from ".$this->tbl_prefix."locks where release >=".time()." and [identity]='".AddSlashes($identity)."'";
		$exec = mssql_query($query_string);
		for ($i = 0; $i < mssql_num_rows($exec); $i++) {
			$temp = mssql_fetch_array($exec);
			$result[$temp["path"]] = $temp;
		}
		debug("mssqllock:get_locks end","all");
		return $result;		
	}

	function lock($identity, $path, $type="O", $time=0) {
	/**********************************************************************
		This function locks an object/path
	 **********************************************************************/
		debug("mssqllock:lock($identity,$path,$type,$time)","store");
		if (!$time) {
			$time = time() + $this->lock_duration;
 		}
		// start transaction
		// lock will be held until transaction has finished
		$query_string="BEGIN TRAN";  //; LOCK TABLE ".$this->tbl_prefix."locks IN SHARE MODE;";
		debug($query_string, "store");
		mssql_query($query_string);

		// check if the path is not already locked by a parent
		$query_string="
			select path, release, type, [identity] 
			from ".$this->tbl_prefix."locks 
			where ( ( path=substring('".AddSlashes($path)."',1,len(path)) 
				       AND type='T' ) 
				     OR ( path='".AddSlashes($path)."' )";

		// if we are locking a whole tree we must also check if no
		// child has been locked already
		if ($type=="T") {
			$query_string.=" OR ( path like '".AddSlashes($path)."%' ) ";
		}

		$alreadylocked=false;
		// see if this lock is still alive
		$i = 0;
		$query_string.=") AND release>=".time();
		debug($query_string, "store");
		$exec = mssql_query($query_string);
		for($i=0; $i < mssql_num_rows($exec); $i++) {
			$lock=mssql_fetch_array($exec);
			if ($lock["identity"]!=$identity) {
				// this is a lock with another identity, so fail the current lock attempt
				$alreadylocked=true;
				$this->locklist[]=$lock;
			}
		}

		$result=false;
		if (!$alreadylocked) {
			// clear old lock entries
			$query_string="
				delete from ".$this->tbl_prefix."locks where path='".AddSlashes($path)."'";

			mssql_query($query_string);

			$query_string="
				insert into ".$this->tbl_prefix."locks (path, release, type, [identity]) values (
				'".AddSlashes($path)."', $time, '".AddSlashes($type)."',
				'".AddSlashes($identity)."')";

			debug($query_string, "store");
			$exec = mssql_query($query_string);
			$err = mssql_query("select @@ERROR as ErrorCode");
			$e = mssql_fetch_array($err);
			if (!$e[0]) {
				$result=true;
			} else {
				$this->error=2;
				$this->error_message="MOD_LOCK: ERROR 2: ".$e[0];
			}
		} else {
			$this->error=1;
			$this->error_message="MOD_LOCK: ERROR 1: $path already locked.";
		}
		// Finish transaction
		$query_string="COMMIT";
		debug($query_string, "store");
		mssql_query($query_string);

		return ($result);
	}

	function unlock($identity,$path="") {

		$query_string="delete from ".$this->tbl_prefix."locks where [identity]='".AddSlashes($identity)."'";
		if ($path) {
			$query_string.=" and path='".AddSlashes($path)."'";
		}
		mssql_query($query_string);

	}

	function close() {
		if ($this->mayClose) {
			mssql_close($this->connectid);
		}
	}

	function init() {
		$query_string="
CREATE TABLE ".$this->tbl_prefix."locks (
        [release] numeric(11) NOT NULL,
        [type] char(1) check ([type] in ('O','T')) NOT NULL,
        [identity] varchar(32) NOT NULL,
        [path] varchar(127) NOT NULL
);";
		mssql_query($query_string);
		$query_string="CREATE INDEX locks_release ON ".$this->tbl_prefix."locks (release);";
		mssql_query($query_string);
		$query_string="CREATE INDEX locks_type ON ".$this->tbl_prefix."locks (type);";
		mssql_query($query_string);
		$query_string="CREATE INDEX locks_identity ON ".$this->tbl_prefix."locks ([identity]);";
		mssql_query($query_string);
		$query_string="CREATE INDEX locks_path ON ".$this->tbl_prefix."locks (path);";
		mssql_query($query_string);
	}
}
?>