#!/usr/bin/env php
<?php

/*
	Added by Gerhard Hoogterp (gerhard@frappe.xs4all.nl)
	date: 30 nov 2006

	procFile is called with a filename as only parameter. In this case it
	checks the age of the file and files older than a day
	are removed. The same is attempted for directories, but unless they
	are empty this should fail.

*/

define('MINUTE',60);
define('HOUR',3600);
define('DAY',86400);

$skipentries = array('.','..','.svn','CVS', '.git');

function procFile($filename) {
	if (strpos($filename,'.svn')) { return; }

	$ctime=filectime($filename);
	$age=time()-$ctime;
	$perms=fileperms($filename);

	if ($age>DAY) {

		if (is_dir($filename)) {
			$res=@rmdir($filename);
		} else {
			$res=@unlink($filename);
		}

		print $res?" - ":" ! ";
		printf("%18s %5s %o %s\n",
			strftime('%d %b %Y %H:%M',$ctime),
			$age,
			$perms,
			$filename);
	}
}

function procCacheFile($filename) {
	$mtime = filemtime($filename);
	if ($mtime < 1000) {
		echo "Skipped $filename, not stale enough;\n";
		return;
	}
	$age = time() - $mtime;
	$perms=fileperms($filename);
	
	if ($age > DAY) {
		if (is_dir($filename)) {
			$res=@rmdir($filename);
		} else {
			$res=@unlink($filename);
		}

		$headerfilename = str_replace("/cache/", "/cacheheaders/", $filename);
		
		if (file_exists($headerfilename)) {
			if (is_dir($headerfilename)) {
				@rmdir($headerfilename);
			} else {
				@unlink($headerfilename);
			}
			// HACK:
			// this case should only trigger in the public cache case, and
			// only the public cache uses the cachestore
			// the headerfilename will only exists in the public cache case

			global $cache_config,$store_config;
			$prefix = $store_config['files']."cache/";

			$cachename = str_replace($prefix, "", $filename);

			$cachestore=new cache($cache_config);
			$cachestore->delete($cachename);
		}

		print $res?" - ":" ! ";
		printf("%18s %5s %o %s\n",
			strftime('%d %b %Y %H:%M',$mtime),
			$age,
			$perms,
			$filename);
	}
}

function recurse($func, $dir=".") {
	global $skipentries;
	if (is_callable($func)) {

		$d = dir($dir);
		while (false !== ($entry = $d->read())) {
			if(!in_array($entry,$skipentries)) {
				if (is_dir($dir.'/'.$entry)) {
					recurse($func,$dir.'/'.$entry);
				} else {
					$func($dir.'/'.$entry);
				}
			}
		}
		$d->close();
		@unlink($dir);
	}
}

/*----------------------------- The original script --------------------------*/

$ARLoader = 'cmd';
$currentDir = getcwd();
$ariadne = dirname($currentDir).'/lib/';

if (!@include_once($ariadne."/bootstrap.php")) {
	chdir(substr($_SERVER['PHP_SELF'], 0, strrpos($_SERVER['PHP_SELF'], '/')));
	$ariadne = dirname(getcwd()).'/lib/';

	if(!include_once($ariadne."/bootstrap.php")){
		echo "could not find Ariadne";
		exit(1);
	}

	chdir($currentDir);
}

set_time_limit(0);

echo " . Clearing old sessions...\n";
$inst_store = $session_config["dbms"]."store";
$sessionstore=new $inst_store($root, $session_config);

$query = "object.implements='psession' and object.lastchanged < ".(time() - $session_config["timeout"]*4) ."order by none";

/* purge all expired sessions */
while (count($sessionstore->call("system.expire.phtml","",
	$sessionstore->find("/", $query,1000))) >= 1000);

echo $sessionstore->total." expired sessions removed.\n";
$sessionstore->close();
echo "done.\n";

// clean up store temp directories
if ($AR->OS=="UNIX") {
	echo " . Clearing temporary files...\n";
	$tempdir=$store_config["files"]."temp/";
	if (file_exists($tempdir)) {
		recurse(procFile,$tempdir);
	}
	echo " . done.\n";

} else {
	echo "Windows support needs testing\n";
/* Needs to be tested
	echo " . Clearing temporary files...\n";
	$tempdir=$store_config["files"]."temp\";
	if (file_exists($tempdir)) {
		recurse(procFile,$tempdir);
	}
	echo " . done.\n";
 */
}

require_once(AriadneBasePath."/modules/mod_cache.php");
// clean up cache files
if ($AR->OS=="UNIX") {
	echo " . Clearing stale cache files...\n";
	$cachedir=$store_config['files']."cache/";
	$privatecachedir = $store_config['files']."privatecache/";
	if (file_exists($cachedir)) {
		recurse(procCacheFile, $cachedir);
	}
	echo " . done.\n";
	echo " . Clearing stale private cache files...\n";
	if (file_exists($privatecachedir)) {
		recurse(procCacheFile, $privatecachedir);
	}
	echo " . done.\n";
} else {
	// Windows support needs testing here, too;
}

?>
