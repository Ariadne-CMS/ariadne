<?php
/**************************************************************************
	mod_lock v1.0b						MySQL

	table layout:

	Table locks
	+----------+---------------+------+-----+---------+-------+
	| Field    | Type          | Null | Key | Default | Extra |
	+----------+---------------+------+-----+---------+-------+
	| release  | int(11)       |      | MUL | 0       |       |
	| type     | enum('O','T') |      | MUL | O       |       |
	| identity | varchar(23)   |      | MUL |         |       |
	| path     | varchar(127)  |      | MUL |         |       |
	+----------+---------------+------+-----+---------+-------+

**************************************************************************/


class pgsqllock {

	function pgsqllock($host="localhost",$port="5432", $user="root",$password="",$database="modules") {
		$this->host=$host;
		$this->port=$port;
		$this->user=$user;
		$this->password=$password;
	        $this->database=$database;
		$this->connectid=pg_pconnect("host=$host port=$port user=$user password=$password dbname=$database");
	}


	function get_locks($identity) {
		$query_string="select path,release, type, identity from locks where 
		release >=".time()." and identity='".AddSlashes($identity)."'";
		$query=@pg_exec($this->connectid, $query_string);
		while ($temp=@pg_fetch_array($query, 1)) {
			$result["locks"][$temp["path"]]=$temp;
			if ($temp["release"]>$result["release"]) {
				$result["release"]=$temp["release"];
			}
		}
		return $result;
	}

	function lock($identity,$path,$time=0,$type="O") {
	/**********************************************************************
		This function locks a object/path
	**********************************************************************/
		if (!$time) {
			$time=time()+$this->lock_duration;
 		}
		// lock table first
		$query_string="begin work;\n lock tables locks in exclusive mode";
		$result=@pg_exec($this->connect_id, $query_string);

		// check if there is no parentlock :)
		$query_string="
		select path, release, type, identity from locks where
		(
			( path=substring('".AddSlashes($path)."',1,char_length(path)) AND
			  type='T' ) OR
			( path='".AddSlashes($path)."' )
		) ";

		// if we are locking a whole tree we must check if no
		// child has been locked
		if ($type=="T") {
			$query_string.="
			OR ( path like '".AddSlashes($path)."%' )
			";
		}

		// see if this lock is still alive
		$query_string.="AND release>=".time();
		$query=@pg_exec($this->connectid, $query_string);
		while ($temp=@pg_fetch_array($query, 1)) {
			$result["locks"][$temp["path"]]=$temp;
			if ($temp["release"]>$result["release"]) {
				$result["release"]=$temp["release"];
			}
		}


		if (!$result || ($result["locks"][$path]["identity"]==$identity)) {
			if (!$result) {
				$query_string="
				insert into locks (path, release, type, identity) values (
				'".AddSlashes($path)."', $time, '".AddSlashes($type)."',
				'".AddSlashes($identity)."')";
			} else {
				$query_string="
				update locks 
				set release=$time,
				type='".AddSlashes($type)."' where
				path='".AddSlashes($path)."' and
				identity='".AddSlashes($identity)."'";
			}
			pg_exec($this->connectid, $query_string);
		}

		$query_string="commit work;";
		pg_exec($this->connectid, $query_string);
		return $result;
	}

	function unlock($identity,$path="") {

		$query_string="delete from locks where identity='".AddSlashes($identity)."'";
		if ($path) {
			$query_string.=" and path='".AddSlashes($path)."'";
		}
		pg_exec($this->connectid, $query_string);

	}

	function close() {
		pg_close($this->connectid);
	}

	function init() {
		$query_string="
CREATE TABLE locks (
        release int NOT NULL,
        type enum('O','T') NOT NULL,
        identity varchar(23) NOT NULL,
        path varchar(127) NOT NULL );
CREATE INDEX locks_release on locks(release, identity);
CREATE INDEX locks_path on locks(path, type);
";
		pg_exec($this->connectid, $query_string);
	}
}
?>