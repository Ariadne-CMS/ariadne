#!/usr/bin/php -q
<?php
	$stack=array();
	$in=fopen('php://stdin', 'r');

	class object { };

	function startElement($parser, $name, $attribs) {
	global $stack;
		switch($name) {
			case "wddxPacket":
			case "header":
			case "comment":
			case "version":
			case "data":
				array_push($stack, Array("type" => "top", "data" => Array()));
			break;
			case "struct":
				switch($attribs["type"]) {
					case "object":
						$value = new object;
					break;
					default:
						$value = Array();
					break;
				}
				array_push($stack, Array("type" => $attribs["type"], "data" => $value));
			break;
			case "var":
				array_push($stack, Array("type" => $name, "data" => $attribs["name"]));
			break;
			case "number":
			case "string":
			case "boolean":
				array_push($stack, Array("type" => $name));
			break;
		}
	}
	
	function endElement($parser, $name) {
	global $stack;

		$element = &$stack[count($stack)-1];
		$element["locked"] = true;

		switch($name) {
			case "var":
				$value = array_pop($stack);
				if ($value["type"] == "var") {
					/* we did get a key without a value */
					$var = $value;
				} else {
					$var = array_pop($stack);
				}
				$struct = array_pop($stack);

				$key = $var["data"];
				if (is_object($struct["data"])) {
					$struct["data"]->$key = $value["data"];
				} else {
					$struct["data"][$key] = $value["data"];
				}
				array_push($stack, $struct);
			break;

			case "data";
				$object = array_pop($stack);
				print_r($object["data"]);
			break;
		}
		
	}
	
	function characterData($parser, $data) {
	global $stack;
		$element = &$stack[count($stack)-1];
		if (!$element["locked"]) {
			switch ($element["type"]) {
				case "number":
					$element["data"] = (int)$data;
				break;
				case "boolean":
					switch ($data) {
						case "true":
							$element["data"] = true;
						break;
						default:
							$element["data"] = false;
					}
				break;
				case "string":
					$element["data"] .= $data;
				break;
			}
		}
	}
	
	$xml_parser = xml_parser_create();
	// use case-folding so we are sure to find the tag in $map_array
	xml_parser_set_option($xml_parser, XML_OPTION_CASE_FOLDING, false);
	xml_set_element_handler($xml_parser, "startElement", "endElement");
	xml_set_character_data_handler($xml_parser, "characterData");
	if (!$in) {
		die("could not open XML input");
	}
	
	while ($data = fgets($in, 65535)) {
		if (!xml_parse($xml_parser, $data, feof($in))) {
			die(sprintf("XML error: %s at line %d",
				xml_error_string(xml_get_error_code($xml_parser)),
				xml_get_current_line_number($xml_parser)));
		}
	}
	xml_parser_free($xml_parser);
?>