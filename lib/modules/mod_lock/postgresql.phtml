<?php
/**************************************************************************
	mod_lock v1.0b						PostgreSQL

	table layout:

	Table locks
	+----------+---------------+------+-----+---------+-------+
	| Field    | Type          | Null | Key | Default | Extra |
	+----------+---------------+------+-----+---------+-------+
	| release  | int(11)       |      | MUL | 0       |       |
	| type     | char('O','T') |      | MUL | O       |       |
	| identity | varchar(23)   |      | MUL |         |       |
	| path     | varchar(127)  |      | MUL |         |       |
	+----------+---------------+------+-----+---------+-------+

	error numbers:

	1	lock()	postgresql error when running lock query
	2	lock()	path already locked by someone else

**************************************************************************/


class postgresqllock {

	function postgresqllock($tbl_prefix="") {
        debug("postgresqllock::postgresqllock($tbl_prefix)");
		$this->tbl_prefix=$tbl_prefix;
        debug("postgresqllock::postgresqllock end","all");
	}

	function connect($host="",$user="root",$password="",$database="") {
        debug("postgresqllock::connect($host, $user, [password], $database)", "store");
		$this->mayClose		= true;
		$this->host			= $host;
		$this->user			= $user;
		$this->password		= $password;
		$this->database		= $database;
		$this->connectid	= pg_connect(
				($host ? " host='$host'" : "").
				" user='$user'".
				" password='$password'".
				" dbname='$database'") OR DIE ("Could not connect to PostgreSQL database ".$database);
        debug("postgresqllock::connect end","all");
	}

	function get_locks($identity) {
        debug("postgresqllock:get_locks($identity)","store");
		$i				= 0;
		$query_string	= "select path, release, type, identity from ".$this->tbl_prefix."locks where release >=".time()." and identity='".AddSlashes($identity)."'";
		$exec			= @pg_exec($this->connectid, $query_string);
		while ($temp = @pg_fetch_array($exec, $i++)) {
			$result[$temp["path"]]	= $temp;
		}
        debug("postgresqllock:get_locks end","all");
		return $result;		
	}

	function lock($identity, $path, $type="O", $time=0) {
	/**********************************************************************
		This function locks an object/path
	**********************************************************************/
        debug("postgresqllock:lock($identity,$path,$type,$time)","store");
		if (!$time) {
			$time	= time() + $this->lock_duration;
 		}
		// start transaction
		// lock will be held until transaction has finished
		$query_string="BEGIN WORK; LOCK TABLE ".$this->tbl_prefix."locks IN SHARE MODE;";
		debug($query_string, "store");
		@pg_exec($this->connectid, $query_string);

		// check if the path is not already locked by a parent
		$query_string="
			select path, release, type, identity 
			from ".$this->tbl_prefix."locks 
			where ( ( path=substring('".AddSlashes($path)."',1,length(path)) 
				       AND type='T' ) 
				     OR ( path='".AddSlashes($path)."' )";

		// if we are locking a whole tree we must also check if no
		// child has been locked already
		if ($type=="T") {
			$query_string.=" OR ( path like '".AddSlashes($path)."%' ) ";
		}

		$alreadylocked=false;
		// see if this lock is still alive
		$i = 0;
		$query_string.=") AND release>=".time();
		debug($query_string, "store");
		$exec=@pg_exec($this->connectid, $query_string);
		while ($lock=@pg_fetch_array($exec, $i++)) {
			if ($lock["identity"]!=$identity) {
				// this is a lock with another identity, so fail the current lock attempt
				$alreadylocked=true;
				$this->locklist[]=$lock;
			}
		}

		$result=false;
		if (!$alreadylocked) {
			// clear old lock entries
			$query_string="
				delete from ".$this->tbl_prefix."locks where path='".AddSlashes($path)."'";

			pg_exec($this->connectid, $query_string);

			$query_string="
				insert into ".$this->tbl_prefix."locks (path, release, type, identity) values (
				'".AddSlashes($path)."', $time, '".AddSlashes($type)."',
				'".AddSlashes($identity)."')";

			debug($query_string, "store");
			pg_exec($this->connectid, $query_string);
			if (!pg_errormessage($this->connectid)) {
				$result=true;
			} else {
				$this->error=2;
				$this->error_message="MOD_LOCK: ERROR 2: ".pg_errormessage($this->connectid);
			}
		} else {
			$this->error=1;
			$this->error_message="MOD_LOCK: ERROR 1: $path already locked.";
		}
		// Finish transaction
		$query_string="COMMIT WORK;";
		debug($query_string, "store");
		pg_exec($this->connectid,$query_string);

		return ($result);
	}

	function unlock($identity,$path="") {

		$query_string="delete from ".$this->tbl_prefix."locks where identity='".AddSlashes($identity)."'";
		if ($path) {
			$query_string.=" and path='".AddSlashes($path)."'";
		}
		pg_exec($this->connectid, $query_string);

	}

	function close() {
		if ($this->mayClose) {
			@pg_close($this->connectid);
		}
	}

	function init() {
		$query_string="
CREATE TABLE ".$this->tbl_prefix."locks (
        release numeric(11) NOT NULL,
        type char(1) check (type in ('O','T')) NOT NULL,
        identity varchar(32) NOT NULL,
        path varchar(127) NOT NULL
);
CREATE INDEX ".$this->tbl_prefix."locks_release ON ".$this->tbl_prefix."locks (release);
CREATE INDEX ".$this->tbl_prefix."locks_type ON ".$this->tbl_prefix."locks (type);
CREATE INDEX ".$this->tbl_prefix."locks_identity ON ".$this->tbl_prefix."locks (identity);
CREATE INDEX ".$this->tbl_prefix."locks_path ON ".$this->tbl_prefix."locks (path);
";
		pg_exec($this->connectid, $query_string);
	}
}
?>