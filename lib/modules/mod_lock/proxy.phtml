<?php
/**************************************************************************
	mod_lock v1.0b						stub class

**************************************************************************/

include_once($this->code."/modules/mod_lock/stub.phtml");
class proxylock extends stublock {

	var $key;

	function proxylock($key) {
		global $AR;
		debug("proxylock::proxylock($tbl_prefix)");
		$this->key = $key;
		debug("proxylock::proxylock end","all");
	}

	/*
	function connect($host="",$user="root",$password="",$database="") {
		global $AR;
		debug("proxylock::connect($host, $user, [password], $database)", "store");
		$result= &$AR->stores[$this->key]->mod_lock->connect$hist,$user,$password,$database
		$this->error = $AR->stores[$this->key]->mod_lock->error;
		debug("proxylock::connect end","all");
		return $result;

	}
	*/

	function get_locks($identity) {
		global $AR;
		debug("proxylock:get_locks($identity)","store");
		$result= &$AR->stores[$this->key]->mod_lock->get_locks($identity);
		$this->error = $AR->stores[$this->key]->mod_lock->error;
		debug("proxylock:get_locks end","all");
		return $result;
	}

	function lock($identity, $path, $type="O", $time=0) {
	/**********************************************************************
		This function locks an object/path
	**********************************************************************/
		global $AR;
		debug("proxylock: lock($identity,$path,$type,$time)","store");
		$result= &$AR->stores[$this->key]->mod_lock->lock($identity, $path, $type, $time);
		$this->error = $AR->stores[$this->key]->mod_lock->error;
		debug("proxylock: lock end","all");
		return $result;
	}

	function unlock($identity,$path="") {
	/**********************************************************************
		This function unlocks an object/path
	**********************************************************************/
		global $AR;
		debug("proxylock: unlock($identity,$path)","store");
		$result= &$AR->stores[$this->key]->mod_lock->unlock($identity, $path);
		$this->error = $AR->stores[$this->key]->mod_lock->error;
		debug("proxylock: unlock end","all");
		return $result;

	}

	function close() {
	/**********************************************************************
		This function closes the mod_lock
	**********************************************************************/
		global $AR;
		debug("proxylock: close($identity,$path,$type,$time)","store");
		$result= &$AR->stores[$this->key]->mod_lock->close($identity,$path,$type,$time);
		$this->error = $AR->stores[$this->key]->mod_lock->error;
		debug("proxylock: unlock end","all");
		return $result;
	}
}

?>